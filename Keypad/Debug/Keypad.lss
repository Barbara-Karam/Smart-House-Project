
Keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003242  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000052  00800060  00003242  000032d6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000008  008000b2  008000b2  00003328  2**0
                  ALLOC
  3 .stab         000026a0  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000eab  00000000  00000000  000059c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006873  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  000069d3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  00006b62  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00008ba7  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  00009ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000ac2c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000adac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b06e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b8fc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 8f 0c 	jmp	0x191e	; 0x191e <__vector_10>
      2c:	0c 94 d1 0c 	jmp	0x19a2	; 0x19a2 <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e4       	ldi	r30, 0x42	; 66
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a2 3b       	cpi	r26, 0xB2	; 178
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a2 eb       	ldi	r26, 0xB2	; 178
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	aa 3b       	cpi	r26, 0xBA	; 186
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 17 0e 	call	0x1c2e	; 0x1c2e <main>
      8a:	0c 94 1f 19 	jmp	0x323e	; 0x323e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e9       	ldi	r26, 0x91	; 145
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 e8 18 	jmp	0x31d0	; 0x31d0 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e9       	ldi	r24, 0x91	; 145
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 04 19 	jmp	0x3208	; 0x3208 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f0 18 	jmp	0x31e0	; 0x31e0 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	61 e9       	ldi	r22, 0x91	; 145
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 0c 19 	jmp	0x3218	; 0x3218 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 f4 18 	jmp	0x31e8	; 0x31e8 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 10 19 	jmp	0x3220	; 0x3220 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 f8 18 	jmp	0x31f0	; 0x31f0 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 14 19 	jmp	0x3228	; 0x3228 <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_Init(void)
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
	/* Initial Direction For Pins */
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
     ca6:	ea e3       	ldi	r30, 0x3A	; 58
     ca8:	f0 e0       	ldi	r31, 0x00	; 0
     caa:	8f e0       	ldi	r24, 0x0F	; 15
     cac:	80 83       	st	Z, r24
			DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
     cae:	e7 e3       	ldi	r30, 0x37	; 55
     cb0:	f0 e0       	ldi	r31, 0x00	; 0
     cb2:	8f ef       	ldi	r24, 0xFF	; 255
     cb4:	80 83       	st	Z, r24
			DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
     cb6:	e4 e3       	ldi	r30, 0x34	; 52
     cb8:	f0 e0       	ldi	r31, 0x00	; 0
     cba:	8f e0       	ldi	r24, 0x0F	; 15
     cbc:	80 83       	st	Z, r24
			DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
     cbe:	e1 e3       	ldi	r30, 0x31	; 49
     cc0:	f0 e0       	ldi	r31, 0x00	; 0
     cc2:	83 e0       	ldi	r24, 0x03	; 3
     cc4:	80 83       	st	Z, r24
			DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);

	/* Initial Value For Pins */
	PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
     cc6:	eb e3       	ldi	r30, 0x3B	; 59
     cc8:	f0 e0       	ldi	r31, 0x00	; 0
     cca:	10 82       	st	Z, r1
			DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);
	PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
     ccc:	e8 e3       	ldi	r30, 0x38	; 56
     cce:	f0 e0       	ldi	r31, 0x00	; 0
     cd0:	10 82       	st	Z, r1
			DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);
	PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
     cd2:	e5 e3       	ldi	r30, 0x35	; 53
     cd4:	f0 e0       	ldi	r31, 0x00	; 0
     cd6:	8f ef       	ldi	r24, 0xFF	; 255
     cd8:	80 83       	st	Z, r24
			DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);
	PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
     cda:	e2 e3       	ldi	r30, 0x32	; 50
     cdc:	f0 e0       	ldi	r31, 0x00	; 0
     cde:	10 82       	st	Z, r1
			DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}
     ce0:	cf 91       	pop	r28
     ce2:	df 91       	pop	r29
     ce4:	08 95       	ret

00000ce6 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection	(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
     ce6:	df 93       	push	r29
     ce8:	cf 93       	push	r28
     cea:	cd b7       	in	r28, 0x3d	; 61
     cec:	de b7       	in	r29, 0x3e	; 62
     cee:	2e 97       	sbiw	r28, 0x0e	; 14
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	8a 83       	std	Y+2, r24	; 0x02
     cfc:	6b 83       	std	Y+3, r22	; 0x03
     cfe:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1- Valid Port ID
             2- Valid Pin ID	
			 3- Valid Pin Direction*/
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
     d04:	8a 81       	ldd	r24, Y+2	; 0x02
     d06:	84 30       	cpi	r24, 0x04	; 4
     d08:	08 f0       	brcs	.+2      	; 0xd0c <DIO_u8SetPinDirection+0x26>
     d0a:	0d c1       	rjmp	.+538    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d0c:	8b 81       	ldd	r24, Y+3	; 0x03
     d0e:	88 30       	cpi	r24, 0x08	; 8
     d10:	08 f0       	brcs	.+2      	; 0xd14 <DIO_u8SetPinDirection+0x2e>
     d12:	09 c1       	rjmp	.+530    	; 0xf26 <DIO_u8SetPinDirection+0x240>
     d14:	8c 81       	ldd	r24, Y+4	; 0x04
     d16:	88 23       	and	r24, r24
     d18:	21 f0       	breq	.+8      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d1a:	8c 81       	ldd	r24, Y+4	; 0x04
     d1c:	81 30       	cpi	r24, 0x01	; 1
     d1e:	09 f0       	breq	.+2      	; 0xd22 <DIO_u8SetPinDirection+0x3c>
     d20:	02 c1       	rjmp	.+516    	; 0xf26 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	28 2f       	mov	r18, r24
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	3e 87       	std	Y+14, r19	; 0x0e
     d2a:	2d 87       	std	Y+13, r18	; 0x0d
     d2c:	8d 85       	ldd	r24, Y+13	; 0x0d
     d2e:	9e 85       	ldd	r25, Y+14	; 0x0e
     d30:	81 30       	cpi	r24, 0x01	; 1
     d32:	91 05       	cpc	r25, r1
     d34:	09 f4       	brne	.+2      	; 0xd38 <DIO_u8SetPinDirection+0x52>
     d36:	4f c0       	rjmp	.+158    	; 0xdd6 <DIO_u8SetPinDirection+0xf0>
     d38:	2d 85       	ldd	r18, Y+13	; 0x0d
     d3a:	3e 85       	ldd	r19, Y+14	; 0x0e
     d3c:	22 30       	cpi	r18, 0x02	; 2
     d3e:	31 05       	cpc	r19, r1
     d40:	2c f4       	brge	.+10     	; 0xd4c <DIO_u8SetPinDirection+0x66>
     d42:	8d 85       	ldd	r24, Y+13	; 0x0d
     d44:	9e 85       	ldd	r25, Y+14	; 0x0e
     d46:	00 97       	sbiw	r24, 0x00	; 0
     d48:	71 f0       	breq	.+28     	; 0xd66 <DIO_u8SetPinDirection+0x80>
     d4a:	ee c0       	rjmp	.+476    	; 0xf28 <DIO_u8SetPinDirection+0x242>
     d4c:	2d 85       	ldd	r18, Y+13	; 0x0d
     d4e:	3e 85       	ldd	r19, Y+14	; 0x0e
     d50:	22 30       	cpi	r18, 0x02	; 2
     d52:	31 05       	cpc	r19, r1
     d54:	09 f4       	brne	.+2      	; 0xd58 <DIO_u8SetPinDirection+0x72>
     d56:	77 c0       	rjmp	.+238    	; 0xe46 <DIO_u8SetPinDirection+0x160>
     d58:	8d 85       	ldd	r24, Y+13	; 0x0d
     d5a:	9e 85       	ldd	r25, Y+14	; 0x0e
     d5c:	83 30       	cpi	r24, 0x03	; 3
     d5e:	91 05       	cpc	r25, r1
     d60:	09 f4       	brne	.+2      	; 0xd64 <DIO_u8SetPinDirection+0x7e>
     d62:	a9 c0       	rjmp	.+338    	; 0xeb6 <DIO_u8SetPinDirection+0x1d0>
     d64:	e1 c0       	rjmp	.+450    	; 0xf28 <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
     d66:	8c 81       	ldd	r24, Y+4	; 0x04
     d68:	28 2f       	mov	r18, r24
     d6a:	30 e0       	ldi	r19, 0x00	; 0
     d6c:	3c 87       	std	Y+12, r19	; 0x0c
     d6e:	2b 87       	std	Y+11, r18	; 0x0b
     d70:	8b 85       	ldd	r24, Y+11	; 0x0b
     d72:	9c 85       	ldd	r25, Y+12	; 0x0c
     d74:	00 97       	sbiw	r24, 0x00	; 0
     d76:	31 f0       	breq	.+12     	; 0xd84 <DIO_u8SetPinDirection+0x9e>
     d78:	2b 85       	ldd	r18, Y+11	; 0x0b
     d7a:	3c 85       	ldd	r19, Y+12	; 0x0c
     d7c:	21 30       	cpi	r18, 0x01	; 1
     d7e:	31 05       	cpc	r19, r1
     d80:	b1 f0       	breq	.+44     	; 0xdae <DIO_u8SetPinDirection+0xc8>
     d82:	d2 c0       	rjmp	.+420    	; 0xf28 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinId);
     d84:	aa e3       	ldi	r26, 0x3A	; 58
     d86:	b0 e0       	ldi	r27, 0x00	; 0
     d88:	ea e3       	ldi	r30, 0x3A	; 58
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	80 81       	ld	r24, Z
     d8e:	48 2f       	mov	r20, r24
     d90:	8b 81       	ldd	r24, Y+3	; 0x03
     d92:	28 2f       	mov	r18, r24
     d94:	30 e0       	ldi	r19, 0x00	; 0
     d96:	81 e0       	ldi	r24, 0x01	; 1
     d98:	90 e0       	ldi	r25, 0x00	; 0
     d9a:	02 2e       	mov	r0, r18
     d9c:	02 c0       	rjmp	.+4      	; 0xda2 <DIO_u8SetPinDirection+0xbc>
     d9e:	88 0f       	add	r24, r24
     da0:	99 1f       	adc	r25, r25
     da2:	0a 94       	dec	r0
     da4:	e2 f7       	brpl	.-8      	; 0xd9e <DIO_u8SetPinDirection+0xb8>
     da6:	80 95       	com	r24
     da8:	84 23       	and	r24, r20
     daa:	8c 93       	st	X, r24
     dac:	bd c0       	rjmp	.+378    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinId);
     dae:	aa e3       	ldi	r26, 0x3A	; 58
     db0:	b0 e0       	ldi	r27, 0x00	; 0
     db2:	ea e3       	ldi	r30, 0x3A	; 58
     db4:	f0 e0       	ldi	r31, 0x00	; 0
     db6:	80 81       	ld	r24, Z
     db8:	48 2f       	mov	r20, r24
     dba:	8b 81       	ldd	r24, Y+3	; 0x03
     dbc:	28 2f       	mov	r18, r24
     dbe:	30 e0       	ldi	r19, 0x00	; 0
     dc0:	81 e0       	ldi	r24, 0x01	; 1
     dc2:	90 e0       	ldi	r25, 0x00	; 0
     dc4:	02 2e       	mov	r0, r18
     dc6:	02 c0       	rjmp	.+4      	; 0xdcc <DIO_u8SetPinDirection+0xe6>
     dc8:	88 0f       	add	r24, r24
     dca:	99 1f       	adc	r25, r25
     dcc:	0a 94       	dec	r0
     dce:	e2 f7       	brpl	.-8      	; 0xdc8 <DIO_u8SetPinDirection+0xe2>
     dd0:	84 2b       	or	r24, r20
     dd2:	8c 93       	st	X, r24
     dd4:	a9 c0       	rjmp	.+338    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinDirection)
     dd6:	8c 81       	ldd	r24, Y+4	; 0x04
     dd8:	28 2f       	mov	r18, r24
     dda:	30 e0       	ldi	r19, 0x00	; 0
     ddc:	3a 87       	std	Y+10, r19	; 0x0a
     dde:	29 87       	std	Y+9, r18	; 0x09
     de0:	89 85       	ldd	r24, Y+9	; 0x09
     de2:	9a 85       	ldd	r25, Y+10	; 0x0a
     de4:	00 97       	sbiw	r24, 0x00	; 0
     de6:	31 f0       	breq	.+12     	; 0xdf4 <DIO_u8SetPinDirection+0x10e>
     de8:	29 85       	ldd	r18, Y+9	; 0x09
     dea:	3a 85       	ldd	r19, Y+10	; 0x0a
     dec:	21 30       	cpi	r18, 0x01	; 1
     dee:	31 05       	cpc	r19, r1
     df0:	b1 f0       	breq	.+44     	; 0xe1e <DIO_u8SetPinDirection+0x138>
     df2:	9a c0       	rjmp	.+308    	; 0xf28 <DIO_u8SetPinDirection+0x242>
				{
				case DIO_u8_INPUT:
					CLR_BIT(DDRB_u8_REG,Copy_u8PinId);
     df4:	a7 e3       	ldi	r26, 0x37	; 55
     df6:	b0 e0       	ldi	r27, 0x00	; 0
     df8:	e7 e3       	ldi	r30, 0x37	; 55
     dfa:	f0 e0       	ldi	r31, 0x00	; 0
     dfc:	80 81       	ld	r24, Z
     dfe:	48 2f       	mov	r20, r24
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	28 2f       	mov	r18, r24
     e04:	30 e0       	ldi	r19, 0x00	; 0
     e06:	81 e0       	ldi	r24, 0x01	; 1
     e08:	90 e0       	ldi	r25, 0x00	; 0
     e0a:	02 2e       	mov	r0, r18
     e0c:	02 c0       	rjmp	.+4      	; 0xe12 <DIO_u8SetPinDirection+0x12c>
     e0e:	88 0f       	add	r24, r24
     e10:	99 1f       	adc	r25, r25
     e12:	0a 94       	dec	r0
     e14:	e2 f7       	brpl	.-8      	; 0xe0e <DIO_u8SetPinDirection+0x128>
     e16:	80 95       	com	r24
     e18:	84 23       	and	r24, r20
     e1a:	8c 93       	st	X, r24
     e1c:	85 c0       	rjmp	.+266    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					break;
				case DIO_u8_OUTPUT:
					SET_BIT(DDRB_u8_REG,Copy_u8PinId);
     e1e:	a7 e3       	ldi	r26, 0x37	; 55
     e20:	b0 e0       	ldi	r27, 0x00	; 0
     e22:	e7 e3       	ldi	r30, 0x37	; 55
     e24:	f0 e0       	ldi	r31, 0x00	; 0
     e26:	80 81       	ld	r24, Z
     e28:	48 2f       	mov	r20, r24
     e2a:	8b 81       	ldd	r24, Y+3	; 0x03
     e2c:	28 2f       	mov	r18, r24
     e2e:	30 e0       	ldi	r19, 0x00	; 0
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	02 2e       	mov	r0, r18
     e36:	02 c0       	rjmp	.+4      	; 0xe3c <DIO_u8SetPinDirection+0x156>
     e38:	88 0f       	add	r24, r24
     e3a:	99 1f       	adc	r25, r25
     e3c:	0a 94       	dec	r0
     e3e:	e2 f7       	brpl	.-8      	; 0xe38 <DIO_u8SetPinDirection+0x152>
     e40:	84 2b       	or	r24, r20
     e42:	8c 93       	st	X, r24
     e44:	71 c0       	rjmp	.+226    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					break;
				}
				break;
				case DIO_u8_PORTC:
					switch(Copy_u8PinDirection)
     e46:	8c 81       	ldd	r24, Y+4	; 0x04
     e48:	28 2f       	mov	r18, r24
     e4a:	30 e0       	ldi	r19, 0x00	; 0
     e4c:	38 87       	std	Y+8, r19	; 0x08
     e4e:	2f 83       	std	Y+7, r18	; 0x07
     e50:	8f 81       	ldd	r24, Y+7	; 0x07
     e52:	98 85       	ldd	r25, Y+8	; 0x08
     e54:	00 97       	sbiw	r24, 0x00	; 0
     e56:	31 f0       	breq	.+12     	; 0xe64 <DIO_u8SetPinDirection+0x17e>
     e58:	2f 81       	ldd	r18, Y+7	; 0x07
     e5a:	38 85       	ldd	r19, Y+8	; 0x08
     e5c:	21 30       	cpi	r18, 0x01	; 1
     e5e:	31 05       	cpc	r19, r1
     e60:	b1 f0       	breq	.+44     	; 0xe8e <DIO_u8SetPinDirection+0x1a8>
     e62:	62 c0       	rjmp	.+196    	; 0xf28 <DIO_u8SetPinDirection+0x242>
					{
					case DIO_u8_INPUT:
						CLR_BIT(DDRC_u8_REG,Copy_u8PinId);
     e64:	a4 e3       	ldi	r26, 0x34	; 52
     e66:	b0 e0       	ldi	r27, 0x00	; 0
     e68:	e4 e3       	ldi	r30, 0x34	; 52
     e6a:	f0 e0       	ldi	r31, 0x00	; 0
     e6c:	80 81       	ld	r24, Z
     e6e:	48 2f       	mov	r20, r24
     e70:	8b 81       	ldd	r24, Y+3	; 0x03
     e72:	28 2f       	mov	r18, r24
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	81 e0       	ldi	r24, 0x01	; 1
     e78:	90 e0       	ldi	r25, 0x00	; 0
     e7a:	02 2e       	mov	r0, r18
     e7c:	02 c0       	rjmp	.+4      	; 0xe82 <DIO_u8SetPinDirection+0x19c>
     e7e:	88 0f       	add	r24, r24
     e80:	99 1f       	adc	r25, r25
     e82:	0a 94       	dec	r0
     e84:	e2 f7       	brpl	.-8      	; 0xe7e <DIO_u8SetPinDirection+0x198>
     e86:	80 95       	com	r24
     e88:	84 23       	and	r24, r20
     e8a:	8c 93       	st	X, r24
     e8c:	4d c0       	rjmp	.+154    	; 0xf28 <DIO_u8SetPinDirection+0x242>
						break;
					case DIO_u8_OUTPUT:
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
     e8e:	a4 e3       	ldi	r26, 0x34	; 52
     e90:	b0 e0       	ldi	r27, 0x00	; 0
     e92:	e4 e3       	ldi	r30, 0x34	; 52
     e94:	f0 e0       	ldi	r31, 0x00	; 0
     e96:	80 81       	ld	r24, Z
     e98:	48 2f       	mov	r20, r24
     e9a:	8b 81       	ldd	r24, Y+3	; 0x03
     e9c:	28 2f       	mov	r18, r24
     e9e:	30 e0       	ldi	r19, 0x00	; 0
     ea0:	81 e0       	ldi	r24, 0x01	; 1
     ea2:	90 e0       	ldi	r25, 0x00	; 0
     ea4:	02 2e       	mov	r0, r18
     ea6:	02 c0       	rjmp	.+4      	; 0xeac <DIO_u8SetPinDirection+0x1c6>
     ea8:	88 0f       	add	r24, r24
     eaa:	99 1f       	adc	r25, r25
     eac:	0a 94       	dec	r0
     eae:	e2 f7       	brpl	.-8      	; 0xea8 <DIO_u8SetPinDirection+0x1c2>
     eb0:	84 2b       	or	r24, r20
     eb2:	8c 93       	st	X, r24
     eb4:	39 c0       	rjmp	.+114    	; 0xf28 <DIO_u8SetPinDirection+0x242>
						break;
					}
					break;
					case DIO_u8_PORTD:
						switch(Copy_u8PinDirection)
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	28 2f       	mov	r18, r24
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	3e 83       	std	Y+6, r19	; 0x06
     ebe:	2d 83       	std	Y+5, r18	; 0x05
     ec0:	8d 81       	ldd	r24, Y+5	; 0x05
     ec2:	9e 81       	ldd	r25, Y+6	; 0x06
     ec4:	00 97       	sbiw	r24, 0x00	; 0
     ec6:	31 f0       	breq	.+12     	; 0xed4 <DIO_u8SetPinDirection+0x1ee>
     ec8:	2d 81       	ldd	r18, Y+5	; 0x05
     eca:	3e 81       	ldd	r19, Y+6	; 0x06
     ecc:	21 30       	cpi	r18, 0x01	; 1
     ece:	31 05       	cpc	r19, r1
     ed0:	b1 f0       	breq	.+44     	; 0xefe <DIO_u8SetPinDirection+0x218>
     ed2:	2a c0       	rjmp	.+84     	; 0xf28 <DIO_u8SetPinDirection+0x242>
						{
						case DIO_u8_INPUT:
							CLR_BIT(DDRD_u8_REG,Copy_u8PinId);
     ed4:	a1 e3       	ldi	r26, 0x31	; 49
     ed6:	b0 e0       	ldi	r27, 0x00	; 0
     ed8:	e1 e3       	ldi	r30, 0x31	; 49
     eda:	f0 e0       	ldi	r31, 0x00	; 0
     edc:	80 81       	ld	r24, Z
     ede:	48 2f       	mov	r20, r24
     ee0:	8b 81       	ldd	r24, Y+3	; 0x03
     ee2:	28 2f       	mov	r18, r24
     ee4:	30 e0       	ldi	r19, 0x00	; 0
     ee6:	81 e0       	ldi	r24, 0x01	; 1
     ee8:	90 e0       	ldi	r25, 0x00	; 0
     eea:	02 2e       	mov	r0, r18
     eec:	02 c0       	rjmp	.+4      	; 0xef2 <DIO_u8SetPinDirection+0x20c>
     eee:	88 0f       	add	r24, r24
     ef0:	99 1f       	adc	r25, r25
     ef2:	0a 94       	dec	r0
     ef4:	e2 f7       	brpl	.-8      	; 0xeee <DIO_u8SetPinDirection+0x208>
     ef6:	80 95       	com	r24
     ef8:	84 23       	and	r24, r20
     efa:	8c 93       	st	X, r24
     efc:	15 c0       	rjmp	.+42     	; 0xf28 <DIO_u8SetPinDirection+0x242>
							break;
						case DIO_u8_OUTPUT:
							SET_BIT(DDRD_u8_REG,Copy_u8PinId);
     efe:	a1 e3       	ldi	r26, 0x31	; 49
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e1 e3       	ldi	r30, 0x31	; 49
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	48 2f       	mov	r20, r24
     f0a:	8b 81       	ldd	r24, Y+3	; 0x03
     f0c:	28 2f       	mov	r18, r24
     f0e:	30 e0       	ldi	r19, 0x00	; 0
     f10:	81 e0       	ldi	r24, 0x01	; 1
     f12:	90 e0       	ldi	r25, 0x00	; 0
     f14:	02 2e       	mov	r0, r18
     f16:	02 c0       	rjmp	.+4      	; 0xf1c <DIO_u8SetPinDirection+0x236>
     f18:	88 0f       	add	r24, r24
     f1a:	99 1f       	adc	r25, r25
     f1c:	0a 94       	dec	r0
     f1e:	e2 f7       	brpl	.-8      	; 0xf18 <DIO_u8SetPinDirection+0x232>
     f20:	84 2b       	or	r24, r20
     f22:	8c 93       	st	X, r24
     f24:	01 c0       	rjmp	.+2      	; 0xf28 <DIO_u8SetPinDirection+0x242>
						break;
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;
     f26:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
     f28:	89 81       	ldd	r24, Y+1	; 0x01
}
     f2a:	2e 96       	adiw	r28, 0x0e	; 14
     f2c:	0f b6       	in	r0, 0x3f	; 63
     f2e:	f8 94       	cli
     f30:	de bf       	out	0x3e, r29	; 62
     f32:	0f be       	out	0x3f, r0	; 63
     f34:	cd bf       	out	0x3d, r28	; 61
     f36:	cf 91       	pop	r28
     f38:	df 91       	pop	r29
     f3a:	08 95       	ret

00000f3c <DIO_u8SetPinValue>:

	u8 DIO_u8SetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue    )
	{
     f3c:	df 93       	push	r29
     f3e:	cf 93       	push	r28
     f40:	cd b7       	in	r28, 0x3d	; 61
     f42:	de b7       	in	r29, 0x3e	; 62
     f44:	2e 97       	sbiw	r28, 0x0e	; 14
     f46:	0f b6       	in	r0, 0x3f	; 63
     f48:	f8 94       	cli
     f4a:	de bf       	out	0x3e, r29	; 62
     f4c:	0f be       	out	0x3f, r0	; 63
     f4e:	cd bf       	out	0x3d, r28	; 61
     f50:	8a 83       	std	Y+2, r24	; 0x02
     f52:	6b 83       	std	Y+3, r22	; 0x03
     f54:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_LOW) || (Copy_u8PinValue == DIO_u8_HIGH)))
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	84 30       	cpi	r24, 0x04	; 4
     f5e:	08 f0       	brcs	.+2      	; 0xf62 <DIO_u8SetPinValue+0x26>
     f60:	0d c1       	rjmp	.+538    	; 0x117c <DIO_u8SetPinValue+0x240>
     f62:	8b 81       	ldd	r24, Y+3	; 0x03
     f64:	88 30       	cpi	r24, 0x08	; 8
     f66:	08 f0       	brcs	.+2      	; 0xf6a <DIO_u8SetPinValue+0x2e>
     f68:	09 c1       	rjmp	.+530    	; 0x117c <DIO_u8SetPinValue+0x240>
     f6a:	8c 81       	ldd	r24, Y+4	; 0x04
     f6c:	88 23       	and	r24, r24
     f6e:	21 f0       	breq	.+8      	; 0xf78 <DIO_u8SetPinValue+0x3c>
     f70:	8c 81       	ldd	r24, Y+4	; 0x04
     f72:	81 30       	cpi	r24, 0x01	; 1
     f74:	09 f0       	breq	.+2      	; 0xf78 <DIO_u8SetPinValue+0x3c>
     f76:	02 c1       	rjmp	.+516    	; 0x117c <DIO_u8SetPinValue+0x240>
		{
			switch(Copy_u8PortId)
     f78:	8a 81       	ldd	r24, Y+2	; 0x02
     f7a:	28 2f       	mov	r18, r24
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	3e 87       	std	Y+14, r19	; 0x0e
     f80:	2d 87       	std	Y+13, r18	; 0x0d
     f82:	8d 85       	ldd	r24, Y+13	; 0x0d
     f84:	9e 85       	ldd	r25, Y+14	; 0x0e
     f86:	81 30       	cpi	r24, 0x01	; 1
     f88:	91 05       	cpc	r25, r1
     f8a:	09 f4       	brne	.+2      	; 0xf8e <DIO_u8SetPinValue+0x52>
     f8c:	4f c0       	rjmp	.+158    	; 0x102c <DIO_u8SetPinValue+0xf0>
     f8e:	2d 85       	ldd	r18, Y+13	; 0x0d
     f90:	3e 85       	ldd	r19, Y+14	; 0x0e
     f92:	22 30       	cpi	r18, 0x02	; 2
     f94:	31 05       	cpc	r19, r1
     f96:	2c f4       	brge	.+10     	; 0xfa2 <DIO_u8SetPinValue+0x66>
     f98:	8d 85       	ldd	r24, Y+13	; 0x0d
     f9a:	9e 85       	ldd	r25, Y+14	; 0x0e
     f9c:	00 97       	sbiw	r24, 0x00	; 0
     f9e:	71 f0       	breq	.+28     	; 0xfbc <DIO_u8SetPinValue+0x80>
     fa0:	ee c0       	rjmp	.+476    	; 0x117e <DIO_u8SetPinValue+0x242>
     fa2:	2d 85       	ldd	r18, Y+13	; 0x0d
     fa4:	3e 85       	ldd	r19, Y+14	; 0x0e
     fa6:	22 30       	cpi	r18, 0x02	; 2
     fa8:	31 05       	cpc	r19, r1
     faa:	09 f4       	brne	.+2      	; 0xfae <DIO_u8SetPinValue+0x72>
     fac:	77 c0       	rjmp	.+238    	; 0x109c <DIO_u8SetPinValue+0x160>
     fae:	8d 85       	ldd	r24, Y+13	; 0x0d
     fb0:	9e 85       	ldd	r25, Y+14	; 0x0e
     fb2:	83 30       	cpi	r24, 0x03	; 3
     fb4:	91 05       	cpc	r25, r1
     fb6:	09 f4       	brne	.+2      	; 0xfba <DIO_u8SetPinValue+0x7e>
     fb8:	a9 c0       	rjmp	.+338    	; 0x110c <DIO_u8SetPinValue+0x1d0>
     fba:	e1 c0       	rjmp	.+450    	; 0x117e <DIO_u8SetPinValue+0x242>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
     fbc:	8c 81       	ldd	r24, Y+4	; 0x04
     fbe:	28 2f       	mov	r18, r24
     fc0:	30 e0       	ldi	r19, 0x00	; 0
     fc2:	3c 87       	std	Y+12, r19	; 0x0c
     fc4:	2b 87       	std	Y+11, r18	; 0x0b
     fc6:	8b 85       	ldd	r24, Y+11	; 0x0b
     fc8:	9c 85       	ldd	r25, Y+12	; 0x0c
     fca:	00 97       	sbiw	r24, 0x00	; 0
     fcc:	31 f0       	breq	.+12     	; 0xfda <DIO_u8SetPinValue+0x9e>
     fce:	2b 85       	ldd	r18, Y+11	; 0x0b
     fd0:	3c 85       	ldd	r19, Y+12	; 0x0c
     fd2:	21 30       	cpi	r18, 0x01	; 1
     fd4:	31 05       	cpc	r19, r1
     fd6:	b1 f0       	breq	.+44     	; 0x1004 <DIO_u8SetPinValue+0xc8>
     fd8:	d2 c0       	rjmp	.+420    	; 0x117e <DIO_u8SetPinValue+0x242>
				{
				case DIO_u8_LOW:
					CLR_BIT(PORTA_u8_REG,Copy_u8PinId);
     fda:	ab e3       	ldi	r26, 0x3B	; 59
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	eb e3       	ldi	r30, 0x3B	; 59
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8b 81       	ldd	r24, Y+3	; 0x03
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_u8SetPinValue+0xbc>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_u8SetPinValue+0xb8>
     ffc:	80 95       	com	r24
     ffe:	84 23       	and	r24, r20
    1000:	8c 93       	st	X, r24
    1002:	bd c0       	rjmp	.+378    	; 0x117e <DIO_u8SetPinValue+0x242>
					break;
				case DIO_u8_HIGH:
					SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    1004:	ab e3       	ldi	r26, 0x3B	; 59
    1006:	b0 e0       	ldi	r27, 0x00	; 0
    1008:	eb e3       	ldi	r30, 0x3B	; 59
    100a:	f0 e0       	ldi	r31, 0x00	; 0
    100c:	80 81       	ld	r24, Z
    100e:	48 2f       	mov	r20, r24
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	28 2f       	mov	r18, r24
    1014:	30 e0       	ldi	r19, 0x00	; 0
    1016:	81 e0       	ldi	r24, 0x01	; 1
    1018:	90 e0       	ldi	r25, 0x00	; 0
    101a:	02 2e       	mov	r0, r18
    101c:	02 c0       	rjmp	.+4      	; 0x1022 <DIO_u8SetPinValue+0xe6>
    101e:	88 0f       	add	r24, r24
    1020:	99 1f       	adc	r25, r25
    1022:	0a 94       	dec	r0
    1024:	e2 f7       	brpl	.-8      	; 0x101e <DIO_u8SetPinValue+0xe2>
    1026:	84 2b       	or	r24, r20
    1028:	8c 93       	st	X, r24
    102a:	a9 c0       	rjmp	.+338    	; 0x117e <DIO_u8SetPinValue+0x242>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PinValue)
    102c:	8c 81       	ldd	r24, Y+4	; 0x04
    102e:	28 2f       	mov	r18, r24
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	3a 87       	std	Y+10, r19	; 0x0a
    1034:	29 87       	std	Y+9, r18	; 0x09
    1036:	89 85       	ldd	r24, Y+9	; 0x09
    1038:	9a 85       	ldd	r25, Y+10	; 0x0a
    103a:	00 97       	sbiw	r24, 0x00	; 0
    103c:	31 f0       	breq	.+12     	; 0x104a <DIO_u8SetPinValue+0x10e>
    103e:	29 85       	ldd	r18, Y+9	; 0x09
    1040:	3a 85       	ldd	r19, Y+10	; 0x0a
    1042:	21 30       	cpi	r18, 0x01	; 1
    1044:	31 05       	cpc	r19, r1
    1046:	b1 f0       	breq	.+44     	; 0x1074 <DIO_u8SetPinValue+0x138>
    1048:	9a c0       	rjmp	.+308    	; 0x117e <DIO_u8SetPinValue+0x242>
					{
					case DIO_u8_LOW:
						CLR_BIT(PORTB_u8_REG,Copy_u8PinId);
    104a:	a8 e3       	ldi	r26, 0x38	; 56
    104c:	b0 e0       	ldi	r27, 0x00	; 0
    104e:	e8 e3       	ldi	r30, 0x38	; 56
    1050:	f0 e0       	ldi	r31, 0x00	; 0
    1052:	80 81       	ld	r24, Z
    1054:	48 2f       	mov	r20, r24
    1056:	8b 81       	ldd	r24, Y+3	; 0x03
    1058:	28 2f       	mov	r18, r24
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	81 e0       	ldi	r24, 0x01	; 1
    105e:	90 e0       	ldi	r25, 0x00	; 0
    1060:	02 2e       	mov	r0, r18
    1062:	02 c0       	rjmp	.+4      	; 0x1068 <DIO_u8SetPinValue+0x12c>
    1064:	88 0f       	add	r24, r24
    1066:	99 1f       	adc	r25, r25
    1068:	0a 94       	dec	r0
    106a:	e2 f7       	brpl	.-8      	; 0x1064 <DIO_u8SetPinValue+0x128>
    106c:	80 95       	com	r24
    106e:	84 23       	and	r24, r20
    1070:	8c 93       	st	X, r24
    1072:	85 c0       	rjmp	.+266    	; 0x117e <DIO_u8SetPinValue+0x242>
						break;
					case DIO_u8_HIGH:
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    1074:	a8 e3       	ldi	r26, 0x38	; 56
    1076:	b0 e0       	ldi	r27, 0x00	; 0
    1078:	e8 e3       	ldi	r30, 0x38	; 56
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	80 81       	ld	r24, Z
    107e:	48 2f       	mov	r20, r24
    1080:	8b 81       	ldd	r24, Y+3	; 0x03
    1082:	28 2f       	mov	r18, r24
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	81 e0       	ldi	r24, 0x01	; 1
    1088:	90 e0       	ldi	r25, 0x00	; 0
    108a:	02 2e       	mov	r0, r18
    108c:	02 c0       	rjmp	.+4      	; 0x1092 <DIO_u8SetPinValue+0x156>
    108e:	88 0f       	add	r24, r24
    1090:	99 1f       	adc	r25, r25
    1092:	0a 94       	dec	r0
    1094:	e2 f7       	brpl	.-8      	; 0x108e <DIO_u8SetPinValue+0x152>
    1096:	84 2b       	or	r24, r20
    1098:	8c 93       	st	X, r24
    109a:	71 c0       	rjmp	.+226    	; 0x117e <DIO_u8SetPinValue+0x242>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PinValue)
    109c:	8c 81       	ldd	r24, Y+4	; 0x04
    109e:	28 2f       	mov	r18, r24
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	38 87       	std	Y+8, r19	; 0x08
    10a4:	2f 83       	std	Y+7, r18	; 0x07
    10a6:	8f 81       	ldd	r24, Y+7	; 0x07
    10a8:	98 85       	ldd	r25, Y+8	; 0x08
    10aa:	00 97       	sbiw	r24, 0x00	; 0
    10ac:	31 f0       	breq	.+12     	; 0x10ba <DIO_u8SetPinValue+0x17e>
    10ae:	2f 81       	ldd	r18, Y+7	; 0x07
    10b0:	38 85       	ldd	r19, Y+8	; 0x08
    10b2:	21 30       	cpi	r18, 0x01	; 1
    10b4:	31 05       	cpc	r19, r1
    10b6:	b1 f0       	breq	.+44     	; 0x10e4 <DIO_u8SetPinValue+0x1a8>
    10b8:	62 c0       	rjmp	.+196    	; 0x117e <DIO_u8SetPinValue+0x242>
						{
						case DIO_u8_LOW:
							CLR_BIT(PORTC_u8_REG,Copy_u8PinId);
    10ba:	a5 e3       	ldi	r26, 0x35	; 53
    10bc:	b0 e0       	ldi	r27, 0x00	; 0
    10be:	e5 e3       	ldi	r30, 0x35	; 53
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
    10c4:	48 2f       	mov	r20, r24
    10c6:	8b 81       	ldd	r24, Y+3	; 0x03
    10c8:	28 2f       	mov	r18, r24
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	81 e0       	ldi	r24, 0x01	; 1
    10ce:	90 e0       	ldi	r25, 0x00	; 0
    10d0:	02 2e       	mov	r0, r18
    10d2:	02 c0       	rjmp	.+4      	; 0x10d8 <DIO_u8SetPinValue+0x19c>
    10d4:	88 0f       	add	r24, r24
    10d6:	99 1f       	adc	r25, r25
    10d8:	0a 94       	dec	r0
    10da:	e2 f7       	brpl	.-8      	; 0x10d4 <DIO_u8SetPinValue+0x198>
    10dc:	80 95       	com	r24
    10de:	84 23       	and	r24, r20
    10e0:	8c 93       	st	X, r24
    10e2:	4d c0       	rjmp	.+154    	; 0x117e <DIO_u8SetPinValue+0x242>
							break;
						case DIO_u8_HIGH:
							SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    10e4:	a5 e3       	ldi	r26, 0x35	; 53
    10e6:	b0 e0       	ldi	r27, 0x00	; 0
    10e8:	e5 e3       	ldi	r30, 0x35	; 53
    10ea:	f0 e0       	ldi	r31, 0x00	; 0
    10ec:	80 81       	ld	r24, Z
    10ee:	48 2f       	mov	r20, r24
    10f0:	8b 81       	ldd	r24, Y+3	; 0x03
    10f2:	28 2f       	mov	r18, r24
    10f4:	30 e0       	ldi	r19, 0x00	; 0
    10f6:	81 e0       	ldi	r24, 0x01	; 1
    10f8:	90 e0       	ldi	r25, 0x00	; 0
    10fa:	02 2e       	mov	r0, r18
    10fc:	02 c0       	rjmp	.+4      	; 0x1102 <DIO_u8SetPinValue+0x1c6>
    10fe:	88 0f       	add	r24, r24
    1100:	99 1f       	adc	r25, r25
    1102:	0a 94       	dec	r0
    1104:	e2 f7       	brpl	.-8      	; 0x10fe <DIO_u8SetPinValue+0x1c2>
    1106:	84 2b       	or	r24, r20
    1108:	8c 93       	st	X, r24
    110a:	39 c0       	rjmp	.+114    	; 0x117e <DIO_u8SetPinValue+0x242>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PinValue)
    110c:	8c 81       	ldd	r24, Y+4	; 0x04
    110e:	28 2f       	mov	r18, r24
    1110:	30 e0       	ldi	r19, 0x00	; 0
    1112:	3e 83       	std	Y+6, r19	; 0x06
    1114:	2d 83       	std	Y+5, r18	; 0x05
    1116:	8d 81       	ldd	r24, Y+5	; 0x05
    1118:	9e 81       	ldd	r25, Y+6	; 0x06
    111a:	00 97       	sbiw	r24, 0x00	; 0
    111c:	31 f0       	breq	.+12     	; 0x112a <DIO_u8SetPinValue+0x1ee>
    111e:	2d 81       	ldd	r18, Y+5	; 0x05
    1120:	3e 81       	ldd	r19, Y+6	; 0x06
    1122:	21 30       	cpi	r18, 0x01	; 1
    1124:	31 05       	cpc	r19, r1
    1126:	b1 f0       	breq	.+44     	; 0x1154 <DIO_u8SetPinValue+0x218>
    1128:	2a c0       	rjmp	.+84     	; 0x117e <DIO_u8SetPinValue+0x242>
							{
							case DIO_u8_LOW:
								CLR_BIT(PORTD_u8_REG,Copy_u8PinId);
    112a:	a2 e3       	ldi	r26, 0x32	; 50
    112c:	b0 e0       	ldi	r27, 0x00	; 0
    112e:	e2 e3       	ldi	r30, 0x32	; 50
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	80 81       	ld	r24, Z
    1134:	48 2f       	mov	r20, r24
    1136:	8b 81       	ldd	r24, Y+3	; 0x03
    1138:	28 2f       	mov	r18, r24
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	81 e0       	ldi	r24, 0x01	; 1
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	02 2e       	mov	r0, r18
    1142:	02 c0       	rjmp	.+4      	; 0x1148 <DIO_u8SetPinValue+0x20c>
    1144:	88 0f       	add	r24, r24
    1146:	99 1f       	adc	r25, r25
    1148:	0a 94       	dec	r0
    114a:	e2 f7       	brpl	.-8      	; 0x1144 <DIO_u8SetPinValue+0x208>
    114c:	80 95       	com	r24
    114e:	84 23       	and	r24, r20
    1150:	8c 93       	st	X, r24
    1152:	15 c0       	rjmp	.+42     	; 0x117e <DIO_u8SetPinValue+0x242>
								break;
							case DIO_u8_HIGH:
								SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    1154:	a2 e3       	ldi	r26, 0x32	; 50
    1156:	b0 e0       	ldi	r27, 0x00	; 0
    1158:	e2 e3       	ldi	r30, 0x32	; 50
    115a:	f0 e0       	ldi	r31, 0x00	; 0
    115c:	80 81       	ld	r24, Z
    115e:	48 2f       	mov	r20, r24
    1160:	8b 81       	ldd	r24, Y+3	; 0x03
    1162:	28 2f       	mov	r18, r24
    1164:	30 e0       	ldi	r19, 0x00	; 0
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	02 2e       	mov	r0, r18
    116c:	02 c0       	rjmp	.+4      	; 0x1172 <DIO_u8SetPinValue+0x236>
    116e:	88 0f       	add	r24, r24
    1170:	99 1f       	adc	r25, r25
    1172:	0a 94       	dec	r0
    1174:	e2 f7       	brpl	.-8      	; 0x116e <DIO_u8SetPinValue+0x232>
    1176:	84 2b       	or	r24, r20
    1178:	8c 93       	st	X, r24
    117a:	01 c0       	rjmp	.+2      	; 0x117e <DIO_u8SetPinValue+0x242>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    117c:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    117e:	89 81       	ldd	r24, Y+1	; 0x01

	}
    1180:	2e 96       	adiw	r28, 0x0e	; 14
    1182:	0f b6       	in	r0, 0x3f	; 63
    1184:	f8 94       	cli
    1186:	de bf       	out	0x3e, r29	; 62
    1188:	0f be       	out	0x3f, r0	; 63
    118a:	cd bf       	out	0x3d, r28	; 61
    118c:	cf 91       	pop	r28
    118e:	df 91       	pop	r29
    1190:	08 95       	ret

00001192 <DIO_u8GetPinValue>:

	u8 DIO_u8GetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 *Copy_pu8ReturnedPinValue)
	{
    1192:	df 93       	push	r29
    1194:	cf 93       	push	r28
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	27 97       	sbiw	r28, 0x07	; 7
    119c:	0f b6       	in	r0, 0x3f	; 63
    119e:	f8 94       	cli
    11a0:	de bf       	out	0x3e, r29	; 62
    11a2:	0f be       	out	0x3f, r0	; 63
    11a4:	cd bf       	out	0x3d, r28	; 61
    11a6:	8a 83       	std	Y+2, r24	; 0x02
    11a8:	6b 83       	std	Y+3, r22	; 0x03
    11aa:	5d 83       	std	Y+5, r21	; 0x05
    11ac:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    11ae:	81 e0       	ldi	r24, 0x01	; 1
    11b0:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    11b2:	8a 81       	ldd	r24, Y+2	; 0x02
    11b4:	84 30       	cpi	r24, 0x04	; 4
    11b6:	08 f0       	brcs	.+2      	; 0x11ba <DIO_u8GetPinValue+0x28>
    11b8:	9b c0       	rjmp	.+310    	; 0x12f0 <DIO_u8GetPinValue+0x15e>
    11ba:	8b 81       	ldd	r24, Y+3	; 0x03
    11bc:	88 30       	cpi	r24, 0x08	; 8
    11be:	08 f0       	brcs	.+2      	; 0x11c2 <DIO_u8GetPinValue+0x30>
    11c0:	97 c0       	rjmp	.+302    	; 0x12f0 <DIO_u8GetPinValue+0x15e>
    11c2:	8c 81       	ldd	r24, Y+4	; 0x04
    11c4:	9d 81       	ldd	r25, Y+5	; 0x05
    11c6:	00 97       	sbiw	r24, 0x00	; 0
    11c8:	09 f4       	brne	.+2      	; 0x11cc <DIO_u8GetPinValue+0x3a>
    11ca:	92 c0       	rjmp	.+292    	; 0x12f0 <DIO_u8GetPinValue+0x15e>
		{
			switch(Copy_u8PortId)
    11cc:	8a 81       	ldd	r24, Y+2	; 0x02
    11ce:	28 2f       	mov	r18, r24
    11d0:	30 e0       	ldi	r19, 0x00	; 0
    11d2:	3f 83       	std	Y+7, r19	; 0x07
    11d4:	2e 83       	std	Y+6, r18	; 0x06
    11d6:	4e 81       	ldd	r20, Y+6	; 0x06
    11d8:	5f 81       	ldd	r21, Y+7	; 0x07
    11da:	41 30       	cpi	r20, 0x01	; 1
    11dc:	51 05       	cpc	r21, r1
    11de:	a1 f1       	breq	.+104    	; 0x1248 <DIO_u8GetPinValue+0xb6>
    11e0:	8e 81       	ldd	r24, Y+6	; 0x06
    11e2:	9f 81       	ldd	r25, Y+7	; 0x07
    11e4:	82 30       	cpi	r24, 0x02	; 2
    11e6:	91 05       	cpc	r25, r1
    11e8:	34 f4       	brge	.+12     	; 0x11f6 <DIO_u8GetPinValue+0x64>
    11ea:	2e 81       	ldd	r18, Y+6	; 0x06
    11ec:	3f 81       	ldd	r19, Y+7	; 0x07
    11ee:	21 15       	cp	r18, r1
    11f0:	31 05       	cpc	r19, r1
    11f2:	71 f0       	breq	.+28     	; 0x1210 <DIO_u8GetPinValue+0x7e>
    11f4:	7e c0       	rjmp	.+252    	; 0x12f2 <DIO_u8GetPinValue+0x160>
    11f6:	4e 81       	ldd	r20, Y+6	; 0x06
    11f8:	5f 81       	ldd	r21, Y+7	; 0x07
    11fa:	42 30       	cpi	r20, 0x02	; 2
    11fc:	51 05       	cpc	r21, r1
    11fe:	09 f4       	brne	.+2      	; 0x1202 <DIO_u8GetPinValue+0x70>
    1200:	3f c0       	rjmp	.+126    	; 0x1280 <DIO_u8GetPinValue+0xee>
    1202:	8e 81       	ldd	r24, Y+6	; 0x06
    1204:	9f 81       	ldd	r25, Y+7	; 0x07
    1206:	83 30       	cpi	r24, 0x03	; 3
    1208:	91 05       	cpc	r25, r1
    120a:	09 f4       	brne	.+2      	; 0x120e <DIO_u8GetPinValue+0x7c>
    120c:	55 c0       	rjmp	.+170    	; 0x12b8 <DIO_u8GetPinValue+0x126>
    120e:	71 c0       	rjmp	.+226    	; 0x12f2 <DIO_u8GetPinValue+0x160>
			{
			case DIO_u8_PORTA:
				if(GET_BIT(PINA_u8_REG,Copy_u8PinId) == 0)
    1210:	e9 e3       	ldi	r30, 0x39	; 57
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	28 2f       	mov	r18, r24
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	8b 81       	ldd	r24, Y+3	; 0x03
    121c:	88 2f       	mov	r24, r24
    121e:	90 e0       	ldi	r25, 0x00	; 0
    1220:	a9 01       	movw	r20, r18
    1222:	02 c0       	rjmp	.+4      	; 0x1228 <DIO_u8GetPinValue+0x96>
    1224:	55 95       	asr	r21
    1226:	47 95       	ror	r20
    1228:	8a 95       	dec	r24
    122a:	e2 f7       	brpl	.-8      	; 0x1224 <DIO_u8GetPinValue+0x92>
    122c:	ca 01       	movw	r24, r20
    122e:	81 70       	andi	r24, 0x01	; 1
    1230:	90 70       	andi	r25, 0x00	; 0
    1232:	00 97       	sbiw	r24, 0x00	; 0
    1234:	21 f4       	brne	.+8      	; 0x123e <DIO_u8GetPinValue+0xac>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1236:	ec 81       	ldd	r30, Y+4	; 0x04
    1238:	fd 81       	ldd	r31, Y+5	; 0x05
    123a:	10 82       	st	Z, r1
    123c:	5a c0       	rjmp	.+180    	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    123e:	ec 81       	ldd	r30, Y+4	; 0x04
    1240:	fd 81       	ldd	r31, Y+5	; 0x05
    1242:	81 e0       	ldi	r24, 0x01	; 1
    1244:	80 83       	st	Z, r24
    1246:	55 c0       	rjmp	.+170    	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTB:
				if(GET_BIT(PINB_u8_REG,Copy_u8PinId) == 0)
    1248:	e6 e3       	ldi	r30, 0x36	; 54
    124a:	f0 e0       	ldi	r31, 0x00	; 0
    124c:	80 81       	ld	r24, Z
    124e:	28 2f       	mov	r18, r24
    1250:	30 e0       	ldi	r19, 0x00	; 0
    1252:	8b 81       	ldd	r24, Y+3	; 0x03
    1254:	88 2f       	mov	r24, r24
    1256:	90 e0       	ldi	r25, 0x00	; 0
    1258:	a9 01       	movw	r20, r18
    125a:	02 c0       	rjmp	.+4      	; 0x1260 <DIO_u8GetPinValue+0xce>
    125c:	55 95       	asr	r21
    125e:	47 95       	ror	r20
    1260:	8a 95       	dec	r24
    1262:	e2 f7       	brpl	.-8      	; 0x125c <DIO_u8GetPinValue+0xca>
    1264:	ca 01       	movw	r24, r20
    1266:	81 70       	andi	r24, 0x01	; 1
    1268:	90 70       	andi	r25, 0x00	; 0
    126a:	00 97       	sbiw	r24, 0x00	; 0
    126c:	21 f4       	brne	.+8      	; 0x1276 <DIO_u8GetPinValue+0xe4>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    126e:	ec 81       	ldd	r30, Y+4	; 0x04
    1270:	fd 81       	ldd	r31, Y+5	; 0x05
    1272:	10 82       	st	Z, r1
    1274:	3e c0       	rjmp	.+124    	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1276:	ec 81       	ldd	r30, Y+4	; 0x04
    1278:	fd 81       	ldd	r31, Y+5	; 0x05
    127a:	81 e0       	ldi	r24, 0x01	; 1
    127c:	80 83       	st	Z, r24
    127e:	39 c0       	rjmp	.+114    	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTC:
				if(GET_BIT(PINC_u8_REG,Copy_u8PinId) == 0)
    1280:	e3 e3       	ldi	r30, 0x33	; 51
    1282:	f0 e0       	ldi	r31, 0x00	; 0
    1284:	80 81       	ld	r24, Z
    1286:	28 2f       	mov	r18, r24
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	8b 81       	ldd	r24, Y+3	; 0x03
    128c:	88 2f       	mov	r24, r24
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	a9 01       	movw	r20, r18
    1292:	02 c0       	rjmp	.+4      	; 0x1298 <DIO_u8GetPinValue+0x106>
    1294:	55 95       	asr	r21
    1296:	47 95       	ror	r20
    1298:	8a 95       	dec	r24
    129a:	e2 f7       	brpl	.-8      	; 0x1294 <DIO_u8GetPinValue+0x102>
    129c:	ca 01       	movw	r24, r20
    129e:	81 70       	andi	r24, 0x01	; 1
    12a0:	90 70       	andi	r25, 0x00	; 0
    12a2:	00 97       	sbiw	r24, 0x00	; 0
    12a4:	21 f4       	brne	.+8      	; 0x12ae <DIO_u8GetPinValue+0x11c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12a6:	ec 81       	ldd	r30, Y+4	; 0x04
    12a8:	fd 81       	ldd	r31, Y+5	; 0x05
    12aa:	10 82       	st	Z, r1
    12ac:	22 c0       	rjmp	.+68     	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12ae:	ec 81       	ldd	r30, Y+4	; 0x04
    12b0:	fd 81       	ldd	r31, Y+5	; 0x05
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	80 83       	st	Z, r24
    12b6:	1d c0       	rjmp	.+58     	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTD:
				if(GET_BIT(PIND_u8_REG,Copy_u8PinId) == 0)
    12b8:	e0 e3       	ldi	r30, 0x30	; 48
    12ba:	f0 e0       	ldi	r31, 0x00	; 0
    12bc:	80 81       	ld	r24, Z
    12be:	28 2f       	mov	r18, r24
    12c0:	30 e0       	ldi	r19, 0x00	; 0
    12c2:	8b 81       	ldd	r24, Y+3	; 0x03
    12c4:	88 2f       	mov	r24, r24
    12c6:	90 e0       	ldi	r25, 0x00	; 0
    12c8:	a9 01       	movw	r20, r18
    12ca:	02 c0       	rjmp	.+4      	; 0x12d0 <DIO_u8GetPinValue+0x13e>
    12cc:	55 95       	asr	r21
    12ce:	47 95       	ror	r20
    12d0:	8a 95       	dec	r24
    12d2:	e2 f7       	brpl	.-8      	; 0x12cc <DIO_u8GetPinValue+0x13a>
    12d4:	ca 01       	movw	r24, r20
    12d6:	81 70       	andi	r24, 0x01	; 1
    12d8:	90 70       	andi	r25, 0x00	; 0
    12da:	00 97       	sbiw	r24, 0x00	; 0
    12dc:	21 f4       	brne	.+8      	; 0x12e6 <DIO_u8GetPinValue+0x154>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    12de:	ec 81       	ldd	r30, Y+4	; 0x04
    12e0:	fd 81       	ldd	r31, Y+5	; 0x05
    12e2:	10 82       	st	Z, r1
    12e4:	06 c0       	rjmp	.+12     	; 0x12f2 <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    12e6:	ec 81       	ldd	r30, Y+4	; 0x04
    12e8:	fd 81       	ldd	r31, Y+5	; 0x05
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	80 83       	st	Z, r24
    12ee:	01 c0       	rjmp	.+2      	; 0x12f2 <DIO_u8GetPinValue+0x160>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    12f0:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
	}
    12f4:	27 96       	adiw	r28, 0x07	; 7
    12f6:	0f b6       	in	r0, 0x3f	; 63
    12f8:	f8 94       	cli
    12fa:	de bf       	out	0x3e, r29	; 62
    12fc:	0f be       	out	0x3f, r0	; 63
    12fe:	cd bf       	out	0x3d, r28	; 61
    1300:	cf 91       	pop	r28
    1302:	df 91       	pop	r29
    1304:	08 95       	ret

00001306 <DIO_u8SetPortDirection>:

	u8 DIO_u8SetPortDirection	(u8 Copy_u8PortId , u8 Copy_u8PortDirection)
	{
    1306:	df 93       	push	r29
    1308:	cf 93       	push	r28
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	2d 97       	sbiw	r28, 0x0d	; 13
    1310:	0f b6       	in	r0, 0x3f	; 63
    1312:	f8 94       	cli
    1314:	de bf       	out	0x3e, r29	; 62
    1316:	0f be       	out	0x3f, r0	; 63
    1318:	cd bf       	out	0x3d, r28	; 61
    131a:	8a 83       	std	Y+2, r24	; 0x02
    131c:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    131e:	81 e0       	ldi	r24, 0x01	; 1
    1320:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT)))
    1322:	8a 81       	ldd	r24, Y+2	; 0x02
    1324:	84 30       	cpi	r24, 0x04	; 4
    1326:	08 f0       	brcs	.+2      	; 0x132a <DIO_u8SetPortDirection+0x24>
    1328:	87 c0       	rjmp	.+270    	; 0x1438 <DIO_u8SetPortDirection+0x132>
    132a:	8b 81       	ldd	r24, Y+3	; 0x03
    132c:	88 23       	and	r24, r24
    132e:	21 f0       	breq	.+8      	; 0x1338 <DIO_u8SetPortDirection+0x32>
    1330:	8b 81       	ldd	r24, Y+3	; 0x03
    1332:	81 30       	cpi	r24, 0x01	; 1
    1334:	09 f0       	breq	.+2      	; 0x1338 <DIO_u8SetPortDirection+0x32>
    1336:	80 c0       	rjmp	.+256    	; 0x1438 <DIO_u8SetPortDirection+0x132>
		{
			switch(Copy_u8PortId)
    1338:	8a 81       	ldd	r24, Y+2	; 0x02
    133a:	28 2f       	mov	r18, r24
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	3d 87       	std	Y+13, r19	; 0x0d
    1340:	2c 87       	std	Y+12, r18	; 0x0c
    1342:	8c 85       	ldd	r24, Y+12	; 0x0c
    1344:	9d 85       	ldd	r25, Y+13	; 0x0d
    1346:	81 30       	cpi	r24, 0x01	; 1
    1348:	91 05       	cpc	r25, r1
    134a:	71 f1       	breq	.+92     	; 0x13a8 <DIO_u8SetPortDirection+0xa2>
    134c:	2c 85       	ldd	r18, Y+12	; 0x0c
    134e:	3d 85       	ldd	r19, Y+13	; 0x0d
    1350:	22 30       	cpi	r18, 0x02	; 2
    1352:	31 05       	cpc	r19, r1
    1354:	2c f4       	brge	.+10     	; 0x1360 <DIO_u8SetPortDirection+0x5a>
    1356:	8c 85       	ldd	r24, Y+12	; 0x0c
    1358:	9d 85       	ldd	r25, Y+13	; 0x0d
    135a:	00 97       	sbiw	r24, 0x00	; 0
    135c:	69 f0       	breq	.+26     	; 0x1378 <DIO_u8SetPortDirection+0x72>
    135e:	6d c0       	rjmp	.+218    	; 0x143a <DIO_u8SetPortDirection+0x134>
    1360:	2c 85       	ldd	r18, Y+12	; 0x0c
    1362:	3d 85       	ldd	r19, Y+13	; 0x0d
    1364:	22 30       	cpi	r18, 0x02	; 2
    1366:	31 05       	cpc	r19, r1
    1368:	b9 f1       	breq	.+110    	; 0x13d8 <DIO_u8SetPortDirection+0xd2>
    136a:	8c 85       	ldd	r24, Y+12	; 0x0c
    136c:	9d 85       	ldd	r25, Y+13	; 0x0d
    136e:	83 30       	cpi	r24, 0x03	; 3
    1370:	91 05       	cpc	r25, r1
    1372:	09 f4       	brne	.+2      	; 0x1376 <DIO_u8SetPortDirection+0x70>
    1374:	49 c0       	rjmp	.+146    	; 0x1408 <DIO_u8SetPortDirection+0x102>
    1376:	61 c0       	rjmp	.+194    	; 0x143a <DIO_u8SetPortDirection+0x134>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1378:	8b 81       	ldd	r24, Y+3	; 0x03
    137a:	28 2f       	mov	r18, r24
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	3b 87       	std	Y+11, r19	; 0x0b
    1380:	2a 87       	std	Y+10, r18	; 0x0a
    1382:	8a 85       	ldd	r24, Y+10	; 0x0a
    1384:	9b 85       	ldd	r25, Y+11	; 0x0b
    1386:	00 97       	sbiw	r24, 0x00	; 0
    1388:	31 f0       	breq	.+12     	; 0x1396 <DIO_u8SetPortDirection+0x90>
    138a:	2a 85       	ldd	r18, Y+10	; 0x0a
    138c:	3b 85       	ldd	r19, Y+11	; 0x0b
    138e:	21 30       	cpi	r18, 0x01	; 1
    1390:	31 05       	cpc	r19, r1
    1392:	29 f0       	breq	.+10     	; 0x139e <DIO_u8SetPortDirection+0x98>
    1394:	52 c0       	rjmp	.+164    	; 0x143a <DIO_u8SetPortDirection+0x134>
				{
				case DIO_u8_INPUT:
					DDRA_u8_REG = 0x00;
    1396:	ea e3       	ldi	r30, 0x3A	; 58
    1398:	f0 e0       	ldi	r31, 0x00	; 0
    139a:	10 82       	st	Z, r1
    139c:	4e c0       	rjmp	.+156    	; 0x143a <DIO_u8SetPortDirection+0x134>
					break;
				case DIO_u8_OUTPUT:
					DDRA_u8_REG = 0xFF;
    139e:	ea e3       	ldi	r30, 0x3A	; 58
    13a0:	f0 e0       	ldi	r31, 0x00	; 0
    13a2:	8f ef       	ldi	r24, 0xFF	; 255
    13a4:	80 83       	st	Z, r24
    13a6:	49 c0       	rjmp	.+146    	; 0x143a <DIO_u8SetPortDirection+0x134>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PortDirection)
    13a8:	8b 81       	ldd	r24, Y+3	; 0x03
    13aa:	28 2f       	mov	r18, r24
    13ac:	30 e0       	ldi	r19, 0x00	; 0
    13ae:	39 87       	std	Y+9, r19	; 0x09
    13b0:	28 87       	std	Y+8, r18	; 0x08
    13b2:	88 85       	ldd	r24, Y+8	; 0x08
    13b4:	99 85       	ldd	r25, Y+9	; 0x09
    13b6:	00 97       	sbiw	r24, 0x00	; 0
    13b8:	31 f0       	breq	.+12     	; 0x13c6 <DIO_u8SetPortDirection+0xc0>
    13ba:	28 85       	ldd	r18, Y+8	; 0x08
    13bc:	39 85       	ldd	r19, Y+9	; 0x09
    13be:	21 30       	cpi	r18, 0x01	; 1
    13c0:	31 05       	cpc	r19, r1
    13c2:	29 f0       	breq	.+10     	; 0x13ce <DIO_u8SetPortDirection+0xc8>
    13c4:	3a c0       	rjmp	.+116    	; 0x143a <DIO_u8SetPortDirection+0x134>
					{
					case DIO_u8_INPUT:
						DDRB_u8_REG = 0x00;
    13c6:	e7 e3       	ldi	r30, 0x37	; 55
    13c8:	f0 e0       	ldi	r31, 0x00	; 0
    13ca:	10 82       	st	Z, r1
    13cc:	36 c0       	rjmp	.+108    	; 0x143a <DIO_u8SetPortDirection+0x134>
						break;
					case DIO_u8_OUTPUT:
						DDRB_u8_REG = 0xFF;
    13ce:	e7 e3       	ldi	r30, 0x37	; 55
    13d0:	f0 e0       	ldi	r31, 0x00	; 0
    13d2:	8f ef       	ldi	r24, 0xFF	; 255
    13d4:	80 83       	st	Z, r24
    13d6:	31 c0       	rjmp	.+98     	; 0x143a <DIO_u8SetPortDirection+0x134>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PortDirection)
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	28 2f       	mov	r18, r24
    13dc:	30 e0       	ldi	r19, 0x00	; 0
    13de:	3f 83       	std	Y+7, r19	; 0x07
    13e0:	2e 83       	std	Y+6, r18	; 0x06
    13e2:	8e 81       	ldd	r24, Y+6	; 0x06
    13e4:	9f 81       	ldd	r25, Y+7	; 0x07
    13e6:	00 97       	sbiw	r24, 0x00	; 0
    13e8:	31 f0       	breq	.+12     	; 0x13f6 <DIO_u8SetPortDirection+0xf0>
    13ea:	2e 81       	ldd	r18, Y+6	; 0x06
    13ec:	3f 81       	ldd	r19, Y+7	; 0x07
    13ee:	21 30       	cpi	r18, 0x01	; 1
    13f0:	31 05       	cpc	r19, r1
    13f2:	29 f0       	breq	.+10     	; 0x13fe <DIO_u8SetPortDirection+0xf8>
    13f4:	22 c0       	rjmp	.+68     	; 0x143a <DIO_u8SetPortDirection+0x134>
						{
						case DIO_u8_INPUT:
							DDRC_u8_REG = 0x00;
    13f6:	e4 e3       	ldi	r30, 0x34	; 52
    13f8:	f0 e0       	ldi	r31, 0x00	; 0
    13fa:	10 82       	st	Z, r1
    13fc:	1e c0       	rjmp	.+60     	; 0x143a <DIO_u8SetPortDirection+0x134>
							break;
						case DIO_u8_OUTPUT:
							DDRC_u8_REG = 0xFF;
    13fe:	e4 e3       	ldi	r30, 0x34	; 52
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	8f ef       	ldi	r24, 0xFF	; 255
    1404:	80 83       	st	Z, r24
    1406:	19 c0       	rjmp	.+50     	; 0x143a <DIO_u8SetPortDirection+0x134>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PortDirection)
    1408:	8b 81       	ldd	r24, Y+3	; 0x03
    140a:	28 2f       	mov	r18, r24
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	3d 83       	std	Y+5, r19	; 0x05
    1410:	2c 83       	std	Y+4, r18	; 0x04
    1412:	8c 81       	ldd	r24, Y+4	; 0x04
    1414:	9d 81       	ldd	r25, Y+5	; 0x05
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	31 f0       	breq	.+12     	; 0x1426 <DIO_u8SetPortDirection+0x120>
    141a:	2c 81       	ldd	r18, Y+4	; 0x04
    141c:	3d 81       	ldd	r19, Y+5	; 0x05
    141e:	21 30       	cpi	r18, 0x01	; 1
    1420:	31 05       	cpc	r19, r1
    1422:	29 f0       	breq	.+10     	; 0x142e <DIO_u8SetPortDirection+0x128>
    1424:	0a c0       	rjmp	.+20     	; 0x143a <DIO_u8SetPortDirection+0x134>
							{
							case DIO_u8_INPUT:
								DDRD_u8_REG = 0x00;
    1426:	e1 e3       	ldi	r30, 0x31	; 49
    1428:	f0 e0       	ldi	r31, 0x00	; 0
    142a:	10 82       	st	Z, r1
    142c:	06 c0       	rjmp	.+12     	; 0x143a <DIO_u8SetPortDirection+0x134>
								break;
							case DIO_u8_OUTPUT:
								DDRD_u8_REG = 0xFF;
    142e:	e1 e3       	ldi	r30, 0x31	; 49
    1430:	f0 e0       	ldi	r31, 0x00	; 0
    1432:	8f ef       	ldi	r24, 0xFF	; 255
    1434:	80 83       	st	Z, r24
    1436:	01 c0       	rjmp	.+2      	; 0x143a <DIO_u8SetPortDirection+0x134>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1438:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    143a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    143c:	2d 96       	adiw	r28, 0x0d	; 13
    143e:	0f b6       	in	r0, 0x3f	; 63
    1440:	f8 94       	cli
    1442:	de bf       	out	0x3e, r29	; 62
    1444:	0f be       	out	0x3f, r0	; 63
    1446:	cd bf       	out	0x3d, r28	; 61
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	08 95       	ret

0000144e <DIO_u8SetPortValue>:

	u8 DIO_u8SetPortValue		(u8 Copy_u8PortId , u8 Copy_u8PortValue     ) 
	{
    144e:	df 93       	push	r29
    1450:	cf 93       	push	r28
    1452:	00 d0       	rcall	.+0      	; 0x1454 <DIO_u8SetPortValue+0x6>
    1454:	00 d0       	rcall	.+0      	; 0x1456 <DIO_u8SetPortValue+0x8>
    1456:	0f 92       	push	r0
    1458:	cd b7       	in	r28, 0x3d	; 61
    145a:	de b7       	in	r29, 0x3e	; 62
    145c:	8a 83       	std	Y+2, r24	; 0x02
    145e:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1460:	81 e0       	ldi	r24, 0x01	; 1
    1462:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    1464:	8a 81       	ldd	r24, Y+2	; 0x02
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	3d 83       	std	Y+5, r19	; 0x05
    146c:	2c 83       	std	Y+4, r18	; 0x04
    146e:	8c 81       	ldd	r24, Y+4	; 0x04
    1470:	9d 81       	ldd	r25, Y+5	; 0x05
    1472:	81 30       	cpi	r24, 0x01	; 1
    1474:	91 05       	cpc	r25, r1
    1476:	d1 f0       	breq	.+52     	; 0x14ac <DIO_u8SetPortValue+0x5e>
    1478:	2c 81       	ldd	r18, Y+4	; 0x04
    147a:	3d 81       	ldd	r19, Y+5	; 0x05
    147c:	22 30       	cpi	r18, 0x02	; 2
    147e:	31 05       	cpc	r19, r1
    1480:	2c f4       	brge	.+10     	; 0x148c <DIO_u8SetPortValue+0x3e>
    1482:	8c 81       	ldd	r24, Y+4	; 0x04
    1484:	9d 81       	ldd	r25, Y+5	; 0x05
    1486:	00 97       	sbiw	r24, 0x00	; 0
    1488:	61 f0       	breq	.+24     	; 0x14a2 <DIO_u8SetPortValue+0x54>
    148a:	1f c0       	rjmp	.+62     	; 0x14ca <DIO_u8SetPortValue+0x7c>
    148c:	2c 81       	ldd	r18, Y+4	; 0x04
    148e:	3d 81       	ldd	r19, Y+5	; 0x05
    1490:	22 30       	cpi	r18, 0x02	; 2
    1492:	31 05       	cpc	r19, r1
    1494:	81 f0       	breq	.+32     	; 0x14b6 <DIO_u8SetPortValue+0x68>
    1496:	8c 81       	ldd	r24, Y+4	; 0x04
    1498:	9d 81       	ldd	r25, Y+5	; 0x05
    149a:	83 30       	cpi	r24, 0x03	; 3
    149c:	91 05       	cpc	r25, r1
    149e:	81 f0       	breq	.+32     	; 0x14c0 <DIO_u8SetPortValue+0x72>
    14a0:	14 c0       	rjmp	.+40     	; 0x14ca <DIO_u8SetPortValue+0x7c>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG = Copy_u8PortValue;
    14a2:	eb e3       	ldi	r30, 0x3B	; 59
    14a4:	f0 e0       	ldi	r31, 0x00	; 0
    14a6:	8b 81       	ldd	r24, Y+3	; 0x03
    14a8:	80 83       	st	Z, r24
    14aa:	10 c0       	rjmp	.+32     	; 0x14cc <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG = Copy_u8PortValue;
    14ac:	e8 e3       	ldi	r30, 0x38	; 56
    14ae:	f0 e0       	ldi	r31, 0x00	; 0
    14b0:	8b 81       	ldd	r24, Y+3	; 0x03
    14b2:	80 83       	st	Z, r24
    14b4:	0b c0       	rjmp	.+22     	; 0x14cc <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG = Copy_u8PortValue;
    14b6:	e5 e3       	ldi	r30, 0x35	; 53
    14b8:	f0 e0       	ldi	r31, 0x00	; 0
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	80 83       	st	Z, r24
    14be:	06 c0       	rjmp	.+12     	; 0x14cc <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTD:
			PORTD_u8_REG = Copy_u8PortValue;
    14c0:	e2 e3       	ldi	r30, 0x32	; 50
    14c2:	f0 e0       	ldi	r31, 0x00	; 0
    14c4:	8b 81       	ldd	r24, Y+3	; 0x03
    14c6:	80 83       	st	Z, r24
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <DIO_u8SetPortValue+0x7e>
			break;

		default:
			Local_u8ErrorStatus = STD_TYPES_NOK;
    14ca:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return Local_u8ErrorStatus;
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
	}
    14ce:	0f 90       	pop	r0
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
    14d4:	0f 90       	pop	r0
    14d6:	0f 90       	pop	r0
    14d8:	cf 91       	pop	r28
    14da:	df 91       	pop	r29
    14dc:	08 95       	ret

000014de <DIO_u8GetPortValue>:

	u8 DIO_u8GetPortValue		(u8 Copy_u8PortId , u8 *Copy_pu8ReturnedPortValue)
	{
    14de:	df 93       	push	r29
    14e0:	cf 93       	push	r28
    14e2:	00 d0       	rcall	.+0      	; 0x14e4 <DIO_u8GetPortValue+0x6>
    14e4:	00 d0       	rcall	.+0      	; 0x14e6 <DIO_u8GetPortValue+0x8>
    14e6:	00 d0       	rcall	.+0      	; 0x14e8 <DIO_u8GetPortValue+0xa>
    14e8:	cd b7       	in	r28, 0x3d	; 61
    14ea:	de b7       	in	r29, 0x3e	; 62
    14ec:	8a 83       	std	Y+2, r24	; 0x02
    14ee:	7c 83       	std	Y+4, r23	; 0x04
    14f0:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    14f2:	81 e0       	ldi	r24, 0x01	; 1
    14f4:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pu8ReturnedPortValue != NULL)
    14f6:	8b 81       	ldd	r24, Y+3	; 0x03
    14f8:	9c 81       	ldd	r25, Y+4	; 0x04
    14fa:	00 97       	sbiw	r24, 0x00	; 0
    14fc:	e9 f1       	breq	.+122    	; 0x1578 <DIO_u8GetPortValue+0x9a>
		{
			switch(Copy_u8PortId)
    14fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1500:	28 2f       	mov	r18, r24
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	3e 83       	std	Y+6, r19	; 0x06
    1506:	2d 83       	std	Y+5, r18	; 0x05
    1508:	8d 81       	ldd	r24, Y+5	; 0x05
    150a:	9e 81       	ldd	r25, Y+6	; 0x06
    150c:	81 30       	cpi	r24, 0x01	; 1
    150e:	91 05       	cpc	r25, r1
    1510:	e1 f0       	breq	.+56     	; 0x154a <DIO_u8GetPortValue+0x6c>
    1512:	2d 81       	ldd	r18, Y+5	; 0x05
    1514:	3e 81       	ldd	r19, Y+6	; 0x06
    1516:	22 30       	cpi	r18, 0x02	; 2
    1518:	31 05       	cpc	r19, r1
    151a:	2c f4       	brge	.+10     	; 0x1526 <DIO_u8GetPortValue+0x48>
    151c:	8d 81       	ldd	r24, Y+5	; 0x05
    151e:	9e 81       	ldd	r25, Y+6	; 0x06
    1520:	00 97       	sbiw	r24, 0x00	; 0
    1522:	61 f0       	breq	.+24     	; 0x153c <DIO_u8GetPortValue+0x5e>
    1524:	27 c0       	rjmp	.+78     	; 0x1574 <DIO_u8GetPortValue+0x96>
    1526:	2d 81       	ldd	r18, Y+5	; 0x05
    1528:	3e 81       	ldd	r19, Y+6	; 0x06
    152a:	22 30       	cpi	r18, 0x02	; 2
    152c:	31 05       	cpc	r19, r1
    152e:	a1 f0       	breq	.+40     	; 0x1558 <DIO_u8GetPortValue+0x7a>
    1530:	8d 81       	ldd	r24, Y+5	; 0x05
    1532:	9e 81       	ldd	r25, Y+6	; 0x06
    1534:	83 30       	cpi	r24, 0x03	; 3
    1536:	91 05       	cpc	r25, r1
    1538:	b1 f0       	breq	.+44     	; 0x1566 <DIO_u8GetPortValue+0x88>
    153a:	1c c0       	rjmp	.+56     	; 0x1574 <DIO_u8GetPortValue+0x96>
			{
			case DIO_u8_PORTA:
				*Copy_pu8ReturnedPortValue = PINA_u8_REG;
    153c:	e9 e3       	ldi	r30, 0x39	; 57
    153e:	f0 e0       	ldi	r31, 0x00	; 0
    1540:	80 81       	ld	r24, Z
    1542:	eb 81       	ldd	r30, Y+3	; 0x03
    1544:	fc 81       	ldd	r31, Y+4	; 0x04
    1546:	80 83       	st	Z, r24
    1548:	18 c0       	rjmp	.+48     	; 0x157a <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTB:
				*Copy_pu8ReturnedPortValue = PINB_u8_REG;
    154a:	e6 e3       	ldi	r30, 0x36	; 54
    154c:	f0 e0       	ldi	r31, 0x00	; 0
    154e:	80 81       	ld	r24, Z
    1550:	eb 81       	ldd	r30, Y+3	; 0x03
    1552:	fc 81       	ldd	r31, Y+4	; 0x04
    1554:	80 83       	st	Z, r24
    1556:	11 c0       	rjmp	.+34     	; 0x157a <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTC:
				*Copy_pu8ReturnedPortValue = PINC_u8_REG;
    1558:	e3 e3       	ldi	r30, 0x33	; 51
    155a:	f0 e0       	ldi	r31, 0x00	; 0
    155c:	80 81       	ld	r24, Z
    155e:	eb 81       	ldd	r30, Y+3	; 0x03
    1560:	fc 81       	ldd	r31, Y+4	; 0x04
    1562:	80 83       	st	Z, r24
    1564:	0a c0       	rjmp	.+20     	; 0x157a <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTD:
				*Copy_pu8ReturnedPortValue = PIND_u8_REG;
    1566:	e0 e3       	ldi	r30, 0x30	; 48
    1568:	f0 e0       	ldi	r31, 0x00	; 0
    156a:	80 81       	ld	r24, Z
    156c:	eb 81       	ldd	r30, Y+3	; 0x03
    156e:	fc 81       	ldd	r31, Y+4	; 0x04
    1570:	80 83       	st	Z, r24
    1572:	03 c0       	rjmp	.+6      	; 0x157a <DIO_u8GetPortValue+0x9c>
				break;

			default:
				Local_u8ErrorStatus = STD_TYPES_NOK;
    1574:	19 82       	std	Y+1, r1	; 0x01
    1576:	01 c0       	rjmp	.+2      	; 0x157a <DIO_u8GetPortValue+0x9c>
				break;
			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1578:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8ErrorStatus ;
    157a:	89 81       	ldd	r24, Y+1	; 0x01
	}
    157c:	26 96       	adiw	r28, 0x06	; 6
    157e:	0f b6       	in	r0, 0x3f	; 63
    1580:	f8 94       	cli
    1582:	de bf       	out	0x3e, r29	; 62
    1584:	0f be       	out	0x3f, r0	; 63
    1586:	cd bf       	out	0x3d, r28	; 61
    1588:	cf 91       	pop	r28
    158a:	df 91       	pop	r29
    158c:	08 95       	ret

0000158e <KPD_u8GetKey>:

 u8 KPD_Au8Key[4][4] =KPD_Au8KEY_VALUE;
// rows output
//cols input == pullup
u8 KPD_u8GetKey(u8 *Copy_pu8ReturnedKey)
{
    158e:	df 93       	push	r29
    1590:	cf 93       	push	r28
    1592:	cd b7       	in	r28, 0x3d	; 61
    1594:	de b7       	in	r29, 0x3e	; 62
    1596:	65 97       	sbiw	r28, 0x15	; 21
    1598:	0f b6       	in	r0, 0x3f	; 63
    159a:	f8 94       	cli
    159c:	de bf       	out	0x3e, r29	; 62
    159e:	0f be       	out	0x3f, r0	; 63
    15a0:	cd bf       	out	0x3d, r28	; 61
    15a2:	9d 8b       	std	Y+21, r25	; 0x15
    15a4:	8c 8b       	std	Y+20, r24	; 0x14
  u8 Local_ErrorStatus = STD_TYPES_OK;
    15a6:	81 e0       	ldi	r24, 0x01	; 1
    15a8:	8a 8b       	std	Y+18, r24	; 0x12
  u8 Local_u8RowsCounter,Local_u8ColCounter,Local_u8ReturnedKey,Local_u8Flag=0;
    15aa:	1f 86       	std	Y+15, r1	; 0x0f
  if (Copy_pu8ReturnedKey != NULL)
    15ac:	8c 89       	ldd	r24, Y+20	; 0x14
    15ae:	9d 89       	ldd	r25, Y+21	; 0x15
    15b0:	00 97       	sbiw	r24, 0x00	; 0
    15b2:	09 f4       	brne	.+2      	; 0x15b6 <KPD_u8GetKey+0x28>
    15b4:	e1 c0       	rjmp	.+450    	; 0x1778 <KPD_u8GetKey+0x1ea>
  {
	  *Copy_pu8ReturnedKey=0xFF;
    15b6:	ec 89       	ldd	r30, Y+20	; 0x14
    15b8:	fd 89       	ldd	r31, Y+21	; 0x15
    15ba:	8f ef       	ldi	r24, 0xFF	; 255
    15bc:	80 83       	st	Z, r24
	  for(Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
    15be:	19 8a       	std	Y+17, r1	; 0x11
    15c0:	d6 c0       	rjmp	.+428    	; 0x176e <KPD_u8GetKey+0x1e0>
	  {
     //activate rows
	  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowPins[Local_u8RowsCounter],DIO_u8_LOW);
    15c2:	89 89       	ldd	r24, Y+17	; 0x11
    15c4:	88 2f       	mov	r24, r24
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	fc 01       	movw	r30, r24
    15ca:	e7 56       	subi	r30, 0x67	; 103
    15cc:	ff 4f       	sbci	r31, 0xFF	; 255
    15ce:	90 81       	ld	r25, Z
    15d0:	82 e0       	ldi	r24, 0x02	; 2
    15d2:	69 2f       	mov	r22, r25
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	 //read 4 cols
	  for(Local_u8ColCounter=0;Local_u8ColCounter<=3;Local_u8ColCounter++)
    15da:	18 8a       	std	Y+16, r1	; 0x10
    15dc:	b2 c0       	rjmp	.+356    	; 0x1742 <KPD_u8GetKey+0x1b4>
	  {
		  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColPins[Local_u8ColCounter],&Local_u8ReturnedKey);
    15de:	88 89       	ldd	r24, Y+16	; 0x10
    15e0:	88 2f       	mov	r24, r24
    15e2:	90 e0       	ldi	r25, 0x00	; 0
    15e4:	fc 01       	movw	r30, r24
    15e6:	e3 56       	subi	r30, 0x63	; 99
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	90 81       	ld	r25, Z
    15ec:	9e 01       	movw	r18, r28
    15ee:	2d 5e       	subi	r18, 0xED	; 237
    15f0:	3f 4f       	sbci	r19, 0xFF	; 255
    15f2:	82 e0       	ldi	r24, 0x02	; 2
    15f4:	69 2f       	mov	r22, r25
    15f6:	a9 01       	movw	r20, r18
    15f8:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
		  if(Local_u8ReturnedKey==DIO_u8_LOW)
    15fc:	8b 89       	ldd	r24, Y+19	; 0x13
    15fe:	88 23       	and	r24, r24
    1600:	09 f0       	breq	.+2      	; 0x1604 <KPD_u8GetKey+0x76>
    1602:	9c c0       	rjmp	.+312    	; 0x173c <KPD_u8GetKey+0x1ae>
    1604:	80 e0       	ldi	r24, 0x00	; 0
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	a0 ea       	ldi	r26, 0xA0	; 160
    160a:	b1 e4       	ldi	r27, 0x41	; 65
    160c:	8b 87       	std	Y+11, r24	; 0x0b
    160e:	9c 87       	std	Y+12, r25	; 0x0c
    1610:	ad 87       	std	Y+13, r26	; 0x0d
    1612:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1614:	6b 85       	ldd	r22, Y+11	; 0x0b
    1616:	7c 85       	ldd	r23, Y+12	; 0x0c
    1618:	8d 85       	ldd	r24, Y+13	; 0x0d
    161a:	9e 85       	ldd	r25, Y+14	; 0x0e
    161c:	20 e0       	ldi	r18, 0x00	; 0
    161e:	30 e0       	ldi	r19, 0x00	; 0
    1620:	4a ef       	ldi	r20, 0xFA	; 250
    1622:	54 e4       	ldi	r21, 0x44	; 68
    1624:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1628:	dc 01       	movw	r26, r24
    162a:	cb 01       	movw	r24, r22
    162c:	8f 83       	std	Y+7, r24	; 0x07
    162e:	98 87       	std	Y+8, r25	; 0x08
    1630:	a9 87       	std	Y+9, r26	; 0x09
    1632:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1634:	6f 81       	ldd	r22, Y+7	; 0x07
    1636:	78 85       	ldd	r23, Y+8	; 0x08
    1638:	89 85       	ldd	r24, Y+9	; 0x09
    163a:	9a 85       	ldd	r25, Y+10	; 0x0a
    163c:	20 e0       	ldi	r18, 0x00	; 0
    163e:	30 e0       	ldi	r19, 0x00	; 0
    1640:	40 e8       	ldi	r20, 0x80	; 128
    1642:	5f e3       	ldi	r21, 0x3F	; 63
    1644:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1648:	88 23       	and	r24, r24
    164a:	2c f4       	brge	.+10     	; 0x1656 <KPD_u8GetKey+0xc8>
		__ticks = 1;
    164c:	81 e0       	ldi	r24, 0x01	; 1
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	9e 83       	std	Y+6, r25	; 0x06
    1652:	8d 83       	std	Y+5, r24	; 0x05
    1654:	3f c0       	rjmp	.+126    	; 0x16d4 <KPD_u8GetKey+0x146>
	else if (__tmp > 65535)
    1656:	6f 81       	ldd	r22, Y+7	; 0x07
    1658:	78 85       	ldd	r23, Y+8	; 0x08
    165a:	89 85       	ldd	r24, Y+9	; 0x09
    165c:	9a 85       	ldd	r25, Y+10	; 0x0a
    165e:	20 e0       	ldi	r18, 0x00	; 0
    1660:	3f ef       	ldi	r19, 0xFF	; 255
    1662:	4f e7       	ldi	r20, 0x7F	; 127
    1664:	57 e4       	ldi	r21, 0x47	; 71
    1666:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    166a:	18 16       	cp	r1, r24
    166c:	4c f5       	brge	.+82     	; 0x16c0 <KPD_u8GetKey+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    166e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1670:	7c 85       	ldd	r23, Y+12	; 0x0c
    1672:	8d 85       	ldd	r24, Y+13	; 0x0d
    1674:	9e 85       	ldd	r25, Y+14	; 0x0e
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e2       	ldi	r20, 0x20	; 32
    167c:	51 e4       	ldi	r21, 0x41	; 65
    167e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1682:	dc 01       	movw	r26, r24
    1684:	cb 01       	movw	r24, r22
    1686:	bc 01       	movw	r22, r24
    1688:	cd 01       	movw	r24, r26
    168a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    168e:	dc 01       	movw	r26, r24
    1690:	cb 01       	movw	r24, r22
    1692:	9e 83       	std	Y+6, r25	; 0x06
    1694:	8d 83       	std	Y+5, r24	; 0x05
    1696:	0f c0       	rjmp	.+30     	; 0x16b6 <KPD_u8GetKey+0x128>
    1698:	88 ec       	ldi	r24, 0xC8	; 200
    169a:	90 e0       	ldi	r25, 0x00	; 0
    169c:	9c 83       	std	Y+4, r25	; 0x04
    169e:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    16a0:	8b 81       	ldd	r24, Y+3	; 0x03
    16a2:	9c 81       	ldd	r25, Y+4	; 0x04
    16a4:	01 97       	sbiw	r24, 0x01	; 1
    16a6:	f1 f7       	brne	.-4      	; 0x16a4 <KPD_u8GetKey+0x116>
    16a8:	9c 83       	std	Y+4, r25	; 0x04
    16aa:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16ac:	8d 81       	ldd	r24, Y+5	; 0x05
    16ae:	9e 81       	ldd	r25, Y+6	; 0x06
    16b0:	01 97       	sbiw	r24, 0x01	; 1
    16b2:	9e 83       	std	Y+6, r25	; 0x06
    16b4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16b6:	8d 81       	ldd	r24, Y+5	; 0x05
    16b8:	9e 81       	ldd	r25, Y+6	; 0x06
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	69 f7       	brne	.-38     	; 0x1698 <KPD_u8GetKey+0x10a>
    16be:	24 c0       	rjmp	.+72     	; 0x1708 <KPD_u8GetKey+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16c0:	6f 81       	ldd	r22, Y+7	; 0x07
    16c2:	78 85       	ldd	r23, Y+8	; 0x08
    16c4:	89 85       	ldd	r24, Y+9	; 0x09
    16c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    16c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16cc:	dc 01       	movw	r26, r24
    16ce:	cb 01       	movw	r24, r22
    16d0:	9e 83       	std	Y+6, r25	; 0x06
    16d2:	8d 83       	std	Y+5, r24	; 0x05
    16d4:	8d 81       	ldd	r24, Y+5	; 0x05
    16d6:	9e 81       	ldd	r25, Y+6	; 0x06
    16d8:	9a 83       	std	Y+2, r25	; 0x02
    16da:	89 83       	std	Y+1, r24	; 0x01
    16dc:	89 81       	ldd	r24, Y+1	; 0x01
    16de:	9a 81       	ldd	r25, Y+2	; 0x02
    16e0:	01 97       	sbiw	r24, 0x01	; 1
    16e2:	f1 f7       	brne	.-4      	; 0x16e0 <KPD_u8GetKey+0x152>
    16e4:	9a 83       	std	Y+2, r25	; 0x02
    16e6:	89 83       	std	Y+1, r24	; 0x01
    16e8:	0f c0       	rjmp	.+30     	; 0x1708 <KPD_u8GetKey+0x17a>
		  {
              //debouncing
			  _delay_ms(20);
			  while(Local_u8ReturnedKey==DIO_u8_LOW)
			  {
				  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColPins[Local_u8ColCounter],&Local_u8ReturnedKey);
    16ea:	88 89       	ldd	r24, Y+16	; 0x10
    16ec:	88 2f       	mov	r24, r24
    16ee:	90 e0       	ldi	r25, 0x00	; 0
    16f0:	fc 01       	movw	r30, r24
    16f2:	e3 56       	subi	r30, 0x63	; 99
    16f4:	ff 4f       	sbci	r31, 0xFF	; 255
    16f6:	90 81       	ld	r25, Z
    16f8:	9e 01       	movw	r18, r28
    16fa:	2d 5e       	subi	r18, 0xED	; 237
    16fc:	3f 4f       	sbci	r19, 0xFF	; 255
    16fe:	82 e0       	ldi	r24, 0x02	; 2
    1700:	69 2f       	mov	r22, r25
    1702:	a9 01       	movw	r20, r18
    1704:	0e 94 c9 08 	call	0x1192	; 0x1192 <DIO_u8GetPinValue>
		  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColPins[Local_u8ColCounter],&Local_u8ReturnedKey);
		  if(Local_u8ReturnedKey==DIO_u8_LOW)
		  {
              //debouncing
			  _delay_ms(20);
			  while(Local_u8ReturnedKey==DIO_u8_LOW)
    1708:	8b 89       	ldd	r24, Y+19	; 0x13
    170a:	88 23       	and	r24, r24
    170c:	71 f3       	breq	.-36     	; 0x16ea <KPD_u8GetKey+0x15c>
			  {
				  DIO_u8GetPinValue(KPD_u8_PORT,KPD_Au8ColPins[Local_u8ColCounter],&Local_u8ReturnedKey);

			  }
			  *Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowsCounter][Local_u8ColCounter];
    170e:	89 89       	ldd	r24, Y+17	; 0x11
    1710:	48 2f       	mov	r20, r24
    1712:	50 e0       	ldi	r21, 0x00	; 0
    1714:	88 89       	ldd	r24, Y+16	; 0x10
    1716:	28 2f       	mov	r18, r24
    1718:	30 e0       	ldi	r19, 0x00	; 0
    171a:	ca 01       	movw	r24, r20
    171c:	88 0f       	add	r24, r24
    171e:	99 1f       	adc	r25, r25
    1720:	88 0f       	add	r24, r24
    1722:	99 1f       	adc	r25, r25
    1724:	82 0f       	add	r24, r18
    1726:	93 1f       	adc	r25, r19
    1728:	fc 01       	movw	r30, r24
    172a:	ef 55       	subi	r30, 0x5F	; 95
    172c:	ff 4f       	sbci	r31, 0xFF	; 255
    172e:	80 81       	ld	r24, Z
    1730:	ec 89       	ldd	r30, Y+20	; 0x14
    1732:	fd 89       	ldd	r31, Y+21	; 0x15
    1734:	80 83       	st	Z, r24
			  Local_u8Flag = 1;
    1736:	81 e0       	ldi	r24, 0x01	; 1
    1738:	8f 87       	std	Y+15, r24	; 0x0f
    173a:	07 c0       	rjmp	.+14     	; 0x174a <KPD_u8GetKey+0x1bc>
	  for(Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
	  {
     //activate rows
	  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowPins[Local_u8RowsCounter],DIO_u8_LOW);
	 //read 4 cols
	  for(Local_u8ColCounter=0;Local_u8ColCounter<=3;Local_u8ColCounter++)
    173c:	88 89       	ldd	r24, Y+16	; 0x10
    173e:	8f 5f       	subi	r24, 0xFF	; 255
    1740:	88 8b       	std	Y+16, r24	; 0x10
    1742:	88 89       	ldd	r24, Y+16	; 0x10
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	08 f4       	brcc	.+2      	; 0x174a <KPD_u8GetKey+0x1bc>
    1748:	4a cf       	rjmp	.-364    	; 0x15de <KPD_u8GetKey+0x50>
			  *Copy_pu8ReturnedKey = KPD_Au8Key[Local_u8RowsCounter][Local_u8ColCounter];
			  Local_u8Flag = 1;
			  break;
		  }
	  }
	  DIO_u8SetPinValue(KPD_u8_PORT,KPD_Au8RowPins[Local_u8RowsCounter],DIO_u8_HIGH);
    174a:	89 89       	ldd	r24, Y+17	; 0x11
    174c:	88 2f       	mov	r24, r24
    174e:	90 e0       	ldi	r25, 0x00	; 0
    1750:	fc 01       	movw	r30, r24
    1752:	e7 56       	subi	r30, 0x67	; 103
    1754:	ff 4f       	sbci	r31, 0xFF	; 255
    1756:	90 81       	ld	r25, Z
    1758:	82 e0       	ldi	r24, 0x02	; 2
    175a:	69 2f       	mov	r22, r25
    175c:	41 e0       	ldi	r20, 0x01	; 1
    175e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	  if (Local_u8Flag ==1 )
    1762:	8f 85       	ldd	r24, Y+15	; 0x0f
    1764:	81 30       	cpi	r24, 0x01	; 1
    1766:	49 f0       	breq	.+18     	; 0x177a <KPD_u8GetKey+0x1ec>
  u8 Local_ErrorStatus = STD_TYPES_OK;
  u8 Local_u8RowsCounter,Local_u8ColCounter,Local_u8ReturnedKey,Local_u8Flag=0;
  if (Copy_pu8ReturnedKey != NULL)
  {
	  *Copy_pu8ReturnedKey=0xFF;
	  for(Local_u8RowsCounter=0;Local_u8RowsCounter<=3;Local_u8RowsCounter++)
    1768:	89 89       	ldd	r24, Y+17	; 0x11
    176a:	8f 5f       	subi	r24, 0xFF	; 255
    176c:	89 8b       	std	Y+17, r24	; 0x11
    176e:	89 89       	ldd	r24, Y+17	; 0x11
    1770:	84 30       	cpi	r24, 0x04	; 4
    1772:	08 f4       	brcc	.+2      	; 0x1776 <KPD_u8GetKey+0x1e8>
    1774:	26 cf       	rjmp	.-436    	; 0x15c2 <KPD_u8GetKey+0x34>
    1776:	01 c0       	rjmp	.+2      	; 0x177a <KPD_u8GetKey+0x1ec>
	  }
	  }
  }
  else
  {
	  Local_ErrorStatus = STD_TYPES_NOK;
    1778:	1a 8a       	std	Y+18, r1	; 0x12
  }
  return Local_ErrorStatus;
    177a:	8a 89       	ldd	r24, Y+18	; 0x12
}
    177c:	65 96       	adiw	r28, 0x15	; 21
    177e:	0f b6       	in	r0, 0x3f	; 63
    1780:	f8 94       	cli
    1782:	de bf       	out	0x3e, r29	; 62
    1784:	0f be       	out	0x3f, r0	; 63
    1786:	cd bf       	out	0x3d, r28	; 61
    1788:	cf 91       	pop	r28
    178a:	df 91       	pop	r29
    178c:	08 95       	ret

0000178e <TMR_voidTimer0Init>:

void (*TMR_pfTimer0OVF)(void) = NULL;
void (*TMR_pfTimer0CTC)(void) = NULL;

void TMR_voidTimer0Init(void)
{
    178e:	df 93       	push	r29
    1790:	cf 93       	push	r28
    1792:	cd b7       	in	r28, 0x3d	; 61
    1794:	de b7       	in	r29, 0x3e	; 62
//			CLR_BIT(TMR_u8_TCCR0_REG,0);
//			SET_BIT(TMR_u8_TCCR0_REG,1);
//			CLR_BIT(TMR_u8_TCCR0_REG,2);

	/* Select Mode of Timer = > FAST PWM Mode */
	SET_BIT(TMR_u8_TCCR0_REG,6);
    1796:	a3 e5       	ldi	r26, 0x53	; 83
    1798:	b0 e0       	ldi	r27, 0x00	; 0
    179a:	e3 e5       	ldi	r30, 0x53	; 83
    179c:	f0 e0       	ldi	r31, 0x00	; 0
    179e:	80 81       	ld	r24, Z
    17a0:	80 64       	ori	r24, 0x40	; 64
    17a2:	8c 93       	st	X, r24
	SET_BIT(TMR_u8_TCCR0_REG,3);
    17a4:	a3 e5       	ldi	r26, 0x53	; 83
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	e3 e5       	ldi	r30, 0x53	; 83
    17aa:	f0 e0       	ldi	r31, 0x00	; 0
    17ac:	80 81       	ld	r24, Z
    17ae:	88 60       	ori	r24, 0x08	; 8
    17b0:	8c 93       	st	X, r24

	/* Select Action on OC0 PIN => Non - Inverting */
	SET_BIT(TMR_u8_TCCR0_REG,5);
    17b2:	a3 e5       	ldi	r26, 0x53	; 83
    17b4:	b0 e0       	ldi	r27, 0x00	; 0
    17b6:	e3 e5       	ldi	r30, 0x53	; 83
    17b8:	f0 e0       	ldi	r31, 0x00	; 0
    17ba:	80 81       	ld	r24, Z
    17bc:	80 62       	ori	r24, 0x20	; 32
    17be:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,4);
    17c0:	a3 e5       	ldi	r26, 0x53	; 83
    17c2:	b0 e0       	ldi	r27, 0x00	; 0
    17c4:	e3 e5       	ldi	r30, 0x53	; 83
    17c6:	f0 e0       	ldi	r31, 0x00	; 0
    17c8:	80 81       	ld	r24, Z
    17ca:	8f 7e       	andi	r24, 0xEF	; 239
    17cc:	8c 93       	st	X, r24


	/* prescaler => 8 */
	CLR_BIT(TMR_u8_TCCR0_REG,0);
    17ce:	a3 e5       	ldi	r26, 0x53	; 83
    17d0:	b0 e0       	ldi	r27, 0x00	; 0
    17d2:	e3 e5       	ldi	r30, 0x53	; 83
    17d4:	f0 e0       	ldi	r31, 0x00	; 0
    17d6:	80 81       	ld	r24, Z
    17d8:	8e 7f       	andi	r24, 0xFE	; 254
    17da:	8c 93       	st	X, r24
	SET_BIT(TMR_u8_TCCR0_REG,1);
    17dc:	a3 e5       	ldi	r26, 0x53	; 83
    17de:	b0 e0       	ldi	r27, 0x00	; 0
    17e0:	e3 e5       	ldi	r30, 0x53	; 83
    17e2:	f0 e0       	ldi	r31, 0x00	; 0
    17e4:	80 81       	ld	r24, Z
    17e6:	82 60       	ori	r24, 0x02	; 2
    17e8:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR0_REG,2);
    17ea:	a3 e5       	ldi	r26, 0x53	; 83
    17ec:	b0 e0       	ldi	r27, 0x00	; 0
    17ee:	e3 e5       	ldi	r30, 0x53	; 83
    17f0:	f0 e0       	ldi	r31, 0x00	; 0
    17f2:	80 81       	ld	r24, Z
    17f4:	8b 7f       	andi	r24, 0xFB	; 251
    17f6:	8c 93       	st	X, r24


}
    17f8:	cf 91       	pop	r28
    17fa:	df 91       	pop	r29
    17fc:	08 95       	ret

000017fe <TMR_voidTimer1GetCounterValue>:


void   TMR_voidTimer1GetCounterValue(u16 * Copy_pu16CounterValue)
{
    17fe:	df 93       	push	r29
    1800:	cf 93       	push	r28
    1802:	00 d0       	rcall	.+0      	; 0x1804 <TMR_voidTimer1GetCounterValue+0x6>
    1804:	cd b7       	in	r28, 0x3d	; 61
    1806:	de b7       	in	r29, 0x3e	; 62
    1808:	9a 83       	std	Y+2, r25	; 0x02
    180a:	89 83       	std	Y+1, r24	; 0x01
	*Copy_pu16CounterValue = TMR_u16_TCNT1;
    180c:	ec e4       	ldi	r30, 0x4C	; 76
    180e:	f0 e0       	ldi	r31, 0x00	; 0
    1810:	80 81       	ld	r24, Z
    1812:	91 81       	ldd	r25, Z+1	; 0x01
    1814:	e9 81       	ldd	r30, Y+1	; 0x01
    1816:	fa 81       	ldd	r31, Y+2	; 0x02
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	cf 91       	pop	r28
    1822:	df 91       	pop	r29
    1824:	08 95       	ret

00001826 <TMR_voidTimer1Init>:


void TMR_voidTimer1Init(void)
{
    1826:	df 93       	push	r29
    1828:	cf 93       	push	r28
    182a:	cd b7       	in	r28, 0x3d	; 61
    182c:	de b7       	in	r29, 0x3e	; 62
//	SET_BIT(TMR_u8_TCCR1B,1);
//	CLR_BIT(TMR_u8_TCCR1B,2);


	/* Timer 1 Select Mode 1 =>  Normal Mode */
	CLR_BIT(TMR_u8_TCCR1A,0);
    182e:	af e4       	ldi	r26, 0x4F	; 79
    1830:	b0 e0       	ldi	r27, 0x00	; 0
    1832:	ef e4       	ldi	r30, 0x4F	; 79
    1834:	f0 e0       	ldi	r31, 0x00	; 0
    1836:	80 81       	ld	r24, Z
    1838:	8e 7f       	andi	r24, 0xFE	; 254
    183a:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1A,1);
    183c:	af e4       	ldi	r26, 0x4F	; 79
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	ef e4       	ldi	r30, 0x4F	; 79
    1842:	f0 e0       	ldi	r31, 0x00	; 0
    1844:	80 81       	ld	r24, Z
    1846:	8d 7f       	andi	r24, 0xFD	; 253
    1848:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1B,3);
    184a:	ae e4       	ldi	r26, 0x4E	; 78
    184c:	b0 e0       	ldi	r27, 0x00	; 0
    184e:	ee e4       	ldi	r30, 0x4E	; 78
    1850:	f0 e0       	ldi	r31, 0x00	; 0
    1852:	80 81       	ld	r24, Z
    1854:	87 7f       	andi	r24, 0xF7	; 247
    1856:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1B,4);
    1858:	ae e4       	ldi	r26, 0x4E	; 78
    185a:	b0 e0       	ldi	r27, 0x00	; 0
    185c:	ee e4       	ldi	r30, 0x4E	; 78
    185e:	f0 e0       	ldi	r31, 0x00	; 0
    1860:	80 81       	ld	r24, Z
    1862:	8f 7e       	andi	r24, 0xEF	; 239
    1864:	8c 93       	st	X, r24


	/* Set Prescaler => 8 / start timer 1*/
	CLR_BIT(TMR_u8_TCCR1B,0);
    1866:	ae e4       	ldi	r26, 0x4E	; 78
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	ee e4       	ldi	r30, 0x4E	; 78
    186c:	f0 e0       	ldi	r31, 0x00	; 0
    186e:	80 81       	ld	r24, Z
    1870:	8e 7f       	andi	r24, 0xFE	; 254
    1872:	8c 93       	st	X, r24
	SET_BIT(TMR_u8_TCCR1B,1);
    1874:	ae e4       	ldi	r26, 0x4E	; 78
    1876:	b0 e0       	ldi	r27, 0x00	; 0
    1878:	ee e4       	ldi	r30, 0x4E	; 78
    187a:	f0 e0       	ldi	r31, 0x00	; 0
    187c:	80 81       	ld	r24, Z
    187e:	82 60       	ori	r24, 0x02	; 2
    1880:	8c 93       	st	X, r24
	CLR_BIT(TMR_u8_TCCR1B,2);
    1882:	ae e4       	ldi	r26, 0x4E	; 78
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	ee e4       	ldi	r30, 0x4E	; 78
    1888:	f0 e0       	ldi	r31, 0x00	; 0
    188a:	80 81       	ld	r24, Z
    188c:	8b 7f       	andi	r24, 0xFB	; 251
    188e:	8c 93       	st	X, r24



}
    1890:	cf 91       	pop	r28
    1892:	df 91       	pop	r29
    1894:	08 95       	ret

00001896 <TMR_voidTimer1SetCompareMatchChannelA>:

void   TMR_voidTimer1SetCompareMatchChannelA(u16 Copy_16OCR1AValue)
{
    1896:	df 93       	push	r29
    1898:	cf 93       	push	r28
    189a:	00 d0       	rcall	.+0      	; 0x189c <TMR_voidTimer1SetCompareMatchChannelA+0x6>
    189c:	cd b7       	in	r28, 0x3d	; 61
    189e:	de b7       	in	r29, 0x3e	; 62
    18a0:	9a 83       	std	Y+2, r25	; 0x02
    18a2:	89 83       	std	Y+1, r24	; 0x01
	TMR_u16_OCR1A = Copy_16OCR1AValue;
    18a4:	ea e4       	ldi	r30, 0x4A	; 74
    18a6:	f0 e0       	ldi	r31, 0x00	; 0
    18a8:	89 81       	ldd	r24, Y+1	; 0x01
    18aa:	9a 81       	ldd	r25, Y+2	; 0x02
    18ac:	91 83       	std	Z+1, r25	; 0x01
    18ae:	80 83       	st	Z, r24
}
    18b0:	0f 90       	pop	r0
    18b2:	0f 90       	pop	r0
    18b4:	cf 91       	pop	r28
    18b6:	df 91       	pop	r29
    18b8:	08 95       	ret

000018ba <TMR_voidTimer0SetCompareMatchValue>:

void   TMR_voidTimer0SetCompareMatchValue(u8 Copy_u8OCR0Value)
{
    18ba:	df 93       	push	r29
    18bc:	cf 93       	push	r28
    18be:	0f 92       	push	r0
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	89 83       	std	Y+1, r24	; 0x01
		TMR_u8_OCR0_REG = Copy_u8OCR0Value;
    18c6:	ec e5       	ldi	r30, 0x5C	; 92
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	89 81       	ldd	r24, Y+1	; 0x01
    18cc:	80 83       	st	Z, r24
}
    18ce:	0f 90       	pop	r0
    18d0:	cf 91       	pop	r28
    18d2:	df 91       	pop	r29
    18d4:	08 95       	ret

000018d6 <TMR_u8Timer0OVFSetCallBack>:

void   TMR_u8Timer0OVFSetCallBack(void(*Copy_pf)(void))
{
    18d6:	df 93       	push	r29
    18d8:	cf 93       	push	r28
    18da:	00 d0       	rcall	.+0      	; 0x18dc <TMR_u8Timer0OVFSetCallBack+0x6>
    18dc:	cd b7       	in	r28, 0x3d	; 61
    18de:	de b7       	in	r29, 0x3e	; 62
    18e0:	9a 83       	std	Y+2, r25	; 0x02
    18e2:	89 83       	std	Y+1, r24	; 0x01
	TMR_pfTimer0OVF = Copy_pf;
    18e4:	89 81       	ldd	r24, Y+1	; 0x01
    18e6:	9a 81       	ldd	r25, Y+2	; 0x02
    18e8:	90 93 b3 00 	sts	0x00B3, r25
    18ec:	80 93 b2 00 	sts	0x00B2, r24
}
    18f0:	0f 90       	pop	r0
    18f2:	0f 90       	pop	r0
    18f4:	cf 91       	pop	r28
    18f6:	df 91       	pop	r29
    18f8:	08 95       	ret

000018fa <TMR_u8Timer0CTCSetCallBack>:

void   TMR_u8Timer0CTCSetCallBack(void(*Copy_pf)(void))
{
    18fa:	df 93       	push	r29
    18fc:	cf 93       	push	r28
    18fe:	00 d0       	rcall	.+0      	; 0x1900 <TMR_u8Timer0CTCSetCallBack+0x6>
    1900:	cd b7       	in	r28, 0x3d	; 61
    1902:	de b7       	in	r29, 0x3e	; 62
    1904:	9a 83       	std	Y+2, r25	; 0x02
    1906:	89 83       	std	Y+1, r24	; 0x01
	TMR_pfTimer0CTC = Copy_pf;
    1908:	89 81       	ldd	r24, Y+1	; 0x01
    190a:	9a 81       	ldd	r25, Y+2	; 0x02
    190c:	90 93 b5 00 	sts	0x00B5, r25
    1910:	80 93 b4 00 	sts	0x00B4, r24
}
    1914:	0f 90       	pop	r0
    1916:	0f 90       	pop	r0
    1918:	cf 91       	pop	r28
    191a:	df 91       	pop	r29
    191c:	08 95       	ret

0000191e <__vector_10>:

/* prototype if ISR Timer0 CTC */
void __vector_10(void)     __attribute__((signal));
void __vector_10(void)
{
    191e:	1f 92       	push	r1
    1920:	0f 92       	push	r0
    1922:	0f b6       	in	r0, 0x3f	; 63
    1924:	0f 92       	push	r0
    1926:	11 24       	eor	r1, r1
    1928:	2f 93       	push	r18
    192a:	3f 93       	push	r19
    192c:	4f 93       	push	r20
    192e:	5f 93       	push	r21
    1930:	6f 93       	push	r22
    1932:	7f 93       	push	r23
    1934:	8f 93       	push	r24
    1936:	9f 93       	push	r25
    1938:	af 93       	push	r26
    193a:	bf 93       	push	r27
    193c:	ef 93       	push	r30
    193e:	ff 93       	push	r31
    1940:	df 93       	push	r29
    1942:	cf 93       	push	r28
    1944:	cd b7       	in	r28, 0x3d	; 61
    1946:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter ++;
    1948:	80 91 b6 00 	lds	r24, 0x00B6
    194c:	90 91 b7 00 	lds	r25, 0x00B7
    1950:	01 96       	adiw	r24, 0x01	; 1
    1952:	90 93 b7 00 	sts	0x00B7, r25
    1956:	80 93 b6 00 	sts	0x00B6, r24

	if(Local_u16Counter == 10000)
    195a:	80 91 b6 00 	lds	r24, 0x00B6
    195e:	90 91 b7 00 	lds	r25, 0x00B7
    1962:	27 e2       	ldi	r18, 0x27	; 39
    1964:	80 31       	cpi	r24, 0x10	; 16
    1966:	92 07       	cpc	r25, r18
    1968:	49 f4       	brne	.+18     	; 0x197c <__vector_10+0x5e>
	{

		/* Reset Counter */
		Local_u16Counter = 0;
    196a:	10 92 b7 00 	sts	0x00B7, r1
    196e:	10 92 b6 00 	sts	0x00B6, r1

		/* Call Back Fuunction */
		TMR_pfTimer0CTC();
    1972:	e0 91 b4 00 	lds	r30, 0x00B4
    1976:	f0 91 b5 00 	lds	r31, 0x00B5
    197a:	09 95       	icall

	}
}
    197c:	cf 91       	pop	r28
    197e:	df 91       	pop	r29
    1980:	ff 91       	pop	r31
    1982:	ef 91       	pop	r30
    1984:	bf 91       	pop	r27
    1986:	af 91       	pop	r26
    1988:	9f 91       	pop	r25
    198a:	8f 91       	pop	r24
    198c:	7f 91       	pop	r23
    198e:	6f 91       	pop	r22
    1990:	5f 91       	pop	r21
    1992:	4f 91       	pop	r20
    1994:	3f 91       	pop	r19
    1996:	2f 91       	pop	r18
    1998:	0f 90       	pop	r0
    199a:	0f be       	out	0x3f, r0	; 63
    199c:	0f 90       	pop	r0
    199e:	1f 90       	pop	r1
    19a0:	18 95       	reti

000019a2 <__vector_11>:


/* prototype if ISR Timer0 OVF */
void __vector_11(void)     __attribute__((signal));
void __vector_11(void)
{
    19a2:	1f 92       	push	r1
    19a4:	0f 92       	push	r0
    19a6:	0f b6       	in	r0, 0x3f	; 63
    19a8:	0f 92       	push	r0
    19aa:	11 24       	eor	r1, r1
    19ac:	2f 93       	push	r18
    19ae:	3f 93       	push	r19
    19b0:	4f 93       	push	r20
    19b2:	5f 93       	push	r21
    19b4:	6f 93       	push	r22
    19b6:	7f 93       	push	r23
    19b8:	8f 93       	push	r24
    19ba:	9f 93       	push	r25
    19bc:	af 93       	push	r26
    19be:	bf 93       	push	r27
    19c0:	ef 93       	push	r30
    19c2:	ff 93       	push	r31
    19c4:	df 93       	push	r29
    19c6:	cf 93       	push	r28
    19c8:	cd b7       	in	r28, 0x3d	; 61
    19ca:	de b7       	in	r29, 0x3e	; 62
	static u16 Local_u16Counter = 0;
	Local_u16Counter ++;
    19cc:	80 91 b8 00 	lds	r24, 0x00B8
    19d0:	90 91 b9 00 	lds	r25, 0x00B9
    19d4:	01 96       	adiw	r24, 0x01	; 1
    19d6:	90 93 b9 00 	sts	0x00B9, r25
    19da:	80 93 b8 00 	sts	0x00B8, r24

	if(Local_u16Counter == 3907)
    19de:	80 91 b8 00 	lds	r24, 0x00B8
    19e2:	90 91 b9 00 	lds	r25, 0x00B9
    19e6:	2f e0       	ldi	r18, 0x0F	; 15
    19e8:	83 34       	cpi	r24, 0x43	; 67
    19ea:	92 07       	cpc	r25, r18
    19ec:	69 f4       	brne	.+26     	; 0x1a08 <__vector_11+0x66>
	{
		/* set Preload Value */
		TMR_u8_TCNT0_REG = 192;
    19ee:	e2 e5       	ldi	r30, 0x52	; 82
    19f0:	f0 e0       	ldi	r31, 0x00	; 0
    19f2:	80 ec       	ldi	r24, 0xC0	; 192
    19f4:	80 83       	st	Z, r24

		/* Reset Counter */
		Local_u16Counter = 0;
    19f6:	10 92 b9 00 	sts	0x00B9, r1
    19fa:	10 92 b8 00 	sts	0x00B8, r1

		/* Call Back Fuunction */
		TMR_pfTimer0OVF();
    19fe:	e0 91 b2 00 	lds	r30, 0x00B2
    1a02:	f0 91 b3 00 	lds	r31, 0x00B3
    1a06:	09 95       	icall

	}
}
    1a08:	cf 91       	pop	r28
    1a0a:	df 91       	pop	r29
    1a0c:	ff 91       	pop	r31
    1a0e:	ef 91       	pop	r30
    1a10:	bf 91       	pop	r27
    1a12:	af 91       	pop	r26
    1a14:	9f 91       	pop	r25
    1a16:	8f 91       	pop	r24
    1a18:	7f 91       	pop	r23
    1a1a:	6f 91       	pop	r22
    1a1c:	5f 91       	pop	r21
    1a1e:	4f 91       	pop	r20
    1a20:	3f 91       	pop	r19
    1a22:	2f 91       	pop	r18
    1a24:	0f 90       	pop	r0
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	0f 90       	pop	r0
    1a2a:	1f 90       	pop	r1
    1a2c:	18 95       	reti

00001a2e <LED_voidBlink>:
#include "KPD_interface.h"
#include "KPD_config.h"
#include "KPD_private.h"

void LED_voidBlink (void)
{
    1a2e:	df 93       	push	r29
    1a30:	cf 93       	push	r28
    1a32:	cd b7       	in	r28, 0x3d	; 61
    1a34:	de b7       	in	r29, 0x3e	; 62
    1a36:	6e 97       	sbiw	r28, 0x1e	; 30
    1a38:	0f b6       	in	r0, 0x3f	; 63
    1a3a:	f8 94       	cli
    1a3c:	de bf       	out	0x3e, r29	; 62
    1a3e:	0f be       	out	0x3f, r0	; 63
    1a40:	cd bf       	out	0x3d, r28	; 61
	for(u32 counter=0;counter<=4294967295;counter++)
    1a42:	1e 8e       	std	Y+30, r1	; 0x1e
    1a44:	1d 8e       	std	Y+29, r1	; 0x1d
	{
		DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_HIGH);
    1a46:	83 e0       	ldi	r24, 0x03	; 3
    1a48:	61 e0       	ldi	r22, 0x01	; 1
    1a4a:	41 e0       	ldi	r20, 0x01	; 1
    1a4c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    1a50:	80 e0       	ldi	r24, 0x00	; 0
    1a52:	90 e0       	ldi	r25, 0x00	; 0
    1a54:	a8 ec       	ldi	r26, 0xC8	; 200
    1a56:	b2 e4       	ldi	r27, 0x42	; 66
    1a58:	89 8f       	std	Y+25, r24	; 0x19
    1a5a:	9a 8f       	std	Y+26, r25	; 0x1a
    1a5c:	ab 8f       	std	Y+27, r26	; 0x1b
    1a5e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a60:	69 8d       	ldd	r22, Y+25	; 0x19
    1a62:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a64:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a66:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a68:	20 e0       	ldi	r18, 0x00	; 0
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	4a ef       	ldi	r20, 0xFA	; 250
    1a6e:	54 e4       	ldi	r21, 0x44	; 68
    1a70:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a74:	dc 01       	movw	r26, r24
    1a76:	cb 01       	movw	r24, r22
    1a78:	8d 8b       	std	Y+21, r24	; 0x15
    1a7a:	9e 8b       	std	Y+22, r25	; 0x16
    1a7c:	af 8b       	std	Y+23, r26	; 0x17
    1a7e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1a80:	6d 89       	ldd	r22, Y+21	; 0x15
    1a82:	7e 89       	ldd	r23, Y+22	; 0x16
    1a84:	8f 89       	ldd	r24, Y+23	; 0x17
    1a86:	98 8d       	ldd	r25, Y+24	; 0x18
    1a88:	20 e0       	ldi	r18, 0x00	; 0
    1a8a:	30 e0       	ldi	r19, 0x00	; 0
    1a8c:	40 e8       	ldi	r20, 0x80	; 128
    1a8e:	5f e3       	ldi	r21, 0x3F	; 63
    1a90:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1a94:	88 23       	and	r24, r24
    1a96:	2c f4       	brge	.+10     	; 0x1aa2 <LED_voidBlink+0x74>
		__ticks = 1;
    1a98:	81 e0       	ldi	r24, 0x01	; 1
    1a9a:	90 e0       	ldi	r25, 0x00	; 0
    1a9c:	9c 8b       	std	Y+20, r25	; 0x14
    1a9e:	8b 8b       	std	Y+19, r24	; 0x13
    1aa0:	3f c0       	rjmp	.+126    	; 0x1b20 <LED_voidBlink+0xf2>
	else if (__tmp > 65535)
    1aa2:	6d 89       	ldd	r22, Y+21	; 0x15
    1aa4:	7e 89       	ldd	r23, Y+22	; 0x16
    1aa6:	8f 89       	ldd	r24, Y+23	; 0x17
    1aa8:	98 8d       	ldd	r25, Y+24	; 0x18
    1aaa:	20 e0       	ldi	r18, 0x00	; 0
    1aac:	3f ef       	ldi	r19, 0xFF	; 255
    1aae:	4f e7       	ldi	r20, 0x7F	; 127
    1ab0:	57 e4       	ldi	r21, 0x47	; 71
    1ab2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ab6:	18 16       	cp	r1, r24
    1ab8:	4c f5       	brge	.+82     	; 0x1b0c <LED_voidBlink+0xde>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1aba:	69 8d       	ldd	r22, Y+25	; 0x19
    1abc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1abe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1ac0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1ac2:	20 e0       	ldi	r18, 0x00	; 0
    1ac4:	30 e0       	ldi	r19, 0x00	; 0
    1ac6:	40 e2       	ldi	r20, 0x20	; 32
    1ac8:	51 e4       	ldi	r21, 0x41	; 65
    1aca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ace:	dc 01       	movw	r26, r24
    1ad0:	cb 01       	movw	r24, r22
    1ad2:	bc 01       	movw	r22, r24
    1ad4:	cd 01       	movw	r24, r26
    1ad6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	9c 8b       	std	Y+20, r25	; 0x14
    1ae0:	8b 8b       	std	Y+19, r24	; 0x13
    1ae2:	0f c0       	rjmp	.+30     	; 0x1b02 <LED_voidBlink+0xd4>
    1ae4:	88 ec       	ldi	r24, 0xC8	; 200
    1ae6:	90 e0       	ldi	r25, 0x00	; 0
    1ae8:	9a 8b       	std	Y+18, r25	; 0x12
    1aea:	89 8b       	std	Y+17, r24	; 0x11
    1aec:	89 89       	ldd	r24, Y+17	; 0x11
    1aee:	9a 89       	ldd	r25, Y+18	; 0x12
    1af0:	01 97       	sbiw	r24, 0x01	; 1
    1af2:	f1 f7       	brne	.-4      	; 0x1af0 <LED_voidBlink+0xc2>
    1af4:	9a 8b       	std	Y+18, r25	; 0x12
    1af6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1af8:	8b 89       	ldd	r24, Y+19	; 0x13
    1afa:	9c 89       	ldd	r25, Y+20	; 0x14
    1afc:	01 97       	sbiw	r24, 0x01	; 1
    1afe:	9c 8b       	std	Y+20, r25	; 0x14
    1b00:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b02:	8b 89       	ldd	r24, Y+19	; 0x13
    1b04:	9c 89       	ldd	r25, Y+20	; 0x14
    1b06:	00 97       	sbiw	r24, 0x00	; 0
    1b08:	69 f7       	brne	.-38     	; 0x1ae4 <LED_voidBlink+0xb6>
    1b0a:	14 c0       	rjmp	.+40     	; 0x1b34 <LED_voidBlink+0x106>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b0c:	6d 89       	ldd	r22, Y+21	; 0x15
    1b0e:	7e 89       	ldd	r23, Y+22	; 0x16
    1b10:	8f 89       	ldd	r24, Y+23	; 0x17
    1b12:	98 8d       	ldd	r25, Y+24	; 0x18
    1b14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b18:	dc 01       	movw	r26, r24
    1b1a:	cb 01       	movw	r24, r22
    1b1c:	9c 8b       	std	Y+20, r25	; 0x14
    1b1e:	8b 8b       	std	Y+19, r24	; 0x13
    1b20:	8b 89       	ldd	r24, Y+19	; 0x13
    1b22:	9c 89       	ldd	r25, Y+20	; 0x14
    1b24:	98 8b       	std	Y+16, r25	; 0x10
    1b26:	8f 87       	std	Y+15, r24	; 0x0f
    1b28:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b2a:	98 89       	ldd	r25, Y+16	; 0x10
    1b2c:	01 97       	sbiw	r24, 0x01	; 1
    1b2e:	f1 f7       	brne	.-4      	; 0x1b2c <LED_voidBlink+0xfe>
    1b30:	98 8b       	std	Y+16, r25	; 0x10
    1b32:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(100);
		DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN1,DIO_u8_LOW);
    1b34:	83 e0       	ldi	r24, 0x03	; 3
    1b36:	61 e0       	ldi	r22, 0x01	; 1
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    1b3e:	80 e0       	ldi	r24, 0x00	; 0
    1b40:	90 e0       	ldi	r25, 0x00	; 0
    1b42:	a8 ec       	ldi	r26, 0xC8	; 200
    1b44:	b2 e4       	ldi	r27, 0x42	; 66
    1b46:	8b 87       	std	Y+11, r24	; 0x0b
    1b48:	9c 87       	std	Y+12, r25	; 0x0c
    1b4a:	ad 87       	std	Y+13, r26	; 0x0d
    1b4c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b4e:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b50:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b52:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b54:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b56:	20 e0       	ldi	r18, 0x00	; 0
    1b58:	30 e0       	ldi	r19, 0x00	; 0
    1b5a:	4a ef       	ldi	r20, 0xFA	; 250
    1b5c:	54 e4       	ldi	r21, 0x44	; 68
    1b5e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b62:	dc 01       	movw	r26, r24
    1b64:	cb 01       	movw	r24, r22
    1b66:	8f 83       	std	Y+7, r24	; 0x07
    1b68:	98 87       	std	Y+8, r25	; 0x08
    1b6a:	a9 87       	std	Y+9, r26	; 0x09
    1b6c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1b6e:	6f 81       	ldd	r22, Y+7	; 0x07
    1b70:	78 85       	ldd	r23, Y+8	; 0x08
    1b72:	89 85       	ldd	r24, Y+9	; 0x09
    1b74:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b76:	20 e0       	ldi	r18, 0x00	; 0
    1b78:	30 e0       	ldi	r19, 0x00	; 0
    1b7a:	40 e8       	ldi	r20, 0x80	; 128
    1b7c:	5f e3       	ldi	r21, 0x3F	; 63
    1b7e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1b82:	88 23       	and	r24, r24
    1b84:	2c f4       	brge	.+10     	; 0x1b90 <LED_voidBlink+0x162>
		__ticks = 1;
    1b86:	81 e0       	ldi	r24, 0x01	; 1
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	9e 83       	std	Y+6, r25	; 0x06
    1b8c:	8d 83       	std	Y+5, r24	; 0x05
    1b8e:	3f c0       	rjmp	.+126    	; 0x1c0e <LED_voidBlink+0x1e0>
	else if (__tmp > 65535)
    1b90:	6f 81       	ldd	r22, Y+7	; 0x07
    1b92:	78 85       	ldd	r23, Y+8	; 0x08
    1b94:	89 85       	ldd	r24, Y+9	; 0x09
    1b96:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b98:	20 e0       	ldi	r18, 0x00	; 0
    1b9a:	3f ef       	ldi	r19, 0xFF	; 255
    1b9c:	4f e7       	ldi	r20, 0x7F	; 127
    1b9e:	57 e4       	ldi	r21, 0x47	; 71
    1ba0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1ba4:	18 16       	cp	r1, r24
    1ba6:	4c f5       	brge	.+82     	; 0x1bfa <LED_voidBlink+0x1cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ba8:	6b 85       	ldd	r22, Y+11	; 0x0b
    1baa:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bac:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bae:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bb0:	20 e0       	ldi	r18, 0x00	; 0
    1bb2:	30 e0       	ldi	r19, 0x00	; 0
    1bb4:	40 e2       	ldi	r20, 0x20	; 32
    1bb6:	51 e4       	ldi	r21, 0x41	; 65
    1bb8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1bbc:	dc 01       	movw	r26, r24
    1bbe:	cb 01       	movw	r24, r22
    1bc0:	bc 01       	movw	r22, r24
    1bc2:	cd 01       	movw	r24, r26
    1bc4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1bc8:	dc 01       	movw	r26, r24
    1bca:	cb 01       	movw	r24, r22
    1bcc:	9e 83       	std	Y+6, r25	; 0x06
    1bce:	8d 83       	std	Y+5, r24	; 0x05
    1bd0:	0f c0       	rjmp	.+30     	; 0x1bf0 <LED_voidBlink+0x1c2>
    1bd2:	88 ec       	ldi	r24, 0xC8	; 200
    1bd4:	90 e0       	ldi	r25, 0x00	; 0
    1bd6:	9c 83       	std	Y+4, r25	; 0x04
    1bd8:	8b 83       	std	Y+3, r24	; 0x03
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	9c 81       	ldd	r25, Y+4	; 0x04
    1bde:	01 97       	sbiw	r24, 0x01	; 1
    1be0:	f1 f7       	brne	.-4      	; 0x1bde <LED_voidBlink+0x1b0>
    1be2:	9c 83       	std	Y+4, r25	; 0x04
    1be4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1be6:	8d 81       	ldd	r24, Y+5	; 0x05
    1be8:	9e 81       	ldd	r25, Y+6	; 0x06
    1bea:	01 97       	sbiw	r24, 0x01	; 1
    1bec:	9e 83       	std	Y+6, r25	; 0x06
    1bee:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf0:	8d 81       	ldd	r24, Y+5	; 0x05
    1bf2:	9e 81       	ldd	r25, Y+6	; 0x06
    1bf4:	00 97       	sbiw	r24, 0x00	; 0
    1bf6:	69 f7       	brne	.-38     	; 0x1bd2 <LED_voidBlink+0x1a4>
    1bf8:	14 c0       	rjmp	.+40     	; 0x1c22 <LED_voidBlink+0x1f4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1bfa:	6f 81       	ldd	r22, Y+7	; 0x07
    1bfc:	78 85       	ldd	r23, Y+8	; 0x08
    1bfe:	89 85       	ldd	r24, Y+9	; 0x09
    1c00:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c02:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c06:	dc 01       	movw	r26, r24
    1c08:	cb 01       	movw	r24, r22
    1c0a:	9e 83       	std	Y+6, r25	; 0x06
    1c0c:	8d 83       	std	Y+5, r24	; 0x05
    1c0e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c10:	9e 81       	ldd	r25, Y+6	; 0x06
    1c12:	9a 83       	std	Y+2, r25	; 0x02
    1c14:	89 83       	std	Y+1, r24	; 0x01
    1c16:	89 81       	ldd	r24, Y+1	; 0x01
    1c18:	9a 81       	ldd	r25, Y+2	; 0x02
    1c1a:	01 97       	sbiw	r24, 0x01	; 1
    1c1c:	f1 f7       	brne	.-4      	; 0x1c1a <LED_voidBlink+0x1ec>
    1c1e:	9a 83       	std	Y+2, r25	; 0x02
    1c20:	89 83       	std	Y+1, r24	; 0x01
#include "KPD_config.h"
#include "KPD_private.h"

void LED_voidBlink (void)
{
	for(u32 counter=0;counter<=4294967295;counter++)
    1c22:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1c24:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1c26:	01 96       	adiw	r24, 0x01	; 1
    1c28:	9e 8f       	std	Y+30, r25	; 0x1e
    1c2a:	8d 8f       	std	Y+29, r24	; 0x1d
    1c2c:	0c cf       	rjmp	.-488    	; 0x1a46 <LED_voidBlink+0x18>

00001c2e <main>:

}


int main()
{
    1c2e:	df 93       	push	r29
    1c30:	cf 93       	push	r28
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	c2 54       	subi	r28, 0x42	; 66
    1c38:	d0 40       	sbci	r29, 0x00	; 0
    1c3a:	0f b6       	in	r0, 0x3f	; 63
    1c3c:	f8 94       	cli
    1c3e:	de bf       	out	0x3e, r29	; 62
    1c40:	0f be       	out	0x3f, r0	; 63
    1c42:	cd bf       	out	0x3d, r28	; 61

	DIO_Init();
    1c44:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_Init>
	LCD_voidInit();
    1c48:	0e 94 cb 11 	call	0x2396	; 0x2396 <LCD_voidInit>
	u8 Local_variable,NUM,counter=3,idk=0;
    1c4c:	83 e0       	ldi	r24, 0x03	; 3
    1c4e:	8e af       	std	Y+62, r24	; 0x3e
    1c50:	1d ae       	std	Y+61, r1	; 0x3d
	u32 ID1=0,ID2=0;
    1c52:	1c ae       	std	Y+60, r1	; 0x3c
    1c54:	1b ae       	std	Y+59, r1	; 0x3b
    1c56:	1a ae       	std	Y+58, r1	; 0x3a
    1c58:	19 ae       	std	Y+57, r1	; 0x39
	LCD_voidSendString("enter your pass");
    1c5a:	80 e6       	ldi	r24, 0x60	; 96
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_voidSendString>
	while(1)
	{
		KPD_u8GetKey(& Local_variable);
    1c62:	ce 01       	movw	r24, r28
    1c64:	80 5c       	subi	r24, 0xC0	; 192
    1c66:	9f 4f       	sbci	r25, 0xFF	; 255
    1c68:	0e 94 c7 0a 	call	0x158e	; 0x158e <KPD_u8GetKey>
		if (Local_variable != 0xFF)
    1c6c:	fe 01       	movw	r30, r28
    1c6e:	e0 5c       	subi	r30, 0xC0	; 192
    1c70:	ff 4f       	sbci	r31, 0xFF	; 255
    1c72:	80 81       	ld	r24, Z
    1c74:	8f 3f       	cpi	r24, 0xFF	; 255
    1c76:	a9 f3       	breq	.-22     	; 0x1c62 <main+0x34>
		{
			if(idk==0){LCD_voidClear();idk=1;}
    1c78:	8d ad       	ldd	r24, Y+61	; 0x3d
    1c7a:	88 23       	and	r24, r24
    1c7c:	21 f4       	brne	.+8      	; 0x1c86 <main+0x58>
    1c7e:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_voidClear>
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	8d af       	std	Y+61, r24	; 0x3d
			LCD_voidSendChar(Local_variable);
    1c86:	fe 01       	movw	r30, r28
    1c88:	e0 5c       	subi	r30, 0xC0	; 192
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_voidSendChar>

			switch(Local_variable)
    1c92:	fe 01       	movw	r30, r28
    1c94:	e0 5c       	subi	r30, 0xC0	; 192
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 81       	ld	r24, Z
    1c9a:	28 2f       	mov	r18, r24
    1c9c:	30 e0       	ldi	r19, 0x00	; 0
    1c9e:	23 96       	adiw	r28, 0x03	; 3
    1ca0:	3f af       	std	Y+63, r19	; 0x3f
    1ca2:	2e af       	std	Y+62, r18	; 0x3e
    1ca4:	23 97       	sbiw	r28, 0x03	; 3
    1ca6:	23 96       	adiw	r28, 0x03	; 3
    1ca8:	8e ad       	ldd	r24, Y+62	; 0x3e
    1caa:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cac:	23 97       	sbiw	r28, 0x03	; 3
    1cae:	85 33       	cpi	r24, 0x35	; 53
    1cb0:	91 05       	cpc	r25, r1
    1cb2:	09 f4       	brne	.+2      	; 0x1cb6 <main+0x88>
    1cb4:	d6 c0       	rjmp	.+428    	; 0x1e62 <main+0x234>
    1cb6:	23 96       	adiw	r28, 0x03	; 3
    1cb8:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cba:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cbc:	23 97       	sbiw	r28, 0x03	; 3
    1cbe:	26 33       	cpi	r18, 0x36	; 54
    1cc0:	31 05       	cpc	r19, r1
    1cc2:	8c f5       	brge	.+98     	; 0x1d26 <main+0xf8>
    1cc4:	23 96       	adiw	r28, 0x03	; 3
    1cc6:	8e ad       	ldd	r24, Y+62	; 0x3e
    1cc8:	9f ad       	ldd	r25, Y+63	; 0x3f
    1cca:	23 97       	sbiw	r28, 0x03	; 3
    1ccc:	82 33       	cpi	r24, 0x32	; 50
    1cce:	91 05       	cpc	r25, r1
    1cd0:	09 f4       	brne	.+2      	; 0x1cd4 <main+0xa6>
    1cd2:	85 c0       	rjmp	.+266    	; 0x1dde <main+0x1b0>
    1cd4:	23 96       	adiw	r28, 0x03	; 3
    1cd6:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cd8:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cda:	23 97       	sbiw	r28, 0x03	; 3
    1cdc:	23 33       	cpi	r18, 0x33	; 51
    1cde:	31 05       	cpc	r19, r1
    1ce0:	8c f4       	brge	.+34     	; 0x1d04 <main+0xd6>
    1ce2:	23 96       	adiw	r28, 0x03	; 3
    1ce4:	8e ad       	ldd	r24, Y+62	; 0x3e
    1ce6:	9f ad       	ldd	r25, Y+63	; 0x3f
    1ce8:	23 97       	sbiw	r28, 0x03	; 3
    1cea:	80 33       	cpi	r24, 0x30	; 48
    1cec:	91 05       	cpc	r25, r1
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <main+0xc4>
    1cf0:	4b c0       	rjmp	.+150    	; 0x1d88 <main+0x15a>
    1cf2:	23 96       	adiw	r28, 0x03	; 3
    1cf4:	2e ad       	ldd	r18, Y+62	; 0x3e
    1cf6:	3f ad       	ldd	r19, Y+63	; 0x3f
    1cf8:	23 97       	sbiw	r28, 0x03	; 3
    1cfa:	21 33       	cpi	r18, 0x31	; 49
    1cfc:	31 05       	cpc	r19, r1
    1cfe:	09 f4       	brne	.+2      	; 0x1d02 <main+0xd4>
    1d00:	58 c0       	rjmp	.+176    	; 0x1db2 <main+0x184>
    1d02:	24 c1       	rjmp	.+584    	; 0x1f4c <main+0x31e>
    1d04:	23 96       	adiw	r28, 0x03	; 3
    1d06:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d08:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d0a:	23 97       	sbiw	r28, 0x03	; 3
    1d0c:	83 33       	cpi	r24, 0x33	; 51
    1d0e:	91 05       	cpc	r25, r1
    1d10:	09 f4       	brne	.+2      	; 0x1d14 <main+0xe6>
    1d12:	7b c0       	rjmp	.+246    	; 0x1e0a <main+0x1dc>
    1d14:	23 96       	adiw	r28, 0x03	; 3
    1d16:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d18:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d1a:	23 97       	sbiw	r28, 0x03	; 3
    1d1c:	24 33       	cpi	r18, 0x34	; 52
    1d1e:	31 05       	cpc	r19, r1
    1d20:	09 f4       	brne	.+2      	; 0x1d24 <main+0xf6>
    1d22:	89 c0       	rjmp	.+274    	; 0x1e36 <main+0x208>
    1d24:	13 c1       	rjmp	.+550    	; 0x1f4c <main+0x31e>
    1d26:	23 96       	adiw	r28, 0x03	; 3
    1d28:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d2a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d2c:	23 97       	sbiw	r28, 0x03	; 3
    1d2e:	88 33       	cpi	r24, 0x38	; 56
    1d30:	91 05       	cpc	r25, r1
    1d32:	09 f4       	brne	.+2      	; 0x1d36 <main+0x108>
    1d34:	d8 c0       	rjmp	.+432    	; 0x1ee6 <main+0x2b8>
    1d36:	23 96       	adiw	r28, 0x03	; 3
    1d38:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d3a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d3c:	23 97       	sbiw	r28, 0x03	; 3
    1d3e:	29 33       	cpi	r18, 0x39	; 57
    1d40:	31 05       	cpc	r19, r1
    1d42:	8c f4       	brge	.+34     	; 0x1d66 <main+0x138>
    1d44:	23 96       	adiw	r28, 0x03	; 3
    1d46:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d48:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d4a:	23 97       	sbiw	r28, 0x03	; 3
    1d4c:	86 33       	cpi	r24, 0x36	; 54
    1d4e:	91 05       	cpc	r25, r1
    1d50:	09 f4       	brne	.+2      	; 0x1d54 <main+0x126>
    1d52:	9d c0       	rjmp	.+314    	; 0x1e8e <main+0x260>
    1d54:	23 96       	adiw	r28, 0x03	; 3
    1d56:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d58:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d5a:	23 97       	sbiw	r28, 0x03	; 3
    1d5c:	27 33       	cpi	r18, 0x37	; 55
    1d5e:	31 05       	cpc	r19, r1
    1d60:	09 f4       	brne	.+2      	; 0x1d64 <main+0x136>
    1d62:	ab c0       	rjmp	.+342    	; 0x1eba <main+0x28c>
    1d64:	f3 c0       	rjmp	.+486    	; 0x1f4c <main+0x31e>
    1d66:	23 96       	adiw	r28, 0x03	; 3
    1d68:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d6a:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d6c:	23 97       	sbiw	r28, 0x03	; 3
    1d6e:	89 33       	cpi	r24, 0x39	; 57
    1d70:	91 05       	cpc	r25, r1
    1d72:	09 f4       	brne	.+2      	; 0x1d76 <main+0x148>
    1d74:	ce c0       	rjmp	.+412    	; 0x1f12 <main+0x2e4>
    1d76:	23 96       	adiw	r28, 0x03	; 3
    1d78:	2e ad       	ldd	r18, Y+62	; 0x3e
    1d7a:	3f ad       	ldd	r19, Y+63	; 0x3f
    1d7c:	23 97       	sbiw	r28, 0x03	; 3
    1d7e:	23 34       	cpi	r18, 0x43	; 67
    1d80:	31 05       	cpc	r19, r1
    1d82:	09 f4       	brne	.+2      	; 0x1d86 <main+0x158>
    1d84:	dc c0       	rjmp	.+440    	; 0x1f3e <main+0x310>
    1d86:	e2 c0       	rjmp	.+452    	; 0x1f4c <main+0x31e>
			{
			case '0' :NUM=0;ID1=(ID1*10)+NUM;break;
    1d88:	1f ae       	std	Y+63, r1	; 0x3f
    1d8a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1d8c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1d8e:	9c 01       	movw	r18, r24
    1d90:	22 0f       	add	r18, r18
    1d92:	33 1f       	adc	r19, r19
    1d94:	c9 01       	movw	r24, r18
    1d96:	88 0f       	add	r24, r24
    1d98:	99 1f       	adc	r25, r25
    1d9a:	88 0f       	add	r24, r24
    1d9c:	99 1f       	adc	r25, r25
    1d9e:	28 0f       	add	r18, r24
    1da0:	39 1f       	adc	r19, r25
    1da2:	8f ad       	ldd	r24, Y+63	; 0x3f
    1da4:	88 2f       	mov	r24, r24
    1da6:	90 e0       	ldi	r25, 0x00	; 0
    1da8:	82 0f       	add	r24, r18
    1daa:	93 1f       	adc	r25, r19
    1dac:	9c af       	std	Y+60, r25	; 0x3c
    1dae:	8b af       	std	Y+59, r24	; 0x3b
    1db0:	cd c0       	rjmp	.+410    	; 0x1f4c <main+0x31e>
			case '1' :NUM=1;ID1=(ID1*10)+NUM;break;
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	8f af       	std	Y+63, r24	; 0x3f
    1db6:	8b ad       	ldd	r24, Y+59	; 0x3b
    1db8:	9c ad       	ldd	r25, Y+60	; 0x3c
    1dba:	9c 01       	movw	r18, r24
    1dbc:	22 0f       	add	r18, r18
    1dbe:	33 1f       	adc	r19, r19
    1dc0:	c9 01       	movw	r24, r18
    1dc2:	88 0f       	add	r24, r24
    1dc4:	99 1f       	adc	r25, r25
    1dc6:	88 0f       	add	r24, r24
    1dc8:	99 1f       	adc	r25, r25
    1dca:	28 0f       	add	r18, r24
    1dcc:	39 1f       	adc	r19, r25
    1dce:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dd0:	88 2f       	mov	r24, r24
    1dd2:	90 e0       	ldi	r25, 0x00	; 0
    1dd4:	82 0f       	add	r24, r18
    1dd6:	93 1f       	adc	r25, r19
    1dd8:	9c af       	std	Y+60, r25	; 0x3c
    1dda:	8b af       	std	Y+59, r24	; 0x3b
    1ddc:	b7 c0       	rjmp	.+366    	; 0x1f4c <main+0x31e>
			case '2' :NUM=2;ID1=(ID1*10)+NUM;break;
    1dde:	82 e0       	ldi	r24, 0x02	; 2
    1de0:	8f af       	std	Y+63, r24	; 0x3f
    1de2:	8b ad       	ldd	r24, Y+59	; 0x3b
    1de4:	9c ad       	ldd	r25, Y+60	; 0x3c
    1de6:	9c 01       	movw	r18, r24
    1de8:	22 0f       	add	r18, r18
    1dea:	33 1f       	adc	r19, r19
    1dec:	c9 01       	movw	r24, r18
    1dee:	88 0f       	add	r24, r24
    1df0:	99 1f       	adc	r25, r25
    1df2:	88 0f       	add	r24, r24
    1df4:	99 1f       	adc	r25, r25
    1df6:	28 0f       	add	r18, r24
    1df8:	39 1f       	adc	r19, r25
    1dfa:	8f ad       	ldd	r24, Y+63	; 0x3f
    1dfc:	88 2f       	mov	r24, r24
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	82 0f       	add	r24, r18
    1e02:	93 1f       	adc	r25, r19
    1e04:	9c af       	std	Y+60, r25	; 0x3c
    1e06:	8b af       	std	Y+59, r24	; 0x3b
    1e08:	a1 c0       	rjmp	.+322    	; 0x1f4c <main+0x31e>
			case '3' :NUM=3;ID1=(ID1*10)+NUM;break;
    1e0a:	83 e0       	ldi	r24, 0x03	; 3
    1e0c:	8f af       	std	Y+63, r24	; 0x3f
    1e0e:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e10:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e12:	9c 01       	movw	r18, r24
    1e14:	22 0f       	add	r18, r18
    1e16:	33 1f       	adc	r19, r19
    1e18:	c9 01       	movw	r24, r18
    1e1a:	88 0f       	add	r24, r24
    1e1c:	99 1f       	adc	r25, r25
    1e1e:	88 0f       	add	r24, r24
    1e20:	99 1f       	adc	r25, r25
    1e22:	28 0f       	add	r18, r24
    1e24:	39 1f       	adc	r19, r25
    1e26:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e28:	88 2f       	mov	r24, r24
    1e2a:	90 e0       	ldi	r25, 0x00	; 0
    1e2c:	82 0f       	add	r24, r18
    1e2e:	93 1f       	adc	r25, r19
    1e30:	9c af       	std	Y+60, r25	; 0x3c
    1e32:	8b af       	std	Y+59, r24	; 0x3b
    1e34:	8b c0       	rjmp	.+278    	; 0x1f4c <main+0x31e>
			case '4' :NUM=4;ID1=(ID1*10)+NUM;break;
    1e36:	84 e0       	ldi	r24, 0x04	; 4
    1e38:	8f af       	std	Y+63, r24	; 0x3f
    1e3a:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e3c:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e3e:	9c 01       	movw	r18, r24
    1e40:	22 0f       	add	r18, r18
    1e42:	33 1f       	adc	r19, r19
    1e44:	c9 01       	movw	r24, r18
    1e46:	88 0f       	add	r24, r24
    1e48:	99 1f       	adc	r25, r25
    1e4a:	88 0f       	add	r24, r24
    1e4c:	99 1f       	adc	r25, r25
    1e4e:	28 0f       	add	r18, r24
    1e50:	39 1f       	adc	r19, r25
    1e52:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e54:	88 2f       	mov	r24, r24
    1e56:	90 e0       	ldi	r25, 0x00	; 0
    1e58:	82 0f       	add	r24, r18
    1e5a:	93 1f       	adc	r25, r19
    1e5c:	9c af       	std	Y+60, r25	; 0x3c
    1e5e:	8b af       	std	Y+59, r24	; 0x3b
    1e60:	75 c0       	rjmp	.+234    	; 0x1f4c <main+0x31e>
			case '5' :NUM=5;ID1=(ID1*10)+NUM;break;
    1e62:	85 e0       	ldi	r24, 0x05	; 5
    1e64:	8f af       	std	Y+63, r24	; 0x3f
    1e66:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e68:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e6a:	9c 01       	movw	r18, r24
    1e6c:	22 0f       	add	r18, r18
    1e6e:	33 1f       	adc	r19, r19
    1e70:	c9 01       	movw	r24, r18
    1e72:	88 0f       	add	r24, r24
    1e74:	99 1f       	adc	r25, r25
    1e76:	88 0f       	add	r24, r24
    1e78:	99 1f       	adc	r25, r25
    1e7a:	28 0f       	add	r18, r24
    1e7c:	39 1f       	adc	r19, r25
    1e7e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1e80:	88 2f       	mov	r24, r24
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	82 0f       	add	r24, r18
    1e86:	93 1f       	adc	r25, r19
    1e88:	9c af       	std	Y+60, r25	; 0x3c
    1e8a:	8b af       	std	Y+59, r24	; 0x3b
    1e8c:	5f c0       	rjmp	.+190    	; 0x1f4c <main+0x31e>
			case '6' :NUM=6;ID1=(ID1*10)+NUM;break;
    1e8e:	86 e0       	ldi	r24, 0x06	; 6
    1e90:	8f af       	std	Y+63, r24	; 0x3f
    1e92:	8b ad       	ldd	r24, Y+59	; 0x3b
    1e94:	9c ad       	ldd	r25, Y+60	; 0x3c
    1e96:	9c 01       	movw	r18, r24
    1e98:	22 0f       	add	r18, r18
    1e9a:	33 1f       	adc	r19, r19
    1e9c:	c9 01       	movw	r24, r18
    1e9e:	88 0f       	add	r24, r24
    1ea0:	99 1f       	adc	r25, r25
    1ea2:	88 0f       	add	r24, r24
    1ea4:	99 1f       	adc	r25, r25
    1ea6:	28 0f       	add	r18, r24
    1ea8:	39 1f       	adc	r19, r25
    1eaa:	8f ad       	ldd	r24, Y+63	; 0x3f
    1eac:	88 2f       	mov	r24, r24
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	82 0f       	add	r24, r18
    1eb2:	93 1f       	adc	r25, r19
    1eb4:	9c af       	std	Y+60, r25	; 0x3c
    1eb6:	8b af       	std	Y+59, r24	; 0x3b
    1eb8:	49 c0       	rjmp	.+146    	; 0x1f4c <main+0x31e>
			case '7' :NUM=7;ID1=(ID1*10)+NUM;break;
    1eba:	87 e0       	ldi	r24, 0x07	; 7
    1ebc:	8f af       	std	Y+63, r24	; 0x3f
    1ebe:	8b ad       	ldd	r24, Y+59	; 0x3b
    1ec0:	9c ad       	ldd	r25, Y+60	; 0x3c
    1ec2:	9c 01       	movw	r18, r24
    1ec4:	22 0f       	add	r18, r18
    1ec6:	33 1f       	adc	r19, r19
    1ec8:	c9 01       	movw	r24, r18
    1eca:	88 0f       	add	r24, r24
    1ecc:	99 1f       	adc	r25, r25
    1ece:	88 0f       	add	r24, r24
    1ed0:	99 1f       	adc	r25, r25
    1ed2:	28 0f       	add	r18, r24
    1ed4:	39 1f       	adc	r19, r25
    1ed6:	8f ad       	ldd	r24, Y+63	; 0x3f
    1ed8:	88 2f       	mov	r24, r24
    1eda:	90 e0       	ldi	r25, 0x00	; 0
    1edc:	82 0f       	add	r24, r18
    1ede:	93 1f       	adc	r25, r19
    1ee0:	9c af       	std	Y+60, r25	; 0x3c
    1ee2:	8b af       	std	Y+59, r24	; 0x3b
    1ee4:	33 c0       	rjmp	.+102    	; 0x1f4c <main+0x31e>
			case '8' :NUM=8;ID1=(ID1*10)+NUM;break;
    1ee6:	88 e0       	ldi	r24, 0x08	; 8
    1ee8:	8f af       	std	Y+63, r24	; 0x3f
    1eea:	8b ad       	ldd	r24, Y+59	; 0x3b
    1eec:	9c ad       	ldd	r25, Y+60	; 0x3c
    1eee:	9c 01       	movw	r18, r24
    1ef0:	22 0f       	add	r18, r18
    1ef2:	33 1f       	adc	r19, r19
    1ef4:	c9 01       	movw	r24, r18
    1ef6:	88 0f       	add	r24, r24
    1ef8:	99 1f       	adc	r25, r25
    1efa:	88 0f       	add	r24, r24
    1efc:	99 1f       	adc	r25, r25
    1efe:	28 0f       	add	r18, r24
    1f00:	39 1f       	adc	r19, r25
    1f02:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f04:	88 2f       	mov	r24, r24
    1f06:	90 e0       	ldi	r25, 0x00	; 0
    1f08:	82 0f       	add	r24, r18
    1f0a:	93 1f       	adc	r25, r19
    1f0c:	9c af       	std	Y+60, r25	; 0x3c
    1f0e:	8b af       	std	Y+59, r24	; 0x3b
    1f10:	1d c0       	rjmp	.+58     	; 0x1f4c <main+0x31e>
			case '9' :NUM=9;ID1=(ID1*10)+NUM;break;
    1f12:	89 e0       	ldi	r24, 0x09	; 9
    1f14:	8f af       	std	Y+63, r24	; 0x3f
    1f16:	8b ad       	ldd	r24, Y+59	; 0x3b
    1f18:	9c ad       	ldd	r25, Y+60	; 0x3c
    1f1a:	9c 01       	movw	r18, r24
    1f1c:	22 0f       	add	r18, r18
    1f1e:	33 1f       	adc	r19, r19
    1f20:	c9 01       	movw	r24, r18
    1f22:	88 0f       	add	r24, r24
    1f24:	99 1f       	adc	r25, r25
    1f26:	88 0f       	add	r24, r24
    1f28:	99 1f       	adc	r25, r25
    1f2a:	28 0f       	add	r18, r24
    1f2c:	39 1f       	adc	r19, r25
    1f2e:	8f ad       	ldd	r24, Y+63	; 0x3f
    1f30:	88 2f       	mov	r24, r24
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	82 0f       	add	r24, r18
    1f36:	93 1f       	adc	r25, r19
    1f38:	9c af       	std	Y+60, r25	; 0x3c
    1f3a:	8b af       	std	Y+59, r24	; 0x3b
    1f3c:	07 c0       	rjmp	.+14     	; 0x1f4c <main+0x31e>
			case 'C':LCD_voidClear();ID1=0;ID2=0;NUM=0;break;
    1f3e:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_voidClear>
    1f42:	1c ae       	std	Y+60, r1	; 0x3c
    1f44:	1b ae       	std	Y+59, r1	; 0x3b
    1f46:	1a ae       	std	Y+58, r1	; 0x3a
    1f48:	19 ae       	std	Y+57, r1	; 0x39
    1f4a:	1f ae       	std	Y+63, r1	; 0x3f
			default:break;
			}

			if(Local_variable == '=')
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e0 5c       	subi	r30, 0xC0	; 192
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	80 81       	ld	r24, Z
    1f54:	8d 33       	cpi	r24, 0x3D	; 61
    1f56:	09 f0       	breq	.+2      	; 0x1f5a <main+0x32c>
    1f58:	84 ce       	rjmp	.-760    	; 0x1c62 <main+0x34>
			{
				LCD_voidClear();
    1f5a:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_voidClear>
    1f5e:	80 e0       	ldi	r24, 0x00	; 0
    1f60:	90 e0       	ldi	r25, 0x00	; 0
    1f62:	aa e7       	ldi	r26, 0x7A	; 122
    1f64:	b4 e4       	ldi	r27, 0x44	; 68
    1f66:	8d ab       	std	Y+53, r24	; 0x35
    1f68:	9e ab       	std	Y+54, r25	; 0x36
    1f6a:	af ab       	std	Y+55, r26	; 0x37
    1f6c:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f6e:	6d a9       	ldd	r22, Y+53	; 0x35
    1f70:	7e a9       	ldd	r23, Y+54	; 0x36
    1f72:	8f a9       	ldd	r24, Y+55	; 0x37
    1f74:	98 ad       	ldd	r25, Y+56	; 0x38
    1f76:	20 e0       	ldi	r18, 0x00	; 0
    1f78:	30 e0       	ldi	r19, 0x00	; 0
    1f7a:	4a ef       	ldi	r20, 0xFA	; 250
    1f7c:	54 e4       	ldi	r21, 0x44	; 68
    1f7e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f82:	dc 01       	movw	r26, r24
    1f84:	cb 01       	movw	r24, r22
    1f86:	89 ab       	std	Y+49, r24	; 0x31
    1f88:	9a ab       	std	Y+50, r25	; 0x32
    1f8a:	ab ab       	std	Y+51, r26	; 0x33
    1f8c:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1f8e:	69 a9       	ldd	r22, Y+49	; 0x31
    1f90:	7a a9       	ldd	r23, Y+50	; 0x32
    1f92:	8b a9       	ldd	r24, Y+51	; 0x33
    1f94:	9c a9       	ldd	r25, Y+52	; 0x34
    1f96:	20 e0       	ldi	r18, 0x00	; 0
    1f98:	30 e0       	ldi	r19, 0x00	; 0
    1f9a:	40 e8       	ldi	r20, 0x80	; 128
    1f9c:	5f e3       	ldi	r21, 0x3F	; 63
    1f9e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    1fa2:	88 23       	and	r24, r24
    1fa4:	2c f4       	brge	.+10     	; 0x1fb0 <main+0x382>
		__ticks = 1;
    1fa6:	81 e0       	ldi	r24, 0x01	; 1
    1fa8:	90 e0       	ldi	r25, 0x00	; 0
    1faa:	98 ab       	std	Y+48, r25	; 0x30
    1fac:	8f a7       	std	Y+47, r24	; 0x2f
    1fae:	3f c0       	rjmp	.+126    	; 0x202e <main+0x400>
	else if (__tmp > 65535)
    1fb0:	69 a9       	ldd	r22, Y+49	; 0x31
    1fb2:	7a a9       	ldd	r23, Y+50	; 0x32
    1fb4:	8b a9       	ldd	r24, Y+51	; 0x33
    1fb6:	9c a9       	ldd	r25, Y+52	; 0x34
    1fb8:	20 e0       	ldi	r18, 0x00	; 0
    1fba:	3f ef       	ldi	r19, 0xFF	; 255
    1fbc:	4f e7       	ldi	r20, 0x7F	; 127
    1fbe:	57 e4       	ldi	r21, 0x47	; 71
    1fc0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    1fc4:	18 16       	cp	r1, r24
    1fc6:	4c f5       	brge	.+82     	; 0x201a <main+0x3ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fc8:	6d a9       	ldd	r22, Y+53	; 0x35
    1fca:	7e a9       	ldd	r23, Y+54	; 0x36
    1fcc:	8f a9       	ldd	r24, Y+55	; 0x37
    1fce:	98 ad       	ldd	r25, Y+56	; 0x38
    1fd0:	20 e0       	ldi	r18, 0x00	; 0
    1fd2:	30 e0       	ldi	r19, 0x00	; 0
    1fd4:	40 e2       	ldi	r20, 0x20	; 32
    1fd6:	51 e4       	ldi	r21, 0x41	; 65
    1fd8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fdc:	dc 01       	movw	r26, r24
    1fde:	cb 01       	movw	r24, r22
    1fe0:	bc 01       	movw	r22, r24
    1fe2:	cd 01       	movw	r24, r26
    1fe4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fe8:	dc 01       	movw	r26, r24
    1fea:	cb 01       	movw	r24, r22
    1fec:	98 ab       	std	Y+48, r25	; 0x30
    1fee:	8f a7       	std	Y+47, r24	; 0x2f
    1ff0:	0f c0       	rjmp	.+30     	; 0x2010 <main+0x3e2>
    1ff2:	88 ec       	ldi	r24, 0xC8	; 200
    1ff4:	90 e0       	ldi	r25, 0x00	; 0
    1ff6:	9e a7       	std	Y+46, r25	; 0x2e
    1ff8:	8d a7       	std	Y+45, r24	; 0x2d
    1ffa:	8d a5       	ldd	r24, Y+45	; 0x2d
    1ffc:	9e a5       	ldd	r25, Y+46	; 0x2e
    1ffe:	01 97       	sbiw	r24, 0x01	; 1
    2000:	f1 f7       	brne	.-4      	; 0x1ffe <main+0x3d0>
    2002:	9e a7       	std	Y+46, r25	; 0x2e
    2004:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2006:	8f a5       	ldd	r24, Y+47	; 0x2f
    2008:	98 a9       	ldd	r25, Y+48	; 0x30
    200a:	01 97       	sbiw	r24, 0x01	; 1
    200c:	98 ab       	std	Y+48, r25	; 0x30
    200e:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2010:	8f a5       	ldd	r24, Y+47	; 0x2f
    2012:	98 a9       	ldd	r25, Y+48	; 0x30
    2014:	00 97       	sbiw	r24, 0x00	; 0
    2016:	69 f7       	brne	.-38     	; 0x1ff2 <main+0x3c4>
    2018:	14 c0       	rjmp	.+40     	; 0x2042 <main+0x414>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    201a:	69 a9       	ldd	r22, Y+49	; 0x31
    201c:	7a a9       	ldd	r23, Y+50	; 0x32
    201e:	8b a9       	ldd	r24, Y+51	; 0x33
    2020:	9c a9       	ldd	r25, Y+52	; 0x34
    2022:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2026:	dc 01       	movw	r26, r24
    2028:	cb 01       	movw	r24, r22
    202a:	98 ab       	std	Y+48, r25	; 0x30
    202c:	8f a7       	std	Y+47, r24	; 0x2f
    202e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2030:	98 a9       	ldd	r25, Y+48	; 0x30
    2032:	9c a7       	std	Y+44, r25	; 0x2c
    2034:	8b a7       	std	Y+43, r24	; 0x2b
    2036:	8b a5       	ldd	r24, Y+43	; 0x2b
    2038:	9c a5       	ldd	r25, Y+44	; 0x2c
    203a:	01 97       	sbiw	r24, 0x01	; 1
    203c:	f1 f7       	brne	.-4      	; 0x203a <main+0x40c>
    203e:	9c a7       	std	Y+44, r25	; 0x2c
    2040:	8b a7       	std	Y+43, r24	; 0x2b
				_delay_ms(1000);
				if(ID1==PASS){DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_HIGH);LCD_voidSendString("come on in");_delay_ms(10000);DIO_u8SetPinValue(DIO_u8_PORTA,DIO_u8_PIN3,DIO_u8_LOW);LCD_voidSendCmd(0b00001000);break;}
    2042:	8b ad       	ldd	r24, Y+59	; 0x3b
    2044:	9c ad       	ldd	r25, Y+60	; 0x3c
    2046:	32 e0       	ldi	r19, 0x02	; 2
    2048:	8b 32       	cpi	r24, 0x2B	; 43
    204a:	93 07       	cpc	r25, r19
    204c:	09 f0       	breq	.+2      	; 0x2050 <main+0x422>
    204e:	84 c0       	rjmp	.+264    	; 0x2158 <main+0x52a>
    2050:	80 e0       	ldi	r24, 0x00	; 0
    2052:	63 e0       	ldi	r22, 0x03	; 3
    2054:	41 e0       	ldi	r20, 0x01	; 1
    2056:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    205a:	80 e7       	ldi	r24, 0x70	; 112
    205c:	90 e0       	ldi	r25, 0x00	; 0
    205e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_voidSendString>
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e4       	ldi	r25, 0x40	; 64
    2066:	ac e1       	ldi	r26, 0x1C	; 28
    2068:	b6 e4       	ldi	r27, 0x46	; 70
    206a:	8f a3       	std	Y+39, r24	; 0x27
    206c:	98 a7       	std	Y+40, r25	; 0x28
    206e:	a9 a7       	std	Y+41, r26	; 0x29
    2070:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	6f a1       	ldd	r22, Y+39	; 0x27
    2074:	78 a5       	ldd	r23, Y+40	; 0x28
    2076:	89 a5       	ldd	r24, Y+41	; 0x29
    2078:	9a a5       	ldd	r25, Y+42	; 0x2a
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4a ef       	ldi	r20, 0xFA	; 250
    2080:	54 e4       	ldi	r21, 0x44	; 68
    2082:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	8b a3       	std	Y+35, r24	; 0x23
    208c:	9c a3       	std	Y+36, r25	; 0x24
    208e:	ad a3       	std	Y+37, r26	; 0x25
    2090:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2092:	6b a1       	ldd	r22, Y+35	; 0x23
    2094:	7c a1       	ldd	r23, Y+36	; 0x24
    2096:	8d a1       	ldd	r24, Y+37	; 0x25
    2098:	9e a1       	ldd	r25, Y+38	; 0x26
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <main+0x486>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9a a3       	std	Y+34, r25	; 0x22
    20b0:	89 a3       	std	Y+33, r24	; 0x21
    20b2:	3f c0       	rjmp	.+126    	; 0x2132 <main+0x504>
	else if (__tmp > 65535)
    20b4:	6b a1       	ldd	r22, Y+35	; 0x23
    20b6:	7c a1       	ldd	r23, Y+36	; 0x24
    20b8:	8d a1       	ldd	r24, Y+37	; 0x25
    20ba:	9e a1       	ldd	r25, Y+38	; 0x26
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	3f ef       	ldi	r19, 0xFF	; 255
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	57 e4       	ldi	r21, 0x47	; 71
    20c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	4c f5       	brge	.+82     	; 0x211e <main+0x4f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	6f a1       	ldd	r22, Y+39	; 0x27
    20ce:	78 a5       	ldd	r23, Y+40	; 0x28
    20d0:	89 a5       	ldd	r24, Y+41	; 0x29
    20d2:	9a a5       	ldd	r25, Y+42	; 0x2a
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e2       	ldi	r20, 0x20	; 32
    20da:	51 e4       	ldi	r21, 0x41	; 65
    20dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9a a3       	std	Y+34, r25	; 0x22
    20f2:	89 a3       	std	Y+33, r24	; 0x21
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <main+0x4e6>
    20f6:	88 ec       	ldi	r24, 0xC8	; 200
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	98 a3       	std	Y+32, r25	; 0x20
    20fc:	8f 8f       	std	Y+31, r24	; 0x1f
    20fe:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2100:	98 a1       	ldd	r25, Y+32	; 0x20
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <main+0x4d4>
    2106:	98 a3       	std	Y+32, r25	; 0x20
    2108:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	89 a1       	ldd	r24, Y+33	; 0x21
    210c:	9a a1       	ldd	r25, Y+34	; 0x22
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9a a3       	std	Y+34, r25	; 0x22
    2112:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	89 a1       	ldd	r24, Y+33	; 0x21
    2116:	9a a1       	ldd	r25, Y+34	; 0x22
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <main+0x4c8>
    211c:	14 c0       	rjmp	.+40     	; 0x2146 <main+0x518>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	6b a1       	ldd	r22, Y+35	; 0x23
    2120:	7c a1       	ldd	r23, Y+36	; 0x24
    2122:	8d a1       	ldd	r24, Y+37	; 0x25
    2124:	9e a1       	ldd	r25, Y+38	; 0x26
    2126:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9a a3       	std	Y+34, r25	; 0x22
    2130:	89 a3       	std	Y+33, r24	; 0x21
    2132:	89 a1       	ldd	r24, Y+33	; 0x21
    2134:	9a a1       	ldd	r25, Y+34	; 0x22
    2136:	9e 8f       	std	Y+30, r25	; 0x1e
    2138:	8d 8f       	std	Y+29, r24	; 0x1d
    213a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    213c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <main+0x510>
    2142:	9e 8f       	std	Y+30, r25	; 0x1e
    2144:	8d 8f       	std	Y+29, r24	; 0x1d
    2146:	80 e0       	ldi	r24, 0x00	; 0
    2148:	63 e0       	ldi	r22, 0x03	; 3
    214a:	40 e0       	ldi	r20, 0x00	; 0
    214c:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2150:	88 e0       	ldi	r24, 0x08	; 8
    2152:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
    2156:	13 c1       	rjmp	.+550    	; 0x237e <main+0x750>
				else {counter--;
    2158:	8e ad       	ldd	r24, Y+62	; 0x3e
    215a:	81 50       	subi	r24, 0x01	; 1
    215c:	8e af       	std	Y+62, r24	; 0x3e
				if(counter==0){LCD_voidSendString("wrong pass");_delay_ms(10000);LCD_voidSendCmd(0b00001000);DIO_u8SetPinValue(DIO_u8_PORTD,DIO_u8_PIN0,DIO_u8_HIGH);LED_voidBlink();DIO_Init();break;}
    215e:	8e ad       	ldd	r24, Y+62	; 0x3e
    2160:	88 23       	and	r24, r24
    2162:	09 f0       	breq	.+2      	; 0x2166 <main+0x538>
    2164:	83 c0       	rjmp	.+262    	; 0x226c <main+0x63e>
    2166:	8b e7       	ldi	r24, 0x7B	; 123
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_voidSendString>
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	90 e4       	ldi	r25, 0x40	; 64
    2172:	ac e1       	ldi	r26, 0x1C	; 28
    2174:	b6 e4       	ldi	r27, 0x46	; 70
    2176:	89 8f       	std	Y+25, r24	; 0x19
    2178:	9a 8f       	std	Y+26, r25	; 0x1a
    217a:	ab 8f       	std	Y+27, r26	; 0x1b
    217c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    217e:	69 8d       	ldd	r22, Y+25	; 0x19
    2180:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2182:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2184:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	4a ef       	ldi	r20, 0xFA	; 250
    218c:	54 e4       	ldi	r21, 0x44	; 68
    218e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2192:	dc 01       	movw	r26, r24
    2194:	cb 01       	movw	r24, r22
    2196:	8d 8b       	std	Y+21, r24	; 0x15
    2198:	9e 8b       	std	Y+22, r25	; 0x16
    219a:	af 8b       	std	Y+23, r26	; 0x17
    219c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    219e:	6d 89       	ldd	r22, Y+21	; 0x15
    21a0:	7e 89       	ldd	r23, Y+22	; 0x16
    21a2:	8f 89       	ldd	r24, Y+23	; 0x17
    21a4:	98 8d       	ldd	r25, Y+24	; 0x18
    21a6:	20 e0       	ldi	r18, 0x00	; 0
    21a8:	30 e0       	ldi	r19, 0x00	; 0
    21aa:	40 e8       	ldi	r20, 0x80	; 128
    21ac:	5f e3       	ldi	r21, 0x3F	; 63
    21ae:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    21b2:	88 23       	and	r24, r24
    21b4:	2c f4       	brge	.+10     	; 0x21c0 <main+0x592>
		__ticks = 1;
    21b6:	81 e0       	ldi	r24, 0x01	; 1
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 8b       	std	Y+20, r25	; 0x14
    21bc:	8b 8b       	std	Y+19, r24	; 0x13
    21be:	3f c0       	rjmp	.+126    	; 0x223e <main+0x610>
	else if (__tmp > 65535)
    21c0:	6d 89       	ldd	r22, Y+21	; 0x15
    21c2:	7e 89       	ldd	r23, Y+22	; 0x16
    21c4:	8f 89       	ldd	r24, Y+23	; 0x17
    21c6:	98 8d       	ldd	r25, Y+24	; 0x18
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	3f ef       	ldi	r19, 0xFF	; 255
    21cc:	4f e7       	ldi	r20, 0x7F	; 127
    21ce:	57 e4       	ldi	r21, 0x47	; 71
    21d0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    21d4:	18 16       	cp	r1, r24
    21d6:	4c f5       	brge	.+82     	; 0x222a <main+0x5fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21d8:	69 8d       	ldd	r22, Y+25	; 0x19
    21da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    21dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    21de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    21e0:	20 e0       	ldi	r18, 0x00	; 0
    21e2:	30 e0       	ldi	r19, 0x00	; 0
    21e4:	40 e2       	ldi	r20, 0x20	; 32
    21e6:	51 e4       	ldi	r21, 0x41	; 65
    21e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21ec:	dc 01       	movw	r26, r24
    21ee:	cb 01       	movw	r24, r22
    21f0:	bc 01       	movw	r22, r24
    21f2:	cd 01       	movw	r24, r26
    21f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21f8:	dc 01       	movw	r26, r24
    21fa:	cb 01       	movw	r24, r22
    21fc:	9c 8b       	std	Y+20, r25	; 0x14
    21fe:	8b 8b       	std	Y+19, r24	; 0x13
    2200:	0f c0       	rjmp	.+30     	; 0x2220 <main+0x5f2>
    2202:	88 ec       	ldi	r24, 0xC8	; 200
    2204:	90 e0       	ldi	r25, 0x00	; 0
    2206:	9a 8b       	std	Y+18, r25	; 0x12
    2208:	89 8b       	std	Y+17, r24	; 0x11
    220a:	89 89       	ldd	r24, Y+17	; 0x11
    220c:	9a 89       	ldd	r25, Y+18	; 0x12
    220e:	01 97       	sbiw	r24, 0x01	; 1
    2210:	f1 f7       	brne	.-4      	; 0x220e <main+0x5e0>
    2212:	9a 8b       	std	Y+18, r25	; 0x12
    2214:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2216:	8b 89       	ldd	r24, Y+19	; 0x13
    2218:	9c 89       	ldd	r25, Y+20	; 0x14
    221a:	01 97       	sbiw	r24, 0x01	; 1
    221c:	9c 8b       	std	Y+20, r25	; 0x14
    221e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2220:	8b 89       	ldd	r24, Y+19	; 0x13
    2222:	9c 89       	ldd	r25, Y+20	; 0x14
    2224:	00 97       	sbiw	r24, 0x00	; 0
    2226:	69 f7       	brne	.-38     	; 0x2202 <main+0x5d4>
    2228:	14 c0       	rjmp	.+40     	; 0x2252 <main+0x624>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    222a:	6d 89       	ldd	r22, Y+21	; 0x15
    222c:	7e 89       	ldd	r23, Y+22	; 0x16
    222e:	8f 89       	ldd	r24, Y+23	; 0x17
    2230:	98 8d       	ldd	r25, Y+24	; 0x18
    2232:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2236:	dc 01       	movw	r26, r24
    2238:	cb 01       	movw	r24, r22
    223a:	9c 8b       	std	Y+20, r25	; 0x14
    223c:	8b 8b       	std	Y+19, r24	; 0x13
    223e:	8b 89       	ldd	r24, Y+19	; 0x13
    2240:	9c 89       	ldd	r25, Y+20	; 0x14
    2242:	98 8b       	std	Y+16, r25	; 0x10
    2244:	8f 87       	std	Y+15, r24	; 0x0f
    2246:	8f 85       	ldd	r24, Y+15	; 0x0f
    2248:	98 89       	ldd	r25, Y+16	; 0x10
    224a:	01 97       	sbiw	r24, 0x01	; 1
    224c:	f1 f7       	brne	.-4      	; 0x224a <main+0x61c>
    224e:	98 8b       	std	Y+16, r25	; 0x10
    2250:	8f 87       	std	Y+15, r24	; 0x0f
    2252:	88 e0       	ldi	r24, 0x08	; 8
    2254:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
    2258:	83 e0       	ldi	r24, 0x03	; 3
    225a:	60 e0       	ldi	r22, 0x00	; 0
    225c:	41 e0       	ldi	r20, 0x01	; 1
    225e:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2262:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <LED_voidBlink>
    2266:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_Init>
    226a:	89 c0       	rjmp	.+274    	; 0x237e <main+0x750>
				LCD_voidSendString("wrong pass");
    226c:	8b e7       	ldi	r24, 0x7B	; 123
    226e:	90 e0       	ldi	r25, 0x00	; 0
    2270:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_voidSendString>
				LCD_voidGoToRowColumn(1,0);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	60 e0       	ldi	r22, 0x00	; 0
    2278:	0e 94 13 18 	call	0x3026	; 0x3026 <LCD_voidGoToRowColumn>
				LCD_voidSendNum(counter);
    227c:	8e ad       	ldd	r24, Y+62	; 0x3e
    227e:	88 2f       	mov	r24, r24
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	0e 94 84 18 	call	0x3108	; 0x3108 <LCD_voidSendNum>
				LCD_voidSendString("tries left");
    2286:	86 e8       	ldi	r24, 0x86	; 134
    2288:	90 e0       	ldi	r25, 0x00	; 0
    228a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <LCD_voidSendString>
    228e:	80 e0       	ldi	r24, 0x00	; 0
    2290:	90 e4       	ldi	r25, 0x40	; 64
    2292:	ac e1       	ldi	r26, 0x1C	; 28
    2294:	b6 e4       	ldi	r27, 0x46	; 70
    2296:	8b 87       	std	Y+11, r24	; 0x0b
    2298:	9c 87       	std	Y+12, r25	; 0x0c
    229a:	ad 87       	std	Y+13, r26	; 0x0d
    229c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    229e:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a0:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a2:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a4:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a6:	20 e0       	ldi	r18, 0x00	; 0
    22a8:	30 e0       	ldi	r19, 0x00	; 0
    22aa:	4a ef       	ldi	r20, 0xFA	; 250
    22ac:	54 e4       	ldi	r21, 0x44	; 68
    22ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b2:	dc 01       	movw	r26, r24
    22b4:	cb 01       	movw	r24, r22
    22b6:	8f 83       	std	Y+7, r24	; 0x07
    22b8:	98 87       	std	Y+8, r25	; 0x08
    22ba:	a9 87       	std	Y+9, r26	; 0x09
    22bc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22be:	6f 81       	ldd	r22, Y+7	; 0x07
    22c0:	78 85       	ldd	r23, Y+8	; 0x08
    22c2:	89 85       	ldd	r24, Y+9	; 0x09
    22c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    22c6:	20 e0       	ldi	r18, 0x00	; 0
    22c8:	30 e0       	ldi	r19, 0x00	; 0
    22ca:	40 e8       	ldi	r20, 0x80	; 128
    22cc:	5f e3       	ldi	r21, 0x3F	; 63
    22ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    22d2:	88 23       	and	r24, r24
    22d4:	2c f4       	brge	.+10     	; 0x22e0 <main+0x6b2>
		__ticks = 1;
    22d6:	81 e0       	ldi	r24, 0x01	; 1
    22d8:	90 e0       	ldi	r25, 0x00	; 0
    22da:	9e 83       	std	Y+6, r25	; 0x06
    22dc:	8d 83       	std	Y+5, r24	; 0x05
    22de:	3f c0       	rjmp	.+126    	; 0x235e <main+0x730>
	else if (__tmp > 65535)
    22e0:	6f 81       	ldd	r22, Y+7	; 0x07
    22e2:	78 85       	ldd	r23, Y+8	; 0x08
    22e4:	89 85       	ldd	r24, Y+9	; 0x09
    22e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    22e8:	20 e0       	ldi	r18, 0x00	; 0
    22ea:	3f ef       	ldi	r19, 0xFF	; 255
    22ec:	4f e7       	ldi	r20, 0x7F	; 127
    22ee:	57 e4       	ldi	r21, 0x47	; 71
    22f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    22f4:	18 16       	cp	r1, r24
    22f6:	4c f5       	brge	.+82     	; 0x234a <main+0x71c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f8:	6b 85       	ldd	r22, Y+11	; 0x0b
    22fa:	7c 85       	ldd	r23, Y+12	; 0x0c
    22fc:	8d 85       	ldd	r24, Y+13	; 0x0d
    22fe:	9e 85       	ldd	r25, Y+14	; 0x0e
    2300:	20 e0       	ldi	r18, 0x00	; 0
    2302:	30 e0       	ldi	r19, 0x00	; 0
    2304:	40 e2       	ldi	r20, 0x20	; 32
    2306:	51 e4       	ldi	r21, 0x41	; 65
    2308:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    230c:	dc 01       	movw	r26, r24
    230e:	cb 01       	movw	r24, r22
    2310:	bc 01       	movw	r22, r24
    2312:	cd 01       	movw	r24, r26
    2314:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2318:	dc 01       	movw	r26, r24
    231a:	cb 01       	movw	r24, r22
    231c:	9e 83       	std	Y+6, r25	; 0x06
    231e:	8d 83       	std	Y+5, r24	; 0x05
    2320:	0f c0       	rjmp	.+30     	; 0x2340 <main+0x712>
    2322:	88 ec       	ldi	r24, 0xC8	; 200
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	9c 83       	std	Y+4, r25	; 0x04
    2328:	8b 83       	std	Y+3, r24	; 0x03
    232a:	8b 81       	ldd	r24, Y+3	; 0x03
    232c:	9c 81       	ldd	r25, Y+4	; 0x04
    232e:	01 97       	sbiw	r24, 0x01	; 1
    2330:	f1 f7       	brne	.-4      	; 0x232e <main+0x700>
    2332:	9c 83       	std	Y+4, r25	; 0x04
    2334:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2336:	8d 81       	ldd	r24, Y+5	; 0x05
    2338:	9e 81       	ldd	r25, Y+6	; 0x06
    233a:	01 97       	sbiw	r24, 0x01	; 1
    233c:	9e 83       	std	Y+6, r25	; 0x06
    233e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2340:	8d 81       	ldd	r24, Y+5	; 0x05
    2342:	9e 81       	ldd	r25, Y+6	; 0x06
    2344:	00 97       	sbiw	r24, 0x00	; 0
    2346:	69 f7       	brne	.-38     	; 0x2322 <main+0x6f4>
    2348:	14 c0       	rjmp	.+40     	; 0x2372 <main+0x744>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    234a:	6f 81       	ldd	r22, Y+7	; 0x07
    234c:	78 85       	ldd	r23, Y+8	; 0x08
    234e:	89 85       	ldd	r24, Y+9	; 0x09
    2350:	9a 85       	ldd	r25, Y+10	; 0x0a
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	8d 81       	ldd	r24, Y+5	; 0x05
    2360:	9e 81       	ldd	r25, Y+6	; 0x06
    2362:	9a 83       	std	Y+2, r25	; 0x02
    2364:	89 83       	std	Y+1, r24	; 0x01
    2366:	89 81       	ldd	r24, Y+1	; 0x01
    2368:	9a 81       	ldd	r25, Y+2	; 0x02
    236a:	01 97       	sbiw	r24, 0x01	; 1
    236c:	f1 f7       	brne	.-4      	; 0x236a <main+0x73c>
    236e:	9a 83       	std	Y+2, r25	; 0x02
    2370:	89 83       	std	Y+1, r24	; 0x01
				_delay_ms(10000);
				LCD_voidClear();}
    2372:	0e 94 09 18 	call	0x3012	; 0x3012 <LCD_voidClear>
				ID1=0;NUM=0;
    2376:	1c ae       	std	Y+60, r1	; 0x3c
    2378:	1b ae       	std	Y+59, r1	; 0x3b
    237a:	1f ae       	std	Y+63, r1	; 0x3f
    237c:	72 cc       	rjmp	.-1820   	; 0x1c62 <main+0x34>
			};
		}
	}
	return 0;
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
}
    2382:	ce 5b       	subi	r28, 0xBE	; 190
    2384:	df 4f       	sbci	r29, 0xFF	; 255
    2386:	0f b6       	in	r0, 0x3f	; 63
    2388:	f8 94       	cli
    238a:	de bf       	out	0x3e, r29	; 62
    238c:	0f be       	out	0x3f, r0	; 63
    238e:	cd bf       	out	0x3d, r28	; 61
    2390:	cf 91       	pop	r28
    2392:	df 91       	pop	r29
    2394:	08 95       	ret

00002396 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit(void)
{
    2396:	0f 93       	push	r16
    2398:	1f 93       	push	r17
    239a:	df 93       	push	r29
    239c:	cf 93       	push	r28
    239e:	cd b7       	in	r28, 0x3d	; 61
    23a0:	de b7       	in	r29, 0x3e	; 62
    23a2:	cc 54       	subi	r28, 0x4C	; 76
    23a4:	d0 40       	sbci	r29, 0x00	; 0
    23a6:	0f b6       	in	r0, 0x3f	; 63
    23a8:	f8 94       	cli
    23aa:	de bf       	out	0x3e, r29	; 62
    23ac:	0f be       	out	0x3f, r0	; 63
    23ae:	cd bf       	out	0x3d, r28	; 61
    23b0:	fe 01       	movw	r30, r28
    23b2:	e7 5b       	subi	r30, 0xB7	; 183
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	80 e0       	ldi	r24, 0x00	; 0
    23b8:	90 e0       	ldi	r25, 0x00	; 0
    23ba:	ac e0       	ldi	r26, 0x0C	; 12
    23bc:	b2 e4       	ldi	r27, 0x42	; 66
    23be:	80 83       	st	Z, r24
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	a2 83       	std	Z+2, r26	; 0x02
    23c4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    23c6:	8e 01       	movw	r16, r28
    23c8:	0b 5b       	subi	r16, 0xBB	; 187
    23ca:	1f 4f       	sbci	r17, 0xFF	; 255
    23cc:	fe 01       	movw	r30, r28
    23ce:	e7 5b       	subi	r30, 0xB7	; 183
    23d0:	ff 4f       	sbci	r31, 0xFF	; 255
    23d2:	60 81       	ld	r22, Z
    23d4:	71 81       	ldd	r23, Z+1	; 0x01
    23d6:	82 81       	ldd	r24, Z+2	; 0x02
    23d8:	93 81       	ldd	r25, Z+3	; 0x03
    23da:	20 e0       	ldi	r18, 0x00	; 0
    23dc:	30 e0       	ldi	r19, 0x00	; 0
    23de:	4a ef       	ldi	r20, 0xFA	; 250
    23e0:	54 e4       	ldi	r21, 0x44	; 68
    23e2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23e6:	dc 01       	movw	r26, r24
    23e8:	cb 01       	movw	r24, r22
    23ea:	f8 01       	movw	r30, r16
    23ec:	80 83       	st	Z, r24
    23ee:	91 83       	std	Z+1, r25	; 0x01
    23f0:	a2 83       	std	Z+2, r26	; 0x02
    23f2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23f4:	fe 01       	movw	r30, r28
    23f6:	eb 5b       	subi	r30, 0xBB	; 187
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	60 81       	ld	r22, Z
    23fc:	71 81       	ldd	r23, Z+1	; 0x01
    23fe:	82 81       	ldd	r24, Z+2	; 0x02
    2400:	93 81       	ldd	r25, Z+3	; 0x03
    2402:	20 e0       	ldi	r18, 0x00	; 0
    2404:	30 e0       	ldi	r19, 0x00	; 0
    2406:	40 e8       	ldi	r20, 0x80	; 128
    2408:	5f e3       	ldi	r21, 0x3F	; 63
    240a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    240e:	88 23       	and	r24, r24
    2410:	44 f4       	brge	.+16     	; 0x2422 <LCD_voidInit+0x8c>
		__ticks = 1;
    2412:	fe 01       	movw	r30, r28
    2414:	ed 5b       	subi	r30, 0xBD	; 189
    2416:	ff 4f       	sbci	r31, 0xFF	; 255
    2418:	81 e0       	ldi	r24, 0x01	; 1
    241a:	90 e0       	ldi	r25, 0x00	; 0
    241c:	91 83       	std	Z+1, r25	; 0x01
    241e:	80 83       	st	Z, r24
    2420:	64 c0       	rjmp	.+200    	; 0x24ea <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    2422:	fe 01       	movw	r30, r28
    2424:	eb 5b       	subi	r30, 0xBB	; 187
    2426:	ff 4f       	sbci	r31, 0xFF	; 255
    2428:	60 81       	ld	r22, Z
    242a:	71 81       	ldd	r23, Z+1	; 0x01
    242c:	82 81       	ldd	r24, Z+2	; 0x02
    242e:	93 81       	ldd	r25, Z+3	; 0x03
    2430:	20 e0       	ldi	r18, 0x00	; 0
    2432:	3f ef       	ldi	r19, 0xFF	; 255
    2434:	4f e7       	ldi	r20, 0x7F	; 127
    2436:	57 e4       	ldi	r21, 0x47	; 71
    2438:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    243c:	18 16       	cp	r1, r24
    243e:	0c f0       	brlt	.+2      	; 0x2442 <LCD_voidInit+0xac>
    2440:	43 c0       	rjmp	.+134    	; 0x24c8 <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2442:	fe 01       	movw	r30, r28
    2444:	e7 5b       	subi	r30, 0xB7	; 183
    2446:	ff 4f       	sbci	r31, 0xFF	; 255
    2448:	60 81       	ld	r22, Z
    244a:	71 81       	ldd	r23, Z+1	; 0x01
    244c:	82 81       	ldd	r24, Z+2	; 0x02
    244e:	93 81       	ldd	r25, Z+3	; 0x03
    2450:	20 e0       	ldi	r18, 0x00	; 0
    2452:	30 e0       	ldi	r19, 0x00	; 0
    2454:	40 e2       	ldi	r20, 0x20	; 32
    2456:	51 e4       	ldi	r21, 0x41	; 65
    2458:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    245c:	dc 01       	movw	r26, r24
    245e:	cb 01       	movw	r24, r22
    2460:	8e 01       	movw	r16, r28
    2462:	0d 5b       	subi	r16, 0xBD	; 189
    2464:	1f 4f       	sbci	r17, 0xFF	; 255
    2466:	bc 01       	movw	r22, r24
    2468:	cd 01       	movw	r24, r26
    246a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    246e:	dc 01       	movw	r26, r24
    2470:	cb 01       	movw	r24, r22
    2472:	f8 01       	movw	r30, r16
    2474:	91 83       	std	Z+1, r25	; 0x01
    2476:	80 83       	st	Z, r24
    2478:	1f c0       	rjmp	.+62     	; 0x24b8 <LCD_voidInit+0x122>
    247a:	fe 01       	movw	r30, r28
    247c:	ef 5b       	subi	r30, 0xBF	; 191
    247e:	ff 4f       	sbci	r31, 0xFF	; 255
    2480:	88 ec       	ldi	r24, 0xC8	; 200
    2482:	90 e0       	ldi	r25, 0x00	; 0
    2484:	91 83       	std	Z+1, r25	; 0x01
    2486:	80 83       	st	Z, r24
    2488:	fe 01       	movw	r30, r28
    248a:	ef 5b       	subi	r30, 0xBF	; 191
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	01 97       	sbiw	r24, 0x01	; 1
    2494:	f1 f7       	brne	.-4      	; 0x2492 <LCD_voidInit+0xfc>
    2496:	fe 01       	movw	r30, r28
    2498:	ef 5b       	subi	r30, 0xBF	; 191
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a0:	de 01       	movw	r26, r28
    24a2:	ad 5b       	subi	r26, 0xBD	; 189
    24a4:	bf 4f       	sbci	r27, 0xFF	; 255
    24a6:	fe 01       	movw	r30, r28
    24a8:	ed 5b       	subi	r30, 0xBD	; 189
    24aa:	ff 4f       	sbci	r31, 0xFF	; 255
    24ac:	80 81       	ld	r24, Z
    24ae:	91 81       	ldd	r25, Z+1	; 0x01
    24b0:	01 97       	sbiw	r24, 0x01	; 1
    24b2:	11 96       	adiw	r26, 0x01	; 1
    24b4:	9c 93       	st	X, r25
    24b6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24b8:	fe 01       	movw	r30, r28
    24ba:	ed 5b       	subi	r30, 0xBD	; 189
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	80 81       	ld	r24, Z
    24c0:	91 81       	ldd	r25, Z+1	; 0x01
    24c2:	00 97       	sbiw	r24, 0x00	; 0
    24c4:	d1 f6       	brne	.-76     	; 0x247a <LCD_voidInit+0xe4>
    24c6:	24 c0       	rjmp	.+72     	; 0x2510 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24c8:	8e 01       	movw	r16, r28
    24ca:	0d 5b       	subi	r16, 0xBD	; 189
    24cc:	1f 4f       	sbci	r17, 0xFF	; 255
    24ce:	fe 01       	movw	r30, r28
    24d0:	eb 5b       	subi	r30, 0xBB	; 187
    24d2:	ff 4f       	sbci	r31, 0xFF	; 255
    24d4:	60 81       	ld	r22, Z
    24d6:	71 81       	ldd	r23, Z+1	; 0x01
    24d8:	82 81       	ldd	r24, Z+2	; 0x02
    24da:	93 81       	ldd	r25, Z+3	; 0x03
    24dc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	f8 01       	movw	r30, r16
    24e6:	91 83       	std	Z+1, r25	; 0x01
    24e8:	80 83       	st	Z, r24
    24ea:	fe 01       	movw	r30, r28
    24ec:	ed 5b       	subi	r30, 0xBD	; 189
    24ee:	ff 4f       	sbci	r31, 0xFF	; 255
    24f0:	80 81       	ld	r24, Z
    24f2:	91 81       	ldd	r25, Z+1	; 0x01
    24f4:	fe 01       	movw	r30, r28
    24f6:	ff 96       	adiw	r30, 0x3f	; 63
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
    24fc:	fe 01       	movw	r30, r28
    24fe:	ff 96       	adiw	r30, 0x3f	; 63
    2500:	80 81       	ld	r24, Z
    2502:	91 81       	ldd	r25, Z+1	; 0x01
    2504:	01 97       	sbiw	r24, 0x01	; 1
    2506:	f1 f7       	brne	.-4      	; 0x2504 <LCD_voidInit+0x16e>
    2508:	fe 01       	movw	r30, r28
    250a:	ff 96       	adiw	r30, 0x3f	; 63
    250c:	91 83       	std	Z+1, r25	; 0x01
    250e:	80 83       	st	Z, r24
	_delay_ms(35);
	LCD_voidSendCmd(0b00111000);//functionset
    2510:	88 e3       	ldi	r24, 0x38	; 56
    2512:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
    2516:	80 e0       	ldi	r24, 0x00	; 0
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	a0 e2       	ldi	r26, 0x20	; 32
    251c:	b2 e4       	ldi	r27, 0x42	; 66
    251e:	8b af       	std	Y+59, r24	; 0x3b
    2520:	9c af       	std	Y+60, r25	; 0x3c
    2522:	ad af       	std	Y+61, r26	; 0x3d
    2524:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2526:	6b ad       	ldd	r22, Y+59	; 0x3b
    2528:	7c ad       	ldd	r23, Y+60	; 0x3c
    252a:	8d ad       	ldd	r24, Y+61	; 0x3d
    252c:	9e ad       	ldd	r25, Y+62	; 0x3e
    252e:	2b ea       	ldi	r18, 0xAB	; 171
    2530:	3a ea       	ldi	r19, 0xAA	; 170
    2532:	4a e2       	ldi	r20, 0x2A	; 42
    2534:	50 e4       	ldi	r21, 0x40	; 64
    2536:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    253a:	dc 01       	movw	r26, r24
    253c:	cb 01       	movw	r24, r22
    253e:	8f ab       	std	Y+55, r24	; 0x37
    2540:	98 af       	std	Y+56, r25	; 0x38
    2542:	a9 af       	std	Y+57, r26	; 0x39
    2544:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2546:	6f a9       	ldd	r22, Y+55	; 0x37
    2548:	78 ad       	ldd	r23, Y+56	; 0x38
    254a:	89 ad       	ldd	r24, Y+57	; 0x39
    254c:	9a ad       	ldd	r25, Y+58	; 0x3a
    254e:	20 e0       	ldi	r18, 0x00	; 0
    2550:	30 e0       	ldi	r19, 0x00	; 0
    2552:	40 e8       	ldi	r20, 0x80	; 128
    2554:	5f e3       	ldi	r21, 0x3F	; 63
    2556:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    255a:	88 23       	and	r24, r24
    255c:	1c f4       	brge	.+6      	; 0x2564 <LCD_voidInit+0x1ce>
		__ticks = 1;
    255e:	81 e0       	ldi	r24, 0x01	; 1
    2560:	8e ab       	std	Y+54, r24	; 0x36
    2562:	91 c0       	rjmp	.+290    	; 0x2686 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    2564:	6f a9       	ldd	r22, Y+55	; 0x37
    2566:	78 ad       	ldd	r23, Y+56	; 0x38
    2568:	89 ad       	ldd	r24, Y+57	; 0x39
    256a:	9a ad       	ldd	r25, Y+58	; 0x3a
    256c:	20 e0       	ldi	r18, 0x00	; 0
    256e:	30 e0       	ldi	r19, 0x00	; 0
    2570:	4f e7       	ldi	r20, 0x7F	; 127
    2572:	53 e4       	ldi	r21, 0x43	; 67
    2574:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2578:	18 16       	cp	r1, r24
    257a:	0c f0       	brlt	.+2      	; 0x257e <LCD_voidInit+0x1e8>
    257c:	7b c0       	rjmp	.+246    	; 0x2674 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    257e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2580:	7c ad       	ldd	r23, Y+60	; 0x3c
    2582:	8d ad       	ldd	r24, Y+61	; 0x3d
    2584:	9e ad       	ldd	r25, Y+62	; 0x3e
    2586:	20 e0       	ldi	r18, 0x00	; 0
    2588:	30 e0       	ldi	r19, 0x00	; 0
    258a:	4a e7       	ldi	r20, 0x7A	; 122
    258c:	54 e4       	ldi	r21, 0x44	; 68
    258e:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2592:	dc 01       	movw	r26, r24
    2594:	cb 01       	movw	r24, r22
    2596:	8a ab       	std	Y+50, r24	; 0x32
    2598:	9b ab       	std	Y+51, r25	; 0x33
    259a:	ac ab       	std	Y+52, r26	; 0x34
    259c:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    259e:	6a a9       	ldd	r22, Y+50	; 0x32
    25a0:	7b a9       	ldd	r23, Y+51	; 0x33
    25a2:	8c a9       	ldd	r24, Y+52	; 0x34
    25a4:	9d a9       	ldd	r25, Y+53	; 0x35
    25a6:	20 e0       	ldi	r18, 0x00	; 0
    25a8:	30 e0       	ldi	r19, 0x00	; 0
    25aa:	4a ef       	ldi	r20, 0xFA	; 250
    25ac:	54 e4       	ldi	r21, 0x44	; 68
    25ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	8e a7       	std	Y+46, r24	; 0x2e
    25b8:	9f a7       	std	Y+47, r25	; 0x2f
    25ba:	a8 ab       	std	Y+48, r26	; 0x30
    25bc:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    25be:	6e a5       	ldd	r22, Y+46	; 0x2e
    25c0:	7f a5       	ldd	r23, Y+47	; 0x2f
    25c2:	88 a9       	ldd	r24, Y+48	; 0x30
    25c4:	99 a9       	ldd	r25, Y+49	; 0x31
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	30 e0       	ldi	r19, 0x00	; 0
    25ca:	40 e8       	ldi	r20, 0x80	; 128
    25cc:	5f e3       	ldi	r21, 0x3F	; 63
    25ce:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    25d2:	88 23       	and	r24, r24
    25d4:	2c f4       	brge	.+10     	; 0x25e0 <LCD_voidInit+0x24a>
		__ticks = 1;
    25d6:	81 e0       	ldi	r24, 0x01	; 1
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	9d a7       	std	Y+45, r25	; 0x2d
    25dc:	8c a7       	std	Y+44, r24	; 0x2c
    25de:	3f c0       	rjmp	.+126    	; 0x265e <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    25e0:	6e a5       	ldd	r22, Y+46	; 0x2e
    25e2:	7f a5       	ldd	r23, Y+47	; 0x2f
    25e4:	88 a9       	ldd	r24, Y+48	; 0x30
    25e6:	99 a9       	ldd	r25, Y+49	; 0x31
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	3f ef       	ldi	r19, 0xFF	; 255
    25ec:	4f e7       	ldi	r20, 0x7F	; 127
    25ee:	57 e4       	ldi	r21, 0x47	; 71
    25f0:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    25f4:	18 16       	cp	r1, r24
    25f6:	4c f5       	brge	.+82     	; 0x264a <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25f8:	6a a9       	ldd	r22, Y+50	; 0x32
    25fa:	7b a9       	ldd	r23, Y+51	; 0x33
    25fc:	8c a9       	ldd	r24, Y+52	; 0x34
    25fe:	9d a9       	ldd	r25, Y+53	; 0x35
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	40 e2       	ldi	r20, 0x20	; 32
    2606:	51 e4       	ldi	r21, 0x41	; 65
    2608:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    260c:	dc 01       	movw	r26, r24
    260e:	cb 01       	movw	r24, r22
    2610:	bc 01       	movw	r22, r24
    2612:	cd 01       	movw	r24, r26
    2614:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2618:	dc 01       	movw	r26, r24
    261a:	cb 01       	movw	r24, r22
    261c:	9d a7       	std	Y+45, r25	; 0x2d
    261e:	8c a7       	std	Y+44, r24	; 0x2c
    2620:	0f c0       	rjmp	.+30     	; 0x2640 <LCD_voidInit+0x2aa>
    2622:	88 ec       	ldi	r24, 0xC8	; 200
    2624:	90 e0       	ldi	r25, 0x00	; 0
    2626:	9b a7       	std	Y+43, r25	; 0x2b
    2628:	8a a7       	std	Y+42, r24	; 0x2a
    262a:	8a a5       	ldd	r24, Y+42	; 0x2a
    262c:	9b a5       	ldd	r25, Y+43	; 0x2b
    262e:	01 97       	sbiw	r24, 0x01	; 1
    2630:	f1 f7       	brne	.-4      	; 0x262e <LCD_voidInit+0x298>
    2632:	9b a7       	std	Y+43, r25	; 0x2b
    2634:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2636:	8c a5       	ldd	r24, Y+44	; 0x2c
    2638:	9d a5       	ldd	r25, Y+45	; 0x2d
    263a:	01 97       	sbiw	r24, 0x01	; 1
    263c:	9d a7       	std	Y+45, r25	; 0x2d
    263e:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2640:	8c a5       	ldd	r24, Y+44	; 0x2c
    2642:	9d a5       	ldd	r25, Y+45	; 0x2d
    2644:	00 97       	sbiw	r24, 0x00	; 0
    2646:	69 f7       	brne	.-38     	; 0x2622 <LCD_voidInit+0x28c>
    2648:	24 c0       	rjmp	.+72     	; 0x2692 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    264a:	6e a5       	ldd	r22, Y+46	; 0x2e
    264c:	7f a5       	ldd	r23, Y+47	; 0x2f
    264e:	88 a9       	ldd	r24, Y+48	; 0x30
    2650:	99 a9       	ldd	r25, Y+49	; 0x31
    2652:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2656:	dc 01       	movw	r26, r24
    2658:	cb 01       	movw	r24, r22
    265a:	9d a7       	std	Y+45, r25	; 0x2d
    265c:	8c a7       	std	Y+44, r24	; 0x2c
    265e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2660:	9d a5       	ldd	r25, Y+45	; 0x2d
    2662:	99 a7       	std	Y+41, r25	; 0x29
    2664:	88 a7       	std	Y+40, r24	; 0x28
    2666:	88 a5       	ldd	r24, Y+40	; 0x28
    2668:	99 a5       	ldd	r25, Y+41	; 0x29
    266a:	01 97       	sbiw	r24, 0x01	; 1
    266c:	f1 f7       	brne	.-4      	; 0x266a <LCD_voidInit+0x2d4>
    266e:	99 a7       	std	Y+41, r25	; 0x29
    2670:	88 a7       	std	Y+40, r24	; 0x28
    2672:	0f c0       	rjmp	.+30     	; 0x2692 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2674:	6f a9       	ldd	r22, Y+55	; 0x37
    2676:	78 ad       	ldd	r23, Y+56	; 0x38
    2678:	89 ad       	ldd	r24, Y+57	; 0x39
    267a:	9a ad       	ldd	r25, Y+58	; 0x3a
    267c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	8e ab       	std	Y+54, r24	; 0x36
    2686:	8e a9       	ldd	r24, Y+54	; 0x36
    2688:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    268a:	8f a1       	ldd	r24, Y+39	; 0x27
    268c:	8a 95       	dec	r24
    268e:	f1 f7       	brne	.-4      	; 0x268c <LCD_voidInit+0x2f6>
    2690:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmd(0b00001100);//display
    2692:	8c e0       	ldi	r24, 0x0C	; 12
    2694:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
    2698:	80 e0       	ldi	r24, 0x00	; 0
    269a:	90 e0       	ldi	r25, 0x00	; 0
    269c:	a0 e2       	ldi	r26, 0x20	; 32
    269e:	b2 e4       	ldi	r27, 0x42	; 66
    26a0:	8b a3       	std	Y+35, r24	; 0x23
    26a2:	9c a3       	std	Y+36, r25	; 0x24
    26a4:	ad a3       	std	Y+37, r26	; 0x25
    26a6:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    26a8:	6b a1       	ldd	r22, Y+35	; 0x23
    26aa:	7c a1       	ldd	r23, Y+36	; 0x24
    26ac:	8d a1       	ldd	r24, Y+37	; 0x25
    26ae:	9e a1       	ldd	r25, Y+38	; 0x26
    26b0:	2b ea       	ldi	r18, 0xAB	; 171
    26b2:	3a ea       	ldi	r19, 0xAA	; 170
    26b4:	4a e2       	ldi	r20, 0x2A	; 42
    26b6:	50 e4       	ldi	r21, 0x40	; 64
    26b8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26bc:	dc 01       	movw	r26, r24
    26be:	cb 01       	movw	r24, r22
    26c0:	8f 8f       	std	Y+31, r24	; 0x1f
    26c2:	98 a3       	std	Y+32, r25	; 0x20
    26c4:	a9 a3       	std	Y+33, r26	; 0x21
    26c6:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    26c8:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26ca:	78 a1       	ldd	r23, Y+32	; 0x20
    26cc:	89 a1       	ldd	r24, Y+33	; 0x21
    26ce:	9a a1       	ldd	r25, Y+34	; 0x22
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	40 e8       	ldi	r20, 0x80	; 128
    26d6:	5f e3       	ldi	r21, 0x3F	; 63
    26d8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26dc:	88 23       	and	r24, r24
    26de:	1c f4       	brge	.+6      	; 0x26e6 <LCD_voidInit+0x350>
		__ticks = 1;
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	8e 8f       	std	Y+30, r24	; 0x1e
    26e4:	91 c0       	rjmp	.+290    	; 0x2808 <LCD_voidInit+0x472>
	else if (__tmp > 255)
    26e6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    26e8:	78 a1       	ldd	r23, Y+32	; 0x20
    26ea:	89 a1       	ldd	r24, Y+33	; 0x21
    26ec:	9a a1       	ldd	r25, Y+34	; 0x22
    26ee:	20 e0       	ldi	r18, 0x00	; 0
    26f0:	30 e0       	ldi	r19, 0x00	; 0
    26f2:	4f e7       	ldi	r20, 0x7F	; 127
    26f4:	53 e4       	ldi	r21, 0x43	; 67
    26f6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26fa:	18 16       	cp	r1, r24
    26fc:	0c f0       	brlt	.+2      	; 0x2700 <LCD_voidInit+0x36a>
    26fe:	7b c0       	rjmp	.+246    	; 0x27f6 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2700:	6b a1       	ldd	r22, Y+35	; 0x23
    2702:	7c a1       	ldd	r23, Y+36	; 0x24
    2704:	8d a1       	ldd	r24, Y+37	; 0x25
    2706:	9e a1       	ldd	r25, Y+38	; 0x26
    2708:	20 e0       	ldi	r18, 0x00	; 0
    270a:	30 e0       	ldi	r19, 0x00	; 0
    270c:	4a e7       	ldi	r20, 0x7A	; 122
    270e:	54 e4       	ldi	r21, 0x44	; 68
    2710:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2714:	dc 01       	movw	r26, r24
    2716:	cb 01       	movw	r24, r22
    2718:	8a 8f       	std	Y+26, r24	; 0x1a
    271a:	9b 8f       	std	Y+27, r25	; 0x1b
    271c:	ac 8f       	std	Y+28, r26	; 0x1c
    271e:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2720:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2722:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2724:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2726:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2728:	20 e0       	ldi	r18, 0x00	; 0
    272a:	30 e0       	ldi	r19, 0x00	; 0
    272c:	4a ef       	ldi	r20, 0xFA	; 250
    272e:	54 e4       	ldi	r21, 0x44	; 68
    2730:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	8e 8b       	std	Y+22, r24	; 0x16
    273a:	9f 8b       	std	Y+23, r25	; 0x17
    273c:	a8 8f       	std	Y+24, r26	; 0x18
    273e:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2740:	6e 89       	ldd	r22, Y+22	; 0x16
    2742:	7f 89       	ldd	r23, Y+23	; 0x17
    2744:	88 8d       	ldd	r24, Y+24	; 0x18
    2746:	99 8d       	ldd	r25, Y+25	; 0x19
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	40 e8       	ldi	r20, 0x80	; 128
    274e:	5f e3       	ldi	r21, 0x3F	; 63
    2750:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2754:	88 23       	and	r24, r24
    2756:	2c f4       	brge	.+10     	; 0x2762 <LCD_voidInit+0x3cc>
		__ticks = 1;
    2758:	81 e0       	ldi	r24, 0x01	; 1
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9d 8b       	std	Y+21, r25	; 0x15
    275e:	8c 8b       	std	Y+20, r24	; 0x14
    2760:	3f c0       	rjmp	.+126    	; 0x27e0 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2762:	6e 89       	ldd	r22, Y+22	; 0x16
    2764:	7f 89       	ldd	r23, Y+23	; 0x17
    2766:	88 8d       	ldd	r24, Y+24	; 0x18
    2768:	99 8d       	ldd	r25, Y+25	; 0x19
    276a:	20 e0       	ldi	r18, 0x00	; 0
    276c:	3f ef       	ldi	r19, 0xFF	; 255
    276e:	4f e7       	ldi	r20, 0x7F	; 127
    2770:	57 e4       	ldi	r21, 0x47	; 71
    2772:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2776:	18 16       	cp	r1, r24
    2778:	4c f5       	brge	.+82     	; 0x27cc <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    277a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    277c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    277e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2780:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2782:	20 e0       	ldi	r18, 0x00	; 0
    2784:	30 e0       	ldi	r19, 0x00	; 0
    2786:	40 e2       	ldi	r20, 0x20	; 32
    2788:	51 e4       	ldi	r21, 0x41	; 65
    278a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	bc 01       	movw	r22, r24
    2794:	cd 01       	movw	r24, r26
    2796:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    279a:	dc 01       	movw	r26, r24
    279c:	cb 01       	movw	r24, r22
    279e:	9d 8b       	std	Y+21, r25	; 0x15
    27a0:	8c 8b       	std	Y+20, r24	; 0x14
    27a2:	0f c0       	rjmp	.+30     	; 0x27c2 <LCD_voidInit+0x42c>
    27a4:	88 ec       	ldi	r24, 0xC8	; 200
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	9b 8b       	std	Y+19, r25	; 0x13
    27aa:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27ac:	8a 89       	ldd	r24, Y+18	; 0x12
    27ae:	9b 89       	ldd	r25, Y+19	; 0x13
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	f1 f7       	brne	.-4      	; 0x27b0 <LCD_voidInit+0x41a>
    27b4:	9b 8b       	std	Y+19, r25	; 0x13
    27b6:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27b8:	8c 89       	ldd	r24, Y+20	; 0x14
    27ba:	9d 89       	ldd	r25, Y+21	; 0x15
    27bc:	01 97       	sbiw	r24, 0x01	; 1
    27be:	9d 8b       	std	Y+21, r25	; 0x15
    27c0:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27c2:	8c 89       	ldd	r24, Y+20	; 0x14
    27c4:	9d 89       	ldd	r25, Y+21	; 0x15
    27c6:	00 97       	sbiw	r24, 0x00	; 0
    27c8:	69 f7       	brne	.-38     	; 0x27a4 <LCD_voidInit+0x40e>
    27ca:	24 c0       	rjmp	.+72     	; 0x2814 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27cc:	6e 89       	ldd	r22, Y+22	; 0x16
    27ce:	7f 89       	ldd	r23, Y+23	; 0x17
    27d0:	88 8d       	ldd	r24, Y+24	; 0x18
    27d2:	99 8d       	ldd	r25, Y+25	; 0x19
    27d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27d8:	dc 01       	movw	r26, r24
    27da:	cb 01       	movw	r24, r22
    27dc:	9d 8b       	std	Y+21, r25	; 0x15
    27de:	8c 8b       	std	Y+20, r24	; 0x14
    27e0:	8c 89       	ldd	r24, Y+20	; 0x14
    27e2:	9d 89       	ldd	r25, Y+21	; 0x15
    27e4:	99 8b       	std	Y+17, r25	; 0x11
    27e6:	88 8b       	std	Y+16, r24	; 0x10
    27e8:	88 89       	ldd	r24, Y+16	; 0x10
    27ea:	99 89       	ldd	r25, Y+17	; 0x11
    27ec:	01 97       	sbiw	r24, 0x01	; 1
    27ee:	f1 f7       	brne	.-4      	; 0x27ec <LCD_voidInit+0x456>
    27f0:	99 8b       	std	Y+17, r25	; 0x11
    27f2:	88 8b       	std	Y+16, r24	; 0x10
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    27f6:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27f8:	78 a1       	ldd	r23, Y+32	; 0x20
    27fa:	89 a1       	ldd	r24, Y+33	; 0x21
    27fc:	9a a1       	ldd	r25, Y+34	; 0x22
    27fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2802:	dc 01       	movw	r26, r24
    2804:	cb 01       	movw	r24, r22
    2806:	8e 8f       	std	Y+30, r24	; 0x1e
    2808:	8e 8d       	ldd	r24, Y+30	; 0x1e
    280a:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    280c:	8f 85       	ldd	r24, Y+15	; 0x0f
    280e:	8a 95       	dec	r24
    2810:	f1 f7       	brne	.-4      	; 0x280e <LCD_voidInit+0x478>
    2812:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmd(0b00000001);//clr
    2814:	81 e0       	ldi	r24, 0x01	; 1
    2816:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
    281a:	80 e0       	ldi	r24, 0x00	; 0
    281c:	90 e0       	ldi	r25, 0x00	; 0
    281e:	a0 e0       	ldi	r26, 0x00	; 0
    2820:	b0 e4       	ldi	r27, 0x40	; 64
    2822:	8b 87       	std	Y+11, r24	; 0x0b
    2824:	9c 87       	std	Y+12, r25	; 0x0c
    2826:	ad 87       	std	Y+13, r26	; 0x0d
    2828:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    282a:	6b 85       	ldd	r22, Y+11	; 0x0b
    282c:	7c 85       	ldd	r23, Y+12	; 0x0c
    282e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2830:	9e 85       	ldd	r25, Y+14	; 0x0e
    2832:	20 e0       	ldi	r18, 0x00	; 0
    2834:	30 e0       	ldi	r19, 0x00	; 0
    2836:	4a ef       	ldi	r20, 0xFA	; 250
    2838:	54 e4       	ldi	r21, 0x44	; 68
    283a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    283e:	dc 01       	movw	r26, r24
    2840:	cb 01       	movw	r24, r22
    2842:	8f 83       	std	Y+7, r24	; 0x07
    2844:	98 87       	std	Y+8, r25	; 0x08
    2846:	a9 87       	std	Y+9, r26	; 0x09
    2848:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    284a:	6f 81       	ldd	r22, Y+7	; 0x07
    284c:	78 85       	ldd	r23, Y+8	; 0x08
    284e:	89 85       	ldd	r24, Y+9	; 0x09
    2850:	9a 85       	ldd	r25, Y+10	; 0x0a
    2852:	20 e0       	ldi	r18, 0x00	; 0
    2854:	30 e0       	ldi	r19, 0x00	; 0
    2856:	40 e8       	ldi	r20, 0x80	; 128
    2858:	5f e3       	ldi	r21, 0x3F	; 63
    285a:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    285e:	88 23       	and	r24, r24
    2860:	2c f4       	brge	.+10     	; 0x286c <LCD_voidInit+0x4d6>
		__ticks = 1;
    2862:	81 e0       	ldi	r24, 0x01	; 1
    2864:	90 e0       	ldi	r25, 0x00	; 0
    2866:	9e 83       	std	Y+6, r25	; 0x06
    2868:	8d 83       	std	Y+5, r24	; 0x05
    286a:	3f c0       	rjmp	.+126    	; 0x28ea <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    286c:	6f 81       	ldd	r22, Y+7	; 0x07
    286e:	78 85       	ldd	r23, Y+8	; 0x08
    2870:	89 85       	ldd	r24, Y+9	; 0x09
    2872:	9a 85       	ldd	r25, Y+10	; 0x0a
    2874:	20 e0       	ldi	r18, 0x00	; 0
    2876:	3f ef       	ldi	r19, 0xFF	; 255
    2878:	4f e7       	ldi	r20, 0x7F	; 127
    287a:	57 e4       	ldi	r21, 0x47	; 71
    287c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2880:	18 16       	cp	r1, r24
    2882:	4c f5       	brge	.+82     	; 0x28d6 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2884:	6b 85       	ldd	r22, Y+11	; 0x0b
    2886:	7c 85       	ldd	r23, Y+12	; 0x0c
    2888:	8d 85       	ldd	r24, Y+13	; 0x0d
    288a:	9e 85       	ldd	r25, Y+14	; 0x0e
    288c:	20 e0       	ldi	r18, 0x00	; 0
    288e:	30 e0       	ldi	r19, 0x00	; 0
    2890:	40 e2       	ldi	r20, 0x20	; 32
    2892:	51 e4       	ldi	r21, 0x41	; 65
    2894:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2898:	dc 01       	movw	r26, r24
    289a:	cb 01       	movw	r24, r22
    289c:	bc 01       	movw	r22, r24
    289e:	cd 01       	movw	r24, r26
    28a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a4:	dc 01       	movw	r26, r24
    28a6:	cb 01       	movw	r24, r22
    28a8:	9e 83       	std	Y+6, r25	; 0x06
    28aa:	8d 83       	std	Y+5, r24	; 0x05
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_voidInit+0x536>
    28ae:	88 ec       	ldi	r24, 0xC8	; 200
    28b0:	90 e0       	ldi	r25, 0x00	; 0
    28b2:	9c 83       	std	Y+4, r25	; 0x04
    28b4:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    28b6:	8b 81       	ldd	r24, Y+3	; 0x03
    28b8:	9c 81       	ldd	r25, Y+4	; 0x04
    28ba:	01 97       	sbiw	r24, 0x01	; 1
    28bc:	f1 f7       	brne	.-4      	; 0x28ba <LCD_voidInit+0x524>
    28be:	9c 83       	std	Y+4, r25	; 0x04
    28c0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	01 97       	sbiw	r24, 0x01	; 1
    28c8:	9e 83       	std	Y+6, r25	; 0x06
    28ca:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28cc:	8d 81       	ldd	r24, Y+5	; 0x05
    28ce:	9e 81       	ldd	r25, Y+6	; 0x06
    28d0:	00 97       	sbiw	r24, 0x00	; 0
    28d2:	69 f7       	brne	.-38     	; 0x28ae <LCD_voidInit+0x518>
    28d4:	14 c0       	rjmp	.+40     	; 0x28fe <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28d6:	6f 81       	ldd	r22, Y+7	; 0x07
    28d8:	78 85       	ldd	r23, Y+8	; 0x08
    28da:	89 85       	ldd	r24, Y+9	; 0x09
    28dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    28de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28e2:	dc 01       	movw	r26, r24
    28e4:	cb 01       	movw	r24, r22
    28e6:	9e 83       	std	Y+6, r25	; 0x06
    28e8:	8d 83       	std	Y+5, r24	; 0x05
    28ea:	8d 81       	ldd	r24, Y+5	; 0x05
    28ec:	9e 81       	ldd	r25, Y+6	; 0x06
    28ee:	9a 83       	std	Y+2, r25	; 0x02
    28f0:	89 83       	std	Y+1, r24	; 0x01
    28f2:	89 81       	ldd	r24, Y+1	; 0x01
    28f4:	9a 81       	ldd	r25, Y+2	; 0x02
    28f6:	01 97       	sbiw	r24, 0x01	; 1
    28f8:	f1 f7       	brne	.-4      	; 0x28f6 <LCD_voidInit+0x560>
    28fa:	9a 83       	std	Y+2, r25	; 0x02
    28fc:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmd(0b00001110);//entry mode set
    28fe:	8e e0       	ldi	r24, 0x0E	; 14
    2900:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>

}
    2904:	c4 5b       	subi	r28, 0xB4	; 180
    2906:	df 4f       	sbci	r29, 0xFF	; 255
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	cf 91       	pop	r28
    2914:	df 91       	pop	r29
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	08 95       	ret

0000291c <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8Cmd)
{
    291c:	df 93       	push	r29
    291e:	cf 93       	push	r28
    2920:	cd b7       	in	r28, 0x3d	; 61
    2922:	de b7       	in	r29, 0x3e	; 62
    2924:	e1 97       	sbiw	r28, 0x31	; 49
    2926:	0f b6       	in	r0, 0x3f	; 63
    2928:	f8 94       	cli
    292a:	de bf       	out	0x3e, r29	; 62
    292c:	0f be       	out	0x3f, r0	; 63
    292e:	cd bf       	out	0x3d, r28	; 61
    2930:	89 ab       	std	Y+49, r24	; 0x31
	//rs=0
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	60 e0       	ldi	r22, 0x00	; 0
    2936:	40 e0       	ldi	r20, 0x00	; 0
    2938:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    293c:	80 e0       	ldi	r24, 0x00	; 0
    293e:	61 e0       	ldi	r22, 0x01	; 1
    2940:	40 e0       	ldi	r20, 0x00	; 0
    2942:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Cmd);
    2946:	81 e0       	ldi	r24, 0x01	; 1
    2948:	69 a9       	ldd	r22, Y+49	; 0x31
    294a:	0e 94 27 0a 	call	0x144e	; 0x144e <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	62 e0       	ldi	r22, 0x02	; 2
    2952:	41 e0       	ldi	r20, 0x01	; 1
    2954:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2958:	80 e0       	ldi	r24, 0x00	; 0
    295a:	90 e0       	ldi	r25, 0x00	; 0
    295c:	a0 e8       	ldi	r26, 0x80	; 128
    295e:	bf e3       	ldi	r27, 0x3F	; 63
    2960:	8d a7       	std	Y+45, r24	; 0x2d
    2962:	9e a7       	std	Y+46, r25	; 0x2e
    2964:	af a7       	std	Y+47, r26	; 0x2f
    2966:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2968:	6d a5       	ldd	r22, Y+45	; 0x2d
    296a:	7e a5       	ldd	r23, Y+46	; 0x2e
    296c:	8f a5       	ldd	r24, Y+47	; 0x2f
    296e:	98 a9       	ldd	r25, Y+48	; 0x30
    2970:	2b ea       	ldi	r18, 0xAB	; 171
    2972:	3a ea       	ldi	r19, 0xAA	; 170
    2974:	4a e2       	ldi	r20, 0x2A	; 42
    2976:	50 e4       	ldi	r21, 0x40	; 64
    2978:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297c:	dc 01       	movw	r26, r24
    297e:	cb 01       	movw	r24, r22
    2980:	89 a7       	std	Y+41, r24	; 0x29
    2982:	9a a7       	std	Y+42, r25	; 0x2a
    2984:	ab a7       	std	Y+43, r26	; 0x2b
    2986:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2988:	69 a5       	ldd	r22, Y+41	; 0x29
    298a:	7a a5       	ldd	r23, Y+42	; 0x2a
    298c:	8b a5       	ldd	r24, Y+43	; 0x2b
    298e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2990:	20 e0       	ldi	r18, 0x00	; 0
    2992:	30 e0       	ldi	r19, 0x00	; 0
    2994:	40 e8       	ldi	r20, 0x80	; 128
    2996:	5f e3       	ldi	r21, 0x3F	; 63
    2998:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    299c:	88 23       	and	r24, r24
    299e:	1c f4       	brge	.+6      	; 0x29a6 <LCD_voidSendCmd+0x8a>
		__ticks = 1;
    29a0:	81 e0       	ldi	r24, 0x01	; 1
    29a2:	88 a7       	std	Y+40, r24	; 0x28
    29a4:	91 c0       	rjmp	.+290    	; 0x2ac8 <LCD_voidSendCmd+0x1ac>
	else if (__tmp > 255)
    29a6:	69 a5       	ldd	r22, Y+41	; 0x29
    29a8:	7a a5       	ldd	r23, Y+42	; 0x2a
    29aa:	8b a5       	ldd	r24, Y+43	; 0x2b
    29ac:	9c a5       	ldd	r25, Y+44	; 0x2c
    29ae:	20 e0       	ldi	r18, 0x00	; 0
    29b0:	30 e0       	ldi	r19, 0x00	; 0
    29b2:	4f e7       	ldi	r20, 0x7F	; 127
    29b4:	53 e4       	ldi	r21, 0x43	; 67
    29b6:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    29ba:	18 16       	cp	r1, r24
    29bc:	0c f0       	brlt	.+2      	; 0x29c0 <LCD_voidSendCmd+0xa4>
    29be:	7b c0       	rjmp	.+246    	; 0x2ab6 <LCD_voidSendCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    29c0:	6d a5       	ldd	r22, Y+45	; 0x2d
    29c2:	7e a5       	ldd	r23, Y+46	; 0x2e
    29c4:	8f a5       	ldd	r24, Y+47	; 0x2f
    29c6:	98 a9       	ldd	r25, Y+48	; 0x30
    29c8:	20 e0       	ldi	r18, 0x00	; 0
    29ca:	30 e0       	ldi	r19, 0x00	; 0
    29cc:	4a e7       	ldi	r20, 0x7A	; 122
    29ce:	54 e4       	ldi	r21, 0x44	; 68
    29d0:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    29d4:	dc 01       	movw	r26, r24
    29d6:	cb 01       	movw	r24, r22
    29d8:	8c a3       	std	Y+36, r24	; 0x24
    29da:	9d a3       	std	Y+37, r25	; 0x25
    29dc:	ae a3       	std	Y+38, r26	; 0x26
    29de:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29e0:	6c a1       	ldd	r22, Y+36	; 0x24
    29e2:	7d a1       	ldd	r23, Y+37	; 0x25
    29e4:	8e a1       	ldd	r24, Y+38	; 0x26
    29e6:	9f a1       	ldd	r25, Y+39	; 0x27
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	4a ef       	ldi	r20, 0xFA	; 250
    29ee:	54 e4       	ldi	r21, 0x44	; 68
    29f0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29f4:	dc 01       	movw	r26, r24
    29f6:	cb 01       	movw	r24, r22
    29f8:	88 a3       	std	Y+32, r24	; 0x20
    29fa:	99 a3       	std	Y+33, r25	; 0x21
    29fc:	aa a3       	std	Y+34, r26	; 0x22
    29fe:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2a00:	68 a1       	ldd	r22, Y+32	; 0x20
    2a02:	79 a1       	ldd	r23, Y+33	; 0x21
    2a04:	8a a1       	ldd	r24, Y+34	; 0x22
    2a06:	9b a1       	ldd	r25, Y+35	; 0x23
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	30 e0       	ldi	r19, 0x00	; 0
    2a0c:	40 e8       	ldi	r20, 0x80	; 128
    2a0e:	5f e3       	ldi	r21, 0x3F	; 63
    2a10:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a14:	88 23       	and	r24, r24
    2a16:	2c f4       	brge	.+10     	; 0x2a22 <LCD_voidSendCmd+0x106>
		__ticks = 1;
    2a18:	81 e0       	ldi	r24, 0x01	; 1
    2a1a:	90 e0       	ldi	r25, 0x00	; 0
    2a1c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a1e:	8e 8f       	std	Y+30, r24	; 0x1e
    2a20:	3f c0       	rjmp	.+126    	; 0x2aa0 <LCD_voidSendCmd+0x184>
	else if (__tmp > 65535)
    2a22:	68 a1       	ldd	r22, Y+32	; 0x20
    2a24:	79 a1       	ldd	r23, Y+33	; 0x21
    2a26:	8a a1       	ldd	r24, Y+34	; 0x22
    2a28:	9b a1       	ldd	r25, Y+35	; 0x23
    2a2a:	20 e0       	ldi	r18, 0x00	; 0
    2a2c:	3f ef       	ldi	r19, 0xFF	; 255
    2a2e:	4f e7       	ldi	r20, 0x7F	; 127
    2a30:	57 e4       	ldi	r21, 0x47	; 71
    2a32:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a36:	18 16       	cp	r1, r24
    2a38:	4c f5       	brge	.+82     	; 0x2a8c <LCD_voidSendCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a3a:	6c a1       	ldd	r22, Y+36	; 0x24
    2a3c:	7d a1       	ldd	r23, Y+37	; 0x25
    2a3e:	8e a1       	ldd	r24, Y+38	; 0x26
    2a40:	9f a1       	ldd	r25, Y+39	; 0x27
    2a42:	20 e0       	ldi	r18, 0x00	; 0
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	40 e2       	ldi	r20, 0x20	; 32
    2a48:	51 e4       	ldi	r21, 0x41	; 65
    2a4a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a4e:	dc 01       	movw	r26, r24
    2a50:	cb 01       	movw	r24, r22
    2a52:	bc 01       	movw	r22, r24
    2a54:	cd 01       	movw	r24, r26
    2a56:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a5a:	dc 01       	movw	r26, r24
    2a5c:	cb 01       	movw	r24, r22
    2a5e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a60:	8e 8f       	std	Y+30, r24	; 0x1e
    2a62:	0f c0       	rjmp	.+30     	; 0x2a82 <LCD_voidSendCmd+0x166>
    2a64:	88 ec       	ldi	r24, 0xC8	; 200
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	9d 8f       	std	Y+29, r25	; 0x1d
    2a6a:	8c 8f       	std	Y+28, r24	; 0x1c
    2a6c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2a6e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2a70:	01 97       	sbiw	r24, 0x01	; 1
    2a72:	f1 f7       	brne	.-4      	; 0x2a70 <LCD_voidSendCmd+0x154>
    2a74:	9d 8f       	std	Y+29, r25	; 0x1d
    2a76:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a78:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a7a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a7c:	01 97       	sbiw	r24, 0x01	; 1
    2a7e:	9f 8f       	std	Y+31, r25	; 0x1f
    2a80:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a82:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2a84:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2a86:	00 97       	sbiw	r24, 0x00	; 0
    2a88:	69 f7       	brne	.-38     	; 0x2a64 <LCD_voidSendCmd+0x148>
    2a8a:	24 c0       	rjmp	.+72     	; 0x2ad4 <LCD_voidSendCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a8c:	68 a1       	ldd	r22, Y+32	; 0x20
    2a8e:	79 a1       	ldd	r23, Y+33	; 0x21
    2a90:	8a a1       	ldd	r24, Y+34	; 0x22
    2a92:	9b a1       	ldd	r25, Y+35	; 0x23
    2a94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a98:	dc 01       	movw	r26, r24
    2a9a:	cb 01       	movw	r24, r22
    2a9c:	9f 8f       	std	Y+31, r25	; 0x1f
    2a9e:	8e 8f       	std	Y+30, r24	; 0x1e
    2aa0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2aa2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2aa4:	9b 8f       	std	Y+27, r25	; 0x1b
    2aa6:	8a 8f       	std	Y+26, r24	; 0x1a
    2aa8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2aaa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <LCD_voidSendCmd+0x190>
    2ab0:	9b 8f       	std	Y+27, r25	; 0x1b
    2ab2:	8a 8f       	std	Y+26, r24	; 0x1a
    2ab4:	0f c0       	rjmp	.+30     	; 0x2ad4 <LCD_voidSendCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2ab6:	69 a5       	ldd	r22, Y+41	; 0x29
    2ab8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2aba:	8b a5       	ldd	r24, Y+43	; 0x2b
    2abc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2abe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ac2:	dc 01       	movw	r26, r24
    2ac4:	cb 01       	movw	r24, r22
    2ac6:	88 a7       	std	Y+40, r24	; 0x28
    2ac8:	88 a5       	ldd	r24, Y+40	; 0x28
    2aca:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2acc:	89 8d       	ldd	r24, Y+25	; 0x19
    2ace:	8a 95       	dec	r24
    2ad0:	f1 f7       	brne	.-4      	; 0x2ace <LCD_voidSendCmd+0x1b2>
    2ad2:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    2ad4:	80 e0       	ldi	r24, 0x00	; 0
    2ad6:	62 e0       	ldi	r22, 0x02	; 2
    2ad8:	40 e0       	ldi	r20, 0x00	; 0
    2ada:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2ade:	80 e0       	ldi	r24, 0x00	; 0
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	a0 e8       	ldi	r26, 0x80	; 128
    2ae4:	bf e3       	ldi	r27, 0x3F	; 63
    2ae6:	8d 8b       	std	Y+21, r24	; 0x15
    2ae8:	9e 8b       	std	Y+22, r25	; 0x16
    2aea:	af 8b       	std	Y+23, r26	; 0x17
    2aec:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2aee:	6d 89       	ldd	r22, Y+21	; 0x15
    2af0:	7e 89       	ldd	r23, Y+22	; 0x16
    2af2:	8f 89       	ldd	r24, Y+23	; 0x17
    2af4:	98 8d       	ldd	r25, Y+24	; 0x18
    2af6:	2b ea       	ldi	r18, 0xAB	; 171
    2af8:	3a ea       	ldi	r19, 0xAA	; 170
    2afa:	4a e2       	ldi	r20, 0x2A	; 42
    2afc:	50 e4       	ldi	r21, 0x40	; 64
    2afe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b02:	dc 01       	movw	r26, r24
    2b04:	cb 01       	movw	r24, r22
    2b06:	89 8b       	std	Y+17, r24	; 0x11
    2b08:	9a 8b       	std	Y+18, r25	; 0x12
    2b0a:	ab 8b       	std	Y+19, r26	; 0x13
    2b0c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2b0e:	69 89       	ldd	r22, Y+17	; 0x11
    2b10:	7a 89       	ldd	r23, Y+18	; 0x12
    2b12:	8b 89       	ldd	r24, Y+19	; 0x13
    2b14:	9c 89       	ldd	r25, Y+20	; 0x14
    2b16:	20 e0       	ldi	r18, 0x00	; 0
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	40 e8       	ldi	r20, 0x80	; 128
    2b1c:	5f e3       	ldi	r21, 0x3F	; 63
    2b1e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b22:	88 23       	and	r24, r24
    2b24:	1c f4       	brge	.+6      	; 0x2b2c <LCD_voidSendCmd+0x210>
		__ticks = 1;
    2b26:	81 e0       	ldi	r24, 0x01	; 1
    2b28:	88 8b       	std	Y+16, r24	; 0x10
    2b2a:	91 c0       	rjmp	.+290    	; 0x2c4e <LCD_voidSendCmd+0x332>
	else if (__tmp > 255)
    2b2c:	69 89       	ldd	r22, Y+17	; 0x11
    2b2e:	7a 89       	ldd	r23, Y+18	; 0x12
    2b30:	8b 89       	ldd	r24, Y+19	; 0x13
    2b32:	9c 89       	ldd	r25, Y+20	; 0x14
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	4f e7       	ldi	r20, 0x7F	; 127
    2b3a:	53 e4       	ldi	r21, 0x43	; 67
    2b3c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b40:	18 16       	cp	r1, r24
    2b42:	0c f0       	brlt	.+2      	; 0x2b46 <LCD_voidSendCmd+0x22a>
    2b44:	7b c0       	rjmp	.+246    	; 0x2c3c <LCD_voidSendCmd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2b46:	6d 89       	ldd	r22, Y+21	; 0x15
    2b48:	7e 89       	ldd	r23, Y+22	; 0x16
    2b4a:	8f 89       	ldd	r24, Y+23	; 0x17
    2b4c:	98 8d       	ldd	r25, Y+24	; 0x18
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a e7       	ldi	r20, 0x7A	; 122
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8c 87       	std	Y+12, r24	; 0x0c
    2b60:	9d 87       	std	Y+13, r25	; 0x0d
    2b62:	ae 87       	std	Y+14, r26	; 0x0e
    2b64:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b66:	6c 85       	ldd	r22, Y+12	; 0x0c
    2b68:	7d 85       	ldd	r23, Y+13	; 0x0d
    2b6a:	8e 85       	ldd	r24, Y+14	; 0x0e
    2b6c:	9f 85       	ldd	r25, Y+15	; 0x0f
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	4a ef       	ldi	r20, 0xFA	; 250
    2b74:	54 e4       	ldi	r21, 0x44	; 68
    2b76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b7a:	dc 01       	movw	r26, r24
    2b7c:	cb 01       	movw	r24, r22
    2b7e:	88 87       	std	Y+8, r24	; 0x08
    2b80:	99 87       	std	Y+9, r25	; 0x09
    2b82:	aa 87       	std	Y+10, r26	; 0x0a
    2b84:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2b86:	68 85       	ldd	r22, Y+8	; 0x08
    2b88:	79 85       	ldd	r23, Y+9	; 0x09
    2b8a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2b8c:	9b 85       	ldd	r25, Y+11	; 0x0b
    2b8e:	20 e0       	ldi	r18, 0x00	; 0
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	40 e8       	ldi	r20, 0x80	; 128
    2b94:	5f e3       	ldi	r21, 0x3F	; 63
    2b96:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b9a:	88 23       	and	r24, r24
    2b9c:	2c f4       	brge	.+10     	; 0x2ba8 <LCD_voidSendCmd+0x28c>
		__ticks = 1;
    2b9e:	81 e0       	ldi	r24, 0x01	; 1
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	9f 83       	std	Y+7, r25	; 0x07
    2ba4:	8e 83       	std	Y+6, r24	; 0x06
    2ba6:	3f c0       	rjmp	.+126    	; 0x2c26 <LCD_voidSendCmd+0x30a>
	else if (__tmp > 65535)
    2ba8:	68 85       	ldd	r22, Y+8	; 0x08
    2baa:	79 85       	ldd	r23, Y+9	; 0x09
    2bac:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bae:	9b 85       	ldd	r25, Y+11	; 0x0b
    2bb0:	20 e0       	ldi	r18, 0x00	; 0
    2bb2:	3f ef       	ldi	r19, 0xFF	; 255
    2bb4:	4f e7       	ldi	r20, 0x7F	; 127
    2bb6:	57 e4       	ldi	r21, 0x47	; 71
    2bb8:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2bbc:	18 16       	cp	r1, r24
    2bbe:	4c f5       	brge	.+82     	; 0x2c12 <LCD_voidSendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    2bc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    2bc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    2bc8:	20 e0       	ldi	r18, 0x00	; 0
    2bca:	30 e0       	ldi	r19, 0x00	; 0
    2bcc:	40 e2       	ldi	r20, 0x20	; 32
    2bce:	51 e4       	ldi	r21, 0x41	; 65
    2bd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bd4:	dc 01       	movw	r26, r24
    2bd6:	cb 01       	movw	r24, r22
    2bd8:	bc 01       	movw	r22, r24
    2bda:	cd 01       	movw	r24, r26
    2bdc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2be0:	dc 01       	movw	r26, r24
    2be2:	cb 01       	movw	r24, r22
    2be4:	9f 83       	std	Y+7, r25	; 0x07
    2be6:	8e 83       	std	Y+6, r24	; 0x06
    2be8:	0f c0       	rjmp	.+30     	; 0x2c08 <LCD_voidSendCmd+0x2ec>
    2bea:	88 ec       	ldi	r24, 0xC8	; 200
    2bec:	90 e0       	ldi	r25, 0x00	; 0
    2bee:	9d 83       	std	Y+5, r25	; 0x05
    2bf0:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2bf2:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf4:	9d 81       	ldd	r25, Y+5	; 0x05
    2bf6:	01 97       	sbiw	r24, 0x01	; 1
    2bf8:	f1 f7       	brne	.-4      	; 0x2bf6 <LCD_voidSendCmd+0x2da>
    2bfa:	9d 83       	std	Y+5, r25	; 0x05
    2bfc:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bfe:	8e 81       	ldd	r24, Y+6	; 0x06
    2c00:	9f 81       	ldd	r25, Y+7	; 0x07
    2c02:	01 97       	sbiw	r24, 0x01	; 1
    2c04:	9f 83       	std	Y+7, r25	; 0x07
    2c06:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c08:	8e 81       	ldd	r24, Y+6	; 0x06
    2c0a:	9f 81       	ldd	r25, Y+7	; 0x07
    2c0c:	00 97       	sbiw	r24, 0x00	; 0
    2c0e:	69 f7       	brne	.-38     	; 0x2bea <LCD_voidSendCmd+0x2ce>
    2c10:	24 c0       	rjmp	.+72     	; 0x2c5a <LCD_voidSendCmd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c12:	68 85       	ldd	r22, Y+8	; 0x08
    2c14:	79 85       	ldd	r23, Y+9	; 0x09
    2c16:	8a 85       	ldd	r24, Y+10	; 0x0a
    2c18:	9b 85       	ldd	r25, Y+11	; 0x0b
    2c1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c1e:	dc 01       	movw	r26, r24
    2c20:	cb 01       	movw	r24, r22
    2c22:	9f 83       	std	Y+7, r25	; 0x07
    2c24:	8e 83       	std	Y+6, r24	; 0x06
    2c26:	8e 81       	ldd	r24, Y+6	; 0x06
    2c28:	9f 81       	ldd	r25, Y+7	; 0x07
    2c2a:	9b 83       	std	Y+3, r25	; 0x03
    2c2c:	8a 83       	std	Y+2, r24	; 0x02
    2c2e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c30:	9b 81       	ldd	r25, Y+3	; 0x03
    2c32:	01 97       	sbiw	r24, 0x01	; 1
    2c34:	f1 f7       	brne	.-4      	; 0x2c32 <LCD_voidSendCmd+0x316>
    2c36:	9b 83       	std	Y+3, r25	; 0x03
    2c38:	8a 83       	std	Y+2, r24	; 0x02
    2c3a:	0f c0       	rjmp	.+30     	; 0x2c5a <LCD_voidSendCmd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2c3c:	69 89       	ldd	r22, Y+17	; 0x11
    2c3e:	7a 89       	ldd	r23, Y+18	; 0x12
    2c40:	8b 89       	ldd	r24, Y+19	; 0x13
    2c42:	9c 89       	ldd	r25, Y+20	; 0x14
    2c44:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c48:	dc 01       	movw	r26, r24
    2c4a:	cb 01       	movw	r24, r22
    2c4c:	88 8b       	std	Y+16, r24	; 0x10
    2c4e:	88 89       	ldd	r24, Y+16	; 0x10
    2c50:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2c52:	89 81       	ldd	r24, Y+1	; 0x01
    2c54:	8a 95       	dec	r24
    2c56:	f1 f7       	brne	.-4      	; 0x2c54 <LCD_voidSendCmd+0x338>
    2c58:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2c5a:	e1 96       	adiw	r28, 0x31	; 49
    2c5c:	0f b6       	in	r0, 0x3f	; 63
    2c5e:	f8 94       	cli
    2c60:	de bf       	out	0x3e, r29	; 62
    2c62:	0f be       	out	0x3f, r0	; 63
    2c64:	cd bf       	out	0x3d, r28	; 61
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
    2c74:	e1 97       	sbiw	r28, 0x31	; 49
    2c76:	0f b6       	in	r0, 0x3f	; 63
    2c78:	f8 94       	cli
    2c7a:	de bf       	out	0x3e, r29	; 62
    2c7c:	0f be       	out	0x3f, r0	; 63
    2c7e:	cd bf       	out	0x3d, r28	; 61
    2c80:	89 ab       	std	Y+49, r24	; 0x31
	//rs=1
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    2c82:	80 e0       	ldi	r24, 0x00	; 0
    2c84:	60 e0       	ldi	r22, 0x00	; 0
    2c86:	41 e0       	ldi	r20, 0x01	; 1
    2c88:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    2c8c:	80 e0       	ldi	r24, 0x00	; 0
    2c8e:	61 e0       	ldi	r22, 0x01	; 1
    2c90:	40 e0       	ldi	r20, 0x00	; 0
    2c92:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Char);
    2c96:	81 e0       	ldi	r24, 0x01	; 1
    2c98:	69 a9       	ldd	r22, Y+49	; 0x31
    2c9a:	0e 94 27 0a 	call	0x144e	; 0x144e <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    2c9e:	80 e0       	ldi	r24, 0x00	; 0
    2ca0:	62 e0       	ldi	r22, 0x02	; 2
    2ca2:	41 e0       	ldi	r20, 0x01	; 1
    2ca4:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2ca8:	80 e0       	ldi	r24, 0x00	; 0
    2caa:	90 e0       	ldi	r25, 0x00	; 0
    2cac:	a0 e8       	ldi	r26, 0x80	; 128
    2cae:	bf e3       	ldi	r27, 0x3F	; 63
    2cb0:	8d a7       	std	Y+45, r24	; 0x2d
    2cb2:	9e a7       	std	Y+46, r25	; 0x2e
    2cb4:	af a7       	std	Y+47, r26	; 0x2f
    2cb6:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2cb8:	6d a5       	ldd	r22, Y+45	; 0x2d
    2cba:	7e a5       	ldd	r23, Y+46	; 0x2e
    2cbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2cbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2cc0:	2b ea       	ldi	r18, 0xAB	; 171
    2cc2:	3a ea       	ldi	r19, 0xAA	; 170
    2cc4:	4a e2       	ldi	r20, 0x2A	; 42
    2cc6:	50 e4       	ldi	r21, 0x40	; 64
    2cc8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ccc:	dc 01       	movw	r26, r24
    2cce:	cb 01       	movw	r24, r22
    2cd0:	89 a7       	std	Y+41, r24	; 0x29
    2cd2:	9a a7       	std	Y+42, r25	; 0x2a
    2cd4:	ab a7       	std	Y+43, r26	; 0x2b
    2cd6:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    2cd8:	69 a5       	ldd	r22, Y+41	; 0x29
    2cda:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cdc:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cde:	9c a5       	ldd	r25, Y+44	; 0x2c
    2ce0:	20 e0       	ldi	r18, 0x00	; 0
    2ce2:	30 e0       	ldi	r19, 0x00	; 0
    2ce4:	40 e8       	ldi	r20, 0x80	; 128
    2ce6:	5f e3       	ldi	r21, 0x3F	; 63
    2ce8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2cec:	88 23       	and	r24, r24
    2cee:	1c f4       	brge	.+6      	; 0x2cf6 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2cf0:	81 e0       	ldi	r24, 0x01	; 1
    2cf2:	88 a7       	std	Y+40, r24	; 0x28
    2cf4:	91 c0       	rjmp	.+290    	; 0x2e18 <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2cf6:	69 a5       	ldd	r22, Y+41	; 0x29
    2cf8:	7a a5       	ldd	r23, Y+42	; 0x2a
    2cfa:	8b a5       	ldd	r24, Y+43	; 0x2b
    2cfc:	9c a5       	ldd	r25, Y+44	; 0x2c
    2cfe:	20 e0       	ldi	r18, 0x00	; 0
    2d00:	30 e0       	ldi	r19, 0x00	; 0
    2d02:	4f e7       	ldi	r20, 0x7F	; 127
    2d04:	53 e4       	ldi	r21, 0x43	; 67
    2d06:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d0a:	18 16       	cp	r1, r24
    2d0c:	0c f0       	brlt	.+2      	; 0x2d10 <LCD_voidSendChar+0xa4>
    2d0e:	7b c0       	rjmp	.+246    	; 0x2e06 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2d10:	6d a5       	ldd	r22, Y+45	; 0x2d
    2d12:	7e a5       	ldd	r23, Y+46	; 0x2e
    2d14:	8f a5       	ldd	r24, Y+47	; 0x2f
    2d16:	98 a9       	ldd	r25, Y+48	; 0x30
    2d18:	20 e0       	ldi	r18, 0x00	; 0
    2d1a:	30 e0       	ldi	r19, 0x00	; 0
    2d1c:	4a e7       	ldi	r20, 0x7A	; 122
    2d1e:	54 e4       	ldi	r21, 0x44	; 68
    2d20:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2d24:	dc 01       	movw	r26, r24
    2d26:	cb 01       	movw	r24, r22
    2d28:	8c a3       	std	Y+36, r24	; 0x24
    2d2a:	9d a3       	std	Y+37, r25	; 0x25
    2d2c:	ae a3       	std	Y+38, r26	; 0x26
    2d2e:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d30:	6c a1       	ldd	r22, Y+36	; 0x24
    2d32:	7d a1       	ldd	r23, Y+37	; 0x25
    2d34:	8e a1       	ldd	r24, Y+38	; 0x26
    2d36:	9f a1       	ldd	r25, Y+39	; 0x27
    2d38:	20 e0       	ldi	r18, 0x00	; 0
    2d3a:	30 e0       	ldi	r19, 0x00	; 0
    2d3c:	4a ef       	ldi	r20, 0xFA	; 250
    2d3e:	54 e4       	ldi	r21, 0x44	; 68
    2d40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d44:	dc 01       	movw	r26, r24
    2d46:	cb 01       	movw	r24, r22
    2d48:	88 a3       	std	Y+32, r24	; 0x20
    2d4a:	99 a3       	std	Y+33, r25	; 0x21
    2d4c:	aa a3       	std	Y+34, r26	; 0x22
    2d4e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2d50:	68 a1       	ldd	r22, Y+32	; 0x20
    2d52:	79 a1       	ldd	r23, Y+33	; 0x21
    2d54:	8a a1       	ldd	r24, Y+34	; 0x22
    2d56:	9b a1       	ldd	r25, Y+35	; 0x23
    2d58:	20 e0       	ldi	r18, 0x00	; 0
    2d5a:	30 e0       	ldi	r19, 0x00	; 0
    2d5c:	40 e8       	ldi	r20, 0x80	; 128
    2d5e:	5f e3       	ldi	r21, 0x3F	; 63
    2d60:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d64:	88 23       	and	r24, r24
    2d66:	2c f4       	brge	.+10     	; 0x2d72 <LCD_voidSendChar+0x106>
		__ticks = 1;
    2d68:	81 e0       	ldi	r24, 0x01	; 1
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	9f 8f       	std	Y+31, r25	; 0x1f
    2d6e:	8e 8f       	std	Y+30, r24	; 0x1e
    2d70:	3f c0       	rjmp	.+126    	; 0x2df0 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2d72:	68 a1       	ldd	r22, Y+32	; 0x20
    2d74:	79 a1       	ldd	r23, Y+33	; 0x21
    2d76:	8a a1       	ldd	r24, Y+34	; 0x22
    2d78:	9b a1       	ldd	r25, Y+35	; 0x23
    2d7a:	20 e0       	ldi	r18, 0x00	; 0
    2d7c:	3f ef       	ldi	r19, 0xFF	; 255
    2d7e:	4f e7       	ldi	r20, 0x7F	; 127
    2d80:	57 e4       	ldi	r21, 0x47	; 71
    2d82:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d86:	18 16       	cp	r1, r24
    2d88:	4c f5       	brge	.+82     	; 0x2ddc <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d8a:	6c a1       	ldd	r22, Y+36	; 0x24
    2d8c:	7d a1       	ldd	r23, Y+37	; 0x25
    2d8e:	8e a1       	ldd	r24, Y+38	; 0x26
    2d90:	9f a1       	ldd	r25, Y+39	; 0x27
    2d92:	20 e0       	ldi	r18, 0x00	; 0
    2d94:	30 e0       	ldi	r19, 0x00	; 0
    2d96:	40 e2       	ldi	r20, 0x20	; 32
    2d98:	51 e4       	ldi	r21, 0x41	; 65
    2d9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9e:	dc 01       	movw	r26, r24
    2da0:	cb 01       	movw	r24, r22
    2da2:	bc 01       	movw	r22, r24
    2da4:	cd 01       	movw	r24, r26
    2da6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2daa:	dc 01       	movw	r26, r24
    2dac:	cb 01       	movw	r24, r22
    2dae:	9f 8f       	std	Y+31, r25	; 0x1f
    2db0:	8e 8f       	std	Y+30, r24	; 0x1e
    2db2:	0f c0       	rjmp	.+30     	; 0x2dd2 <LCD_voidSendChar+0x166>
    2db4:	88 ec       	ldi	r24, 0xC8	; 200
    2db6:	90 e0       	ldi	r25, 0x00	; 0
    2db8:	9d 8f       	std	Y+29, r25	; 0x1d
    2dba:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2dbc:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2dbe:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2dc0:	01 97       	sbiw	r24, 0x01	; 1
    2dc2:	f1 f7       	brne	.-4      	; 0x2dc0 <LCD_voidSendChar+0x154>
    2dc4:	9d 8f       	std	Y+29, r25	; 0x1d
    2dc6:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc8:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dca:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dcc:	01 97       	sbiw	r24, 0x01	; 1
    2dce:	9f 8f       	std	Y+31, r25	; 0x1f
    2dd0:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2dd4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2dd6:	00 97       	sbiw	r24, 0x00	; 0
    2dd8:	69 f7       	brne	.-38     	; 0x2db4 <LCD_voidSendChar+0x148>
    2dda:	24 c0       	rjmp	.+72     	; 0x2e24 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ddc:	68 a1       	ldd	r22, Y+32	; 0x20
    2dde:	79 a1       	ldd	r23, Y+33	; 0x21
    2de0:	8a a1       	ldd	r24, Y+34	; 0x22
    2de2:	9b a1       	ldd	r25, Y+35	; 0x23
    2de4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de8:	dc 01       	movw	r26, r24
    2dea:	cb 01       	movw	r24, r22
    2dec:	9f 8f       	std	Y+31, r25	; 0x1f
    2dee:	8e 8f       	std	Y+30, r24	; 0x1e
    2df0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2df2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2df4:	9b 8f       	std	Y+27, r25	; 0x1b
    2df6:	8a 8f       	std	Y+26, r24	; 0x1a
    2df8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    2dfa:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2dfc:	01 97       	sbiw	r24, 0x01	; 1
    2dfe:	f1 f7       	brne	.-4      	; 0x2dfc <LCD_voidSendChar+0x190>
    2e00:	9b 8f       	std	Y+27, r25	; 0x1b
    2e02:	8a 8f       	std	Y+26, r24	; 0x1a
    2e04:	0f c0       	rjmp	.+30     	; 0x2e24 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2e06:	69 a5       	ldd	r22, Y+41	; 0x29
    2e08:	7a a5       	ldd	r23, Y+42	; 0x2a
    2e0a:	8b a5       	ldd	r24, Y+43	; 0x2b
    2e0c:	9c a5       	ldd	r25, Y+44	; 0x2c
    2e0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e12:	dc 01       	movw	r26, r24
    2e14:	cb 01       	movw	r24, r22
    2e16:	88 a7       	std	Y+40, r24	; 0x28
    2e18:	88 a5       	ldd	r24, Y+40	; 0x28
    2e1a:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2e1c:	89 8d       	ldd	r24, Y+25	; 0x19
    2e1e:	8a 95       	dec	r24
    2e20:	f1 f7       	brne	.-4      	; 0x2e1e <LCD_voidSendChar+0x1b2>
    2e22:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    2e24:	80 e0       	ldi	r24, 0x00	; 0
    2e26:	62 e0       	ldi	r22, 0x02	; 2
    2e28:	40 e0       	ldi	r20, 0x00	; 0
    2e2a:	0e 94 9e 07 	call	0xf3c	; 0xf3c <DIO_u8SetPinValue>
    2e2e:	80 e0       	ldi	r24, 0x00	; 0
    2e30:	90 e0       	ldi	r25, 0x00	; 0
    2e32:	a0 e8       	ldi	r26, 0x80	; 128
    2e34:	bf e3       	ldi	r27, 0x3F	; 63
    2e36:	8d 8b       	std	Y+21, r24	; 0x15
    2e38:	9e 8b       	std	Y+22, r25	; 0x16
    2e3a:	af 8b       	std	Y+23, r26	; 0x17
    2e3c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2e3e:	6d 89       	ldd	r22, Y+21	; 0x15
    2e40:	7e 89       	ldd	r23, Y+22	; 0x16
    2e42:	8f 89       	ldd	r24, Y+23	; 0x17
    2e44:	98 8d       	ldd	r25, Y+24	; 0x18
    2e46:	2b ea       	ldi	r18, 0xAB	; 171
    2e48:	3a ea       	ldi	r19, 0xAA	; 170
    2e4a:	4a e2       	ldi	r20, 0x2A	; 42
    2e4c:	50 e4       	ldi	r21, 0x40	; 64
    2e4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e52:	dc 01       	movw	r26, r24
    2e54:	cb 01       	movw	r24, r22
    2e56:	89 8b       	std	Y+17, r24	; 0x11
    2e58:	9a 8b       	std	Y+18, r25	; 0x12
    2e5a:	ab 8b       	std	Y+19, r26	; 0x13
    2e5c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2e5e:	69 89       	ldd	r22, Y+17	; 0x11
    2e60:	7a 89       	ldd	r23, Y+18	; 0x12
    2e62:	8b 89       	ldd	r24, Y+19	; 0x13
    2e64:	9c 89       	ldd	r25, Y+20	; 0x14
    2e66:	20 e0       	ldi	r18, 0x00	; 0
    2e68:	30 e0       	ldi	r19, 0x00	; 0
    2e6a:	40 e8       	ldi	r20, 0x80	; 128
    2e6c:	5f e3       	ldi	r21, 0x3F	; 63
    2e6e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e72:	88 23       	and	r24, r24
    2e74:	1c f4       	brge	.+6      	; 0x2e7c <LCD_voidSendChar+0x210>
		__ticks = 1;
    2e76:	81 e0       	ldi	r24, 0x01	; 1
    2e78:	88 8b       	std	Y+16, r24	; 0x10
    2e7a:	91 c0       	rjmp	.+290    	; 0x2f9e <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    2e7c:	69 89       	ldd	r22, Y+17	; 0x11
    2e7e:	7a 89       	ldd	r23, Y+18	; 0x12
    2e80:	8b 89       	ldd	r24, Y+19	; 0x13
    2e82:	9c 89       	ldd	r25, Y+20	; 0x14
    2e84:	20 e0       	ldi	r18, 0x00	; 0
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	4f e7       	ldi	r20, 0x7F	; 127
    2e8a:	53 e4       	ldi	r21, 0x43	; 67
    2e8c:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e90:	18 16       	cp	r1, r24
    2e92:	0c f0       	brlt	.+2      	; 0x2e96 <LCD_voidSendChar+0x22a>
    2e94:	7b c0       	rjmp	.+246    	; 0x2f8c <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    2e96:	6d 89       	ldd	r22, Y+21	; 0x15
    2e98:	7e 89       	ldd	r23, Y+22	; 0x16
    2e9a:	8f 89       	ldd	r24, Y+23	; 0x17
    2e9c:	98 8d       	ldd	r25, Y+24	; 0x18
    2e9e:	20 e0       	ldi	r18, 0x00	; 0
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	4a e7       	ldi	r20, 0x7A	; 122
    2ea4:	54 e4       	ldi	r21, 0x44	; 68
    2ea6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	8c 87       	std	Y+12, r24	; 0x0c
    2eb0:	9d 87       	std	Y+13, r25	; 0x0d
    2eb2:	ae 87       	std	Y+14, r26	; 0x0e
    2eb4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2eb6:	6c 85       	ldd	r22, Y+12	; 0x0c
    2eb8:	7d 85       	ldd	r23, Y+13	; 0x0d
    2eba:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ebc:	9f 85       	ldd	r25, Y+15	; 0x0f
    2ebe:	20 e0       	ldi	r18, 0x00	; 0
    2ec0:	30 e0       	ldi	r19, 0x00	; 0
    2ec2:	4a ef       	ldi	r20, 0xFA	; 250
    2ec4:	54 e4       	ldi	r21, 0x44	; 68
    2ec6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2eca:	dc 01       	movw	r26, r24
    2ecc:	cb 01       	movw	r24, r22
    2ece:	88 87       	std	Y+8, r24	; 0x08
    2ed0:	99 87       	std	Y+9, r25	; 0x09
    2ed2:	aa 87       	std	Y+10, r26	; 0x0a
    2ed4:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2ed6:	68 85       	ldd	r22, Y+8	; 0x08
    2ed8:	79 85       	ldd	r23, Y+9	; 0x09
    2eda:	8a 85       	ldd	r24, Y+10	; 0x0a
    2edc:	9b 85       	ldd	r25, Y+11	; 0x0b
    2ede:	20 e0       	ldi	r18, 0x00	; 0
    2ee0:	30 e0       	ldi	r19, 0x00	; 0
    2ee2:	40 e8       	ldi	r20, 0x80	; 128
    2ee4:	5f e3       	ldi	r21, 0x3F	; 63
    2ee6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2eea:	88 23       	and	r24, r24
    2eec:	2c f4       	brge	.+10     	; 0x2ef8 <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2eee:	81 e0       	ldi	r24, 0x01	; 1
    2ef0:	90 e0       	ldi	r25, 0x00	; 0
    2ef2:	9f 83       	std	Y+7, r25	; 0x07
    2ef4:	8e 83       	std	Y+6, r24	; 0x06
    2ef6:	3f c0       	rjmp	.+126    	; 0x2f76 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    2ef8:	68 85       	ldd	r22, Y+8	; 0x08
    2efa:	79 85       	ldd	r23, Y+9	; 0x09
    2efc:	8a 85       	ldd	r24, Y+10	; 0x0a
    2efe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f00:	20 e0       	ldi	r18, 0x00	; 0
    2f02:	3f ef       	ldi	r19, 0xFF	; 255
    2f04:	4f e7       	ldi	r20, 0x7F	; 127
    2f06:	57 e4       	ldi	r21, 0x47	; 71
    2f08:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f0c:	18 16       	cp	r1, r24
    2f0e:	4c f5       	brge	.+82     	; 0x2f62 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f10:	6c 85       	ldd	r22, Y+12	; 0x0c
    2f12:	7d 85       	ldd	r23, Y+13	; 0x0d
    2f14:	8e 85       	ldd	r24, Y+14	; 0x0e
    2f16:	9f 85       	ldd	r25, Y+15	; 0x0f
    2f18:	20 e0       	ldi	r18, 0x00	; 0
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	40 e2       	ldi	r20, 0x20	; 32
    2f1e:	51 e4       	ldi	r21, 0x41	; 65
    2f20:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f24:	dc 01       	movw	r26, r24
    2f26:	cb 01       	movw	r24, r22
    2f28:	bc 01       	movw	r22, r24
    2f2a:	cd 01       	movw	r24, r26
    2f2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f30:	dc 01       	movw	r26, r24
    2f32:	cb 01       	movw	r24, r22
    2f34:	9f 83       	std	Y+7, r25	; 0x07
    2f36:	8e 83       	std	Y+6, r24	; 0x06
    2f38:	0f c0       	rjmp	.+30     	; 0x2f58 <LCD_voidSendChar+0x2ec>
    2f3a:	88 ec       	ldi	r24, 0xC8	; 200
    2f3c:	90 e0       	ldi	r25, 0x00	; 0
    2f3e:	9d 83       	std	Y+5, r25	; 0x05
    2f40:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2f42:	8c 81       	ldd	r24, Y+4	; 0x04
    2f44:	9d 81       	ldd	r25, Y+5	; 0x05
    2f46:	01 97       	sbiw	r24, 0x01	; 1
    2f48:	f1 f7       	brne	.-4      	; 0x2f46 <LCD_voidSendChar+0x2da>
    2f4a:	9d 83       	std	Y+5, r25	; 0x05
    2f4c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f4e:	8e 81       	ldd	r24, Y+6	; 0x06
    2f50:	9f 81       	ldd	r25, Y+7	; 0x07
    2f52:	01 97       	sbiw	r24, 0x01	; 1
    2f54:	9f 83       	std	Y+7, r25	; 0x07
    2f56:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f58:	8e 81       	ldd	r24, Y+6	; 0x06
    2f5a:	9f 81       	ldd	r25, Y+7	; 0x07
    2f5c:	00 97       	sbiw	r24, 0x00	; 0
    2f5e:	69 f7       	brne	.-38     	; 0x2f3a <LCD_voidSendChar+0x2ce>
    2f60:	24 c0       	rjmp	.+72     	; 0x2faa <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f62:	68 85       	ldd	r22, Y+8	; 0x08
    2f64:	79 85       	ldd	r23, Y+9	; 0x09
    2f66:	8a 85       	ldd	r24, Y+10	; 0x0a
    2f68:	9b 85       	ldd	r25, Y+11	; 0x0b
    2f6a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6e:	dc 01       	movw	r26, r24
    2f70:	cb 01       	movw	r24, r22
    2f72:	9f 83       	std	Y+7, r25	; 0x07
    2f74:	8e 83       	std	Y+6, r24	; 0x06
    2f76:	8e 81       	ldd	r24, Y+6	; 0x06
    2f78:	9f 81       	ldd	r25, Y+7	; 0x07
    2f7a:	9b 83       	std	Y+3, r25	; 0x03
    2f7c:	8a 83       	std	Y+2, r24	; 0x02
    2f7e:	8a 81       	ldd	r24, Y+2	; 0x02
    2f80:	9b 81       	ldd	r25, Y+3	; 0x03
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <LCD_voidSendChar+0x316>
    2f86:	9b 83       	std	Y+3, r25	; 0x03
    2f88:	8a 83       	std	Y+2, r24	; 0x02
    2f8a:	0f c0       	rjmp	.+30     	; 0x2faa <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2f8c:	69 89       	ldd	r22, Y+17	; 0x11
    2f8e:	7a 89       	ldd	r23, Y+18	; 0x12
    2f90:	8b 89       	ldd	r24, Y+19	; 0x13
    2f92:	9c 89       	ldd	r25, Y+20	; 0x14
    2f94:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f98:	dc 01       	movw	r26, r24
    2f9a:	cb 01       	movw	r24, r22
    2f9c:	88 8b       	std	Y+16, r24	; 0x10
    2f9e:	88 89       	ldd	r24, Y+16	; 0x10
    2fa0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2fa2:	89 81       	ldd	r24, Y+1	; 0x01
    2fa4:	8a 95       	dec	r24
    2fa6:	f1 f7       	brne	.-4      	; 0x2fa4 <LCD_voidSendChar+0x338>
    2fa8:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    2faa:	e1 96       	adiw	r28, 0x31	; 49
    2fac:	0f b6       	in	r0, 0x3f	; 63
    2fae:	f8 94       	cli
    2fb0:	de bf       	out	0x3e, r29	; 62
    2fb2:	0f be       	out	0x3f, r0	; 63
    2fb4:	cd bf       	out	0x3d, r28	; 61
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <LCD_voidSendString>:
void LCD_voidSendString(u8 *Copy_up8Arr)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	00 d0       	rcall	.+0      	; 0x2fc2 <LCD_voidSendString+0x6>
    2fc2:	00 d0       	rcall	.+0      	; 0x2fc4 <LCD_voidSendString+0x8>
    2fc4:	cd b7       	in	r28, 0x3d	; 61
    2fc6:	de b7       	in	r29, 0x3e	; 62
    2fc8:	9c 83       	std	Y+4, r25	; 0x04
    2fca:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    2fcc:	1a 82       	std	Y+2, r1	; 0x02
    2fce:	19 82       	std	Y+1, r1	; 0x01
    2fd0:	0f c0       	rjmp	.+30     	; 0x2ff0 <LCD_voidSendString+0x34>
	while (Copy_up8Arr[i]!=0)
	{
		LCD_voidSendChar(Copy_up8Arr[i]);
    2fd2:	29 81       	ldd	r18, Y+1	; 0x01
    2fd4:	3a 81       	ldd	r19, Y+2	; 0x02
    2fd6:	8b 81       	ldd	r24, Y+3	; 0x03
    2fd8:	9c 81       	ldd	r25, Y+4	; 0x04
    2fda:	fc 01       	movw	r30, r24
    2fdc:	e2 0f       	add	r30, r18
    2fde:	f3 1f       	adc	r31, r19
    2fe0:	80 81       	ld	r24, Z
    2fe2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_voidSendChar>
		i++;
    2fe6:	89 81       	ldd	r24, Y+1	; 0x01
    2fe8:	9a 81       	ldd	r25, Y+2	; 0x02
    2fea:	01 96       	adiw	r24, 0x01	; 1
    2fec:	9a 83       	std	Y+2, r25	; 0x02
    2fee:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
void LCD_voidSendString(u8 *Copy_up8Arr)
{
	int i=0;
	while (Copy_up8Arr[i]!=0)
    2ff0:	29 81       	ldd	r18, Y+1	; 0x01
    2ff2:	3a 81       	ldd	r19, Y+2	; 0x02
    2ff4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ff6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ff8:	fc 01       	movw	r30, r24
    2ffa:	e2 0f       	add	r30, r18
    2ffc:	f3 1f       	adc	r31, r19
    2ffe:	80 81       	ld	r24, Z
    3000:	88 23       	and	r24, r24
    3002:	39 f7       	brne	.-50     	; 0x2fd2 <LCD_voidSendString+0x16>
		i++;

	}


}
    3004:	0f 90       	pop	r0
    3006:	0f 90       	pop	r0
    3008:	0f 90       	pop	r0
    300a:	0f 90       	pop	r0
    300c:	cf 91       	pop	r28
    300e:	df 91       	pop	r29
    3010:	08 95       	ret

00003012 <LCD_voidClear>:
void LCD_voidClear(void)
{
    3012:	df 93       	push	r29
    3014:	cf 93       	push	r28
    3016:	cd b7       	in	r28, 0x3d	; 61
    3018:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmd(0b0000000001);
    301a:	81 e0       	ldi	r24, 0x01	; 1
    301c:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
}
    3020:	cf 91       	pop	r28
    3022:	df 91       	pop	r29
    3024:	08 95       	ret

00003026 <LCD_voidGoToRowColumn>:
void LCD_voidGoToRowColumn(u8 Copy_u8Row,u8 Copy_u8Column)
{
    3026:	df 93       	push	r29
    3028:	cf 93       	push	r28
    302a:	00 d0       	rcall	.+0      	; 0x302c <LCD_voidGoToRowColumn+0x6>
    302c:	00 d0       	rcall	.+0      	; 0x302e <LCD_voidGoToRowColumn+0x8>
    302e:	cd b7       	in	r28, 0x3d	; 61
    3030:	de b7       	in	r29, 0x3e	; 62
    3032:	89 83       	std	Y+1, r24	; 0x01
    3034:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8Row <= ROW2) && (Copy_u8Column < 39))
    3036:	89 81       	ldd	r24, Y+1	; 0x01
    3038:	82 30       	cpi	r24, 0x02	; 2
    303a:	d8 f4       	brcc	.+54     	; 0x3072 <LCD_voidGoToRowColumn+0x4c>
    303c:	8a 81       	ldd	r24, Y+2	; 0x02
    303e:	87 32       	cpi	r24, 0x27	; 39
    3040:	c0 f4       	brcc	.+48     	; 0x3072 <LCD_voidGoToRowColumn+0x4c>
	{
		switch(Copy_u8Row)
    3042:	89 81       	ldd	r24, Y+1	; 0x01
    3044:	28 2f       	mov	r18, r24
    3046:	30 e0       	ldi	r19, 0x00	; 0
    3048:	3c 83       	std	Y+4, r19	; 0x04
    304a:	2b 83       	std	Y+3, r18	; 0x03
    304c:	8b 81       	ldd	r24, Y+3	; 0x03
    304e:	9c 81       	ldd	r25, Y+4	; 0x04
    3050:	00 97       	sbiw	r24, 0x00	; 0
    3052:	31 f0       	breq	.+12     	; 0x3060 <LCD_voidGoToRowColumn+0x3a>
    3054:	2b 81       	ldd	r18, Y+3	; 0x03
    3056:	3c 81       	ldd	r19, Y+4	; 0x04
    3058:	21 30       	cpi	r18, 0x01	; 1
    305a:	31 05       	cpc	r19, r1
    305c:	31 f0       	breq	.+12     	; 0x306a <LCD_voidGoToRowColumn+0x44>
    305e:	09 c0       	rjmp	.+18     	; 0x3072 <LCD_voidGoToRowColumn+0x4c>
		{
		case ROW1:{LCD_voidSendCmd(0x80+Copy_u8Column);break;}
    3060:	8a 81       	ldd	r24, Y+2	; 0x02
    3062:	80 58       	subi	r24, 0x80	; 128
    3064:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
    3068:	04 c0       	rjmp	.+8      	; 0x3072 <LCD_voidGoToRowColumn+0x4c>
		case ROW2:{LCD_voidSendCmd(0xC0+Copy_u8Column);break;}
    306a:	8a 81       	ldd	r24, Y+2	; 0x02
    306c:	80 54       	subi	r24, 0x40	; 64
    306e:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
		}
	}
}
    3072:	0f 90       	pop	r0
    3074:	0f 90       	pop	r0
    3076:	0f 90       	pop	r0
    3078:	0f 90       	pop	r0
    307a:	cf 91       	pop	r28
    307c:	df 91       	pop	r29
    307e:	08 95       	ret

00003080 <LCD_voidSendSpecialChar>:
{
	  Array[i]=num%10;
	  Array[i+1]=int(num/10);
}*/
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
    3080:	df 93       	push	r29
    3082:	cf 93       	push	r28
    3084:	cd b7       	in	r28, 0x3d	; 61
    3086:	de b7       	in	r29, 0x3e	; 62
    3088:	28 97       	sbiw	r28, 0x08	; 8
    308a:	0f b6       	in	r0, 0x3f	; 63
    308c:	f8 94       	cli
    308e:	de bf       	out	0x3e, r29	; 62
    3090:	0f be       	out	0x3f, r0	; 63
    3092:	cd bf       	out	0x3d, r28	; 61
    3094:	8c 83       	std	Y+4, r24	; 0x04
    3096:	7e 83       	std	Y+6, r23	; 0x06
    3098:	6d 83       	std	Y+5, r22	; 0x05
    309a:	4f 83       	std	Y+7, r20	; 0x07
    309c:	28 87       	std	Y+8, r18	; 0x08
	u8 Local;
	Local=Copy_u8Index*8;
    309e:	8c 81       	ldd	r24, Y+4	; 0x04
    30a0:	88 2f       	mov	r24, r24
    30a2:	90 e0       	ldi	r25, 0x00	; 0
    30a4:	88 0f       	add	r24, r24
    30a6:	99 1f       	adc	r25, r25
    30a8:	88 0f       	add	r24, r24
    30aa:	99 1f       	adc	r25, r25
    30ac:	88 0f       	add	r24, r24
    30ae:	99 1f       	adc	r25, r25
    30b0:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
    30b2:	8b 81       	ldd	r24, Y+3	; 0x03
    30b4:	80 5c       	subi	r24, 0xC0	; 192
    30b6:	0e 94 8e 14 	call	0x291c	; 0x291c <LCD_voidSendCmd>
	for(int i=0;i<=8;i++)
    30ba:	1a 82       	std	Y+2, r1	; 0x02
    30bc:	19 82       	std	Y+1, r1	; 0x01
    30be:	0f c0       	rjmp	.+30     	; 0x30de <LCD_voidSendSpecialChar+0x5e>
	{
		LCD_voidSendChar(Copy_pu8SpecialChar[i]);
    30c0:	29 81       	ldd	r18, Y+1	; 0x01
    30c2:	3a 81       	ldd	r19, Y+2	; 0x02
    30c4:	8d 81       	ldd	r24, Y+5	; 0x05
    30c6:	9e 81       	ldd	r25, Y+6	; 0x06
    30c8:	fc 01       	movw	r30, r24
    30ca:	e2 0f       	add	r30, r18
    30cc:	f3 1f       	adc	r31, r19
    30ce:	80 81       	ld	r24, Z
    30d0:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_voidSendChar>
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
	u8 Local;
	Local=Copy_u8Index*8;
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
	for(int i=0;i<=8;i++)
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	01 96       	adiw	r24, 0x01	; 1
    30da:	9a 83       	std	Y+2, r25	; 0x02
    30dc:	89 83       	std	Y+1, r24	; 0x01
    30de:	89 81       	ldd	r24, Y+1	; 0x01
    30e0:	9a 81       	ldd	r25, Y+2	; 0x02
    30e2:	89 30       	cpi	r24, 0x09	; 9
    30e4:	91 05       	cpc	r25, r1
    30e6:	64 f3       	brlt	.-40     	; 0x30c0 <LCD_voidSendSpecialChar+0x40>
	{
		LCD_voidSendChar(Copy_pu8SpecialChar[i]);
	}

	LCD_voidGoToRowColumn(Copy_u8Row,Copy_u8Column);//access DDRAM
    30e8:	8f 81       	ldd	r24, Y+7	; 0x07
    30ea:	68 85       	ldd	r22, Y+8	; 0x08
    30ec:	0e 94 13 18 	call	0x3026	; 0x3026 <LCD_voidGoToRowColumn>
	LCD_voidSendChar(Copy_u8Index);
    30f0:	8c 81       	ldd	r24, Y+4	; 0x04
    30f2:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_voidSendChar>

}
    30f6:	28 96       	adiw	r28, 0x08	; 8
    30f8:	0f b6       	in	r0, 0x3f	; 63
    30fa:	f8 94       	cli
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	0f be       	out	0x3f, r0	; 63
    3100:	cd bf       	out	0x3d, r28	; 61
    3102:	cf 91       	pop	r28
    3104:	df 91       	pop	r29
    3106:	08 95       	ret

00003108 <LCD_voidSendNum>:
void LCD_voidSendNum(u32 Copy_u32Num)
{
    3108:	df 93       	push	r29
    310a:	cf 93       	push	r28
    310c:	cd b7       	in	r28, 0x3d	; 61
    310e:	de b7       	in	r29, 0x3e	; 62
    3110:	2e 97       	sbiw	r28, 0x0e	; 14
    3112:	0f b6       	in	r0, 0x3f	; 63
    3114:	f8 94       	cli
    3116:	de bf       	out	0x3e, r29	; 62
    3118:	0f be       	out	0x3f, r0	; 63
    311a:	cd bf       	out	0x3d, r28	; 61
    311c:	9e 87       	std	Y+14, r25	; 0x0e
    311e:	8d 87       	std	Y+13, r24	; 0x0d
	u8 l=0;u8 Arr[10];
    3120:	1a 82       	std	Y+2, r1	; 0x02
    3122:	1d c0       	rjmp	.+58     	; 0x315e <LCD_voidSendNum+0x56>
	while(Copy_u32Num!=0)
	{
		Arr[l]=Copy_u32Num%10;
    3124:	8a 81       	ldd	r24, Y+2	; 0x02
    3126:	e8 2f       	mov	r30, r24
    3128:	f0 e0       	ldi	r31, 0x00	; 0
    312a:	8d 85       	ldd	r24, Y+13	; 0x0d
    312c:	9e 85       	ldd	r25, Y+14	; 0x0e
    312e:	2a e0       	ldi	r18, 0x0A	; 10
    3130:	30 e0       	ldi	r19, 0x00	; 0
    3132:	b9 01       	movw	r22, r18
    3134:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__udivmodhi4>
    3138:	28 2f       	mov	r18, r24
    313a:	ce 01       	movw	r24, r28
    313c:	03 96       	adiw	r24, 0x03	; 3
    313e:	e8 0f       	add	r30, r24
    3140:	f9 1f       	adc	r31, r25
    3142:	20 83       	st	Z, r18
		Copy_u32Num=(Copy_u32Num/10);
    3144:	8d 85       	ldd	r24, Y+13	; 0x0d
    3146:	9e 85       	ldd	r25, Y+14	; 0x0e
    3148:	2a e0       	ldi	r18, 0x0A	; 10
    314a:	30 e0       	ldi	r19, 0x00	; 0
    314c:	b9 01       	movw	r22, r18
    314e:	0e 94 d4 18 	call	0x31a8	; 0x31a8 <__udivmodhi4>
    3152:	cb 01       	movw	r24, r22
    3154:	9e 87       	std	Y+14, r25	; 0x0e
    3156:	8d 87       	std	Y+13, r24	; 0x0d
		l++;
    3158:	8a 81       	ldd	r24, Y+2	; 0x02
    315a:	8f 5f       	subi	r24, 0xFF	; 255
    315c:	8a 83       	std	Y+2, r24	; 0x02

}
void LCD_voidSendNum(u32 Copy_u32Num)
{
	u8 l=0;u8 Arr[10];
	while(Copy_u32Num!=0)
    315e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3160:	9e 85       	ldd	r25, Y+14	; 0x0e
    3162:	00 97       	sbiw	r24, 0x00	; 0
    3164:	f9 f6       	brne	.-66     	; 0x3124 <LCD_voidSendNum+0x1c>
	{
		Arr[l]=Copy_u32Num%10;
		Copy_u32Num=(Copy_u32Num/10);
		l++;
	}
	for(s8 i=l-1;i>=0;i--)
    3166:	8a 81       	ldd	r24, Y+2	; 0x02
    3168:	81 50       	subi	r24, 0x01	; 1
    316a:	89 83       	std	Y+1, r24	; 0x01
    316c:	11 c0       	rjmp	.+34     	; 0x3190 <LCD_voidSendNum+0x88>
	{
		LCD_voidSendChar(Arr[i]+48);
    316e:	89 81       	ldd	r24, Y+1	; 0x01
    3170:	28 2f       	mov	r18, r24
    3172:	33 27       	eor	r19, r19
    3174:	27 fd       	sbrc	r18, 7
    3176:	30 95       	com	r19
    3178:	ce 01       	movw	r24, r28
    317a:	03 96       	adiw	r24, 0x03	; 3
    317c:	fc 01       	movw	r30, r24
    317e:	e2 0f       	add	r30, r18
    3180:	f3 1f       	adc	r31, r19
    3182:	80 81       	ld	r24, Z
    3184:	80 5d       	subi	r24, 0xD0	; 208
    3186:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <LCD_voidSendChar>
	{
		Arr[l]=Copy_u32Num%10;
		Copy_u32Num=(Copy_u32Num/10);
		l++;
	}
	for(s8 i=l-1;i>=0;i--)
    318a:	89 81       	ldd	r24, Y+1	; 0x01
    318c:	81 50       	subi	r24, 0x01	; 1
    318e:	89 83       	std	Y+1, r24	; 0x01
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	88 23       	and	r24, r24
    3194:	64 f7       	brge	.-40     	; 0x316e <LCD_voidSendNum+0x66>
	{
		LCD_voidSendChar(Arr[i]+48);
	}
}
    3196:	2e 96       	adiw	r28, 0x0e	; 14
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <__udivmodhi4>:
    31a8:	aa 1b       	sub	r26, r26
    31aa:	bb 1b       	sub	r27, r27
    31ac:	51 e1       	ldi	r21, 0x11	; 17
    31ae:	07 c0       	rjmp	.+14     	; 0x31be <__udivmodhi4_ep>

000031b0 <__udivmodhi4_loop>:
    31b0:	aa 1f       	adc	r26, r26
    31b2:	bb 1f       	adc	r27, r27
    31b4:	a6 17       	cp	r26, r22
    31b6:	b7 07       	cpc	r27, r23
    31b8:	10 f0       	brcs	.+4      	; 0x31be <__udivmodhi4_ep>
    31ba:	a6 1b       	sub	r26, r22
    31bc:	b7 0b       	sbc	r27, r23

000031be <__udivmodhi4_ep>:
    31be:	88 1f       	adc	r24, r24
    31c0:	99 1f       	adc	r25, r25
    31c2:	5a 95       	dec	r21
    31c4:	a9 f7       	brne	.-22     	; 0x31b0 <__udivmodhi4_loop>
    31c6:	80 95       	com	r24
    31c8:	90 95       	com	r25
    31ca:	bc 01       	movw	r22, r24
    31cc:	cd 01       	movw	r24, r26
    31ce:	08 95       	ret

000031d0 <__prologue_saves__>:
    31d0:	2f 92       	push	r2
    31d2:	3f 92       	push	r3
    31d4:	4f 92       	push	r4
    31d6:	5f 92       	push	r5
    31d8:	6f 92       	push	r6
    31da:	7f 92       	push	r7
    31dc:	8f 92       	push	r8
    31de:	9f 92       	push	r9
    31e0:	af 92       	push	r10
    31e2:	bf 92       	push	r11
    31e4:	cf 92       	push	r12
    31e6:	df 92       	push	r13
    31e8:	ef 92       	push	r14
    31ea:	ff 92       	push	r15
    31ec:	0f 93       	push	r16
    31ee:	1f 93       	push	r17
    31f0:	cf 93       	push	r28
    31f2:	df 93       	push	r29
    31f4:	cd b7       	in	r28, 0x3d	; 61
    31f6:	de b7       	in	r29, 0x3e	; 62
    31f8:	ca 1b       	sub	r28, r26
    31fa:	db 0b       	sbc	r29, r27
    31fc:	0f b6       	in	r0, 0x3f	; 63
    31fe:	f8 94       	cli
    3200:	de bf       	out	0x3e, r29	; 62
    3202:	0f be       	out	0x3f, r0	; 63
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	09 94       	ijmp

00003208 <__epilogue_restores__>:
    3208:	2a 88       	ldd	r2, Y+18	; 0x12
    320a:	39 88       	ldd	r3, Y+17	; 0x11
    320c:	48 88       	ldd	r4, Y+16	; 0x10
    320e:	5f 84       	ldd	r5, Y+15	; 0x0f
    3210:	6e 84       	ldd	r6, Y+14	; 0x0e
    3212:	7d 84       	ldd	r7, Y+13	; 0x0d
    3214:	8c 84       	ldd	r8, Y+12	; 0x0c
    3216:	9b 84       	ldd	r9, Y+11	; 0x0b
    3218:	aa 84       	ldd	r10, Y+10	; 0x0a
    321a:	b9 84       	ldd	r11, Y+9	; 0x09
    321c:	c8 84       	ldd	r12, Y+8	; 0x08
    321e:	df 80       	ldd	r13, Y+7	; 0x07
    3220:	ee 80       	ldd	r14, Y+6	; 0x06
    3222:	fd 80       	ldd	r15, Y+5	; 0x05
    3224:	0c 81       	ldd	r16, Y+4	; 0x04
    3226:	1b 81       	ldd	r17, Y+3	; 0x03
    3228:	aa 81       	ldd	r26, Y+2	; 0x02
    322a:	b9 81       	ldd	r27, Y+1	; 0x01
    322c:	ce 0f       	add	r28, r30
    322e:	d1 1d       	adc	r29, r1
    3230:	0f b6       	in	r0, 0x3f	; 63
    3232:	f8 94       	cli
    3234:	de bf       	out	0x3e, r29	; 62
    3236:	0f be       	out	0x3f, r0	; 63
    3238:	cd bf       	out	0x3d, r28	; 61
    323a:	ed 01       	movw	r28, r26
    323c:	08 95       	ret

0000323e <_exit>:
    323e:	f8 94       	cli

00003240 <__stop_program>:
    3240:	ff cf       	rjmp	.-2      	; 0x3240 <__stop_program>
