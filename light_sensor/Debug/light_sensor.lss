
light_sensor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c82  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000011a  00800060  00002c82  00002cf6  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .stab         00001f08  00000000  00000000  00002e10  2**2
                  CONTENTS, READONLY, DEBUGGING
  3 .stabstr      00000c5d  00000000  00000000  00004d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_aranges 000001a0  00000000  00000000  00005975  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000001f2  00000000  00000000  00005b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000240b  00000000  00000000  00005d07  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00001386  00000000  00000000  00008112  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000011d6  00000000  00000000  00009498  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001c0  00000000  00000000  0000a670  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002f6  00000000  00000000  0000a830  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000096e  00000000  00000000  0000ab26  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000050  00000000  00000000  0000b494  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
       c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
      50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e8       	ldi	r30, 0x82	; 130
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 37       	cpi	r26, 0x7A	; 122
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
      76:	0e 94 0f 07 	call	0xe1e	; 0xe1e <main>
      7a:	0c 94 3f 16 	jmp	0x2c7e	; 0x2c7e <_exit>

0000007e <__bad_interrupt>:
      7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <__fixunssfsi>:
      82:	ef 92       	push	r14
      84:	ff 92       	push	r15
      86:	0f 93       	push	r16
      88:	1f 93       	push	r17
      8a:	7b 01       	movw	r14, r22
      8c:	8c 01       	movw	r16, r24
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	30 e0       	ldi	r19, 0x00	; 0
      92:	40 e0       	ldi	r20, 0x00	; 0
      94:	5f e4       	ldi	r21, 0x4F	; 79
      96:	0e 94 ed 03 	call	0x7da	; 0x7da <__gesf2>
      9a:	88 23       	and	r24, r24
      9c:	8c f0       	brlt	.+34     	; 0xc0 <__fixunssfsi+0x3e>
      9e:	c8 01       	movw	r24, r16
      a0:	b7 01       	movw	r22, r14
      a2:	20 e0       	ldi	r18, 0x00	; 0
      a4:	30 e0       	ldi	r19, 0x00	; 0
      a6:	40 e0       	ldi	r20, 0x00	; 0
      a8:	5f e4       	ldi	r21, 0x4F	; 79
      aa:	0e 94 b9 01 	call	0x372	; 0x372 <__subsf3>
      ae:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      b2:	9b 01       	movw	r18, r22
      b4:	ac 01       	movw	r20, r24
      b6:	20 50       	subi	r18, 0x00	; 0
      b8:	30 40       	sbci	r19, 0x00	; 0
      ba:	40 40       	sbci	r20, 0x00	; 0
      bc:	50 48       	sbci	r21, 0x80	; 128
      be:	06 c0       	rjmp	.+12     	; 0xcc <__fixunssfsi+0x4a>
      c0:	c8 01       	movw	r24, r16
      c2:	b7 01       	movw	r22, r14
      c4:	0e 94 4d 04 	call	0x89a	; 0x89a <__fixsfsi>
      c8:	9b 01       	movw	r18, r22
      ca:	ac 01       	movw	r20, r24
      cc:	b9 01       	movw	r22, r18
      ce:	ca 01       	movw	r24, r20
      d0:	1f 91       	pop	r17
      d2:	0f 91       	pop	r16
      d4:	ff 90       	pop	r15
      d6:	ef 90       	pop	r14
      d8:	08 95       	ret

000000da <_fpadd_parts>:
      da:	a0 e0       	ldi	r26, 0x00	; 0
      dc:	b0 e0       	ldi	r27, 0x00	; 0
      de:	e3 e7       	ldi	r30, 0x73	; 115
      e0:	f0 e0       	ldi	r31, 0x00	; 0
      e2:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__>
      e6:	dc 01       	movw	r26, r24
      e8:	2b 01       	movw	r4, r22
      ea:	fa 01       	movw	r30, r20
      ec:	9c 91       	ld	r25, X
      ee:	92 30       	cpi	r25, 0x02	; 2
      f0:	08 f4       	brcc	.+2      	; 0xf4 <_fpadd_parts+0x1a>
      f2:	39 c1       	rjmp	.+626    	; 0x366 <_fpadd_parts+0x28c>
      f4:	eb 01       	movw	r28, r22
      f6:	88 81       	ld	r24, Y
      f8:	82 30       	cpi	r24, 0x02	; 2
      fa:	08 f4       	brcc	.+2      	; 0xfe <_fpadd_parts+0x24>
      fc:	33 c1       	rjmp	.+614    	; 0x364 <_fpadd_parts+0x28a>
      fe:	94 30       	cpi	r25, 0x04	; 4
     100:	69 f4       	brne	.+26     	; 0x11c <_fpadd_parts+0x42>
     102:	84 30       	cpi	r24, 0x04	; 4
     104:	09 f0       	breq	.+2      	; 0x108 <_fpadd_parts+0x2e>
     106:	2f c1       	rjmp	.+606    	; 0x366 <_fpadd_parts+0x28c>
     108:	11 96       	adiw	r26, 0x01	; 1
     10a:	9c 91       	ld	r25, X
     10c:	11 97       	sbiw	r26, 0x01	; 1
     10e:	89 81       	ldd	r24, Y+1	; 0x01
     110:	98 17       	cp	r25, r24
     112:	09 f4       	brne	.+2      	; 0x116 <_fpadd_parts+0x3c>
     114:	28 c1       	rjmp	.+592    	; 0x366 <_fpadd_parts+0x28c>
     116:	a2 e7       	ldi	r26, 0x72	; 114
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	25 c1       	rjmp	.+586    	; 0x366 <_fpadd_parts+0x28c>
     11c:	84 30       	cpi	r24, 0x04	; 4
     11e:	09 f4       	brne	.+2      	; 0x122 <_fpadd_parts+0x48>
     120:	21 c1       	rjmp	.+578    	; 0x364 <_fpadd_parts+0x28a>
     122:	82 30       	cpi	r24, 0x02	; 2
     124:	a9 f4       	brne	.+42     	; 0x150 <_fpadd_parts+0x76>
     126:	92 30       	cpi	r25, 0x02	; 2
     128:	09 f0       	breq	.+2      	; 0x12c <_fpadd_parts+0x52>
     12a:	1d c1       	rjmp	.+570    	; 0x366 <_fpadd_parts+0x28c>
     12c:	9a 01       	movw	r18, r20
     12e:	ad 01       	movw	r20, r26
     130:	88 e0       	ldi	r24, 0x08	; 8
     132:	ea 01       	movw	r28, r20
     134:	09 90       	ld	r0, Y+
     136:	ae 01       	movw	r20, r28
     138:	e9 01       	movw	r28, r18
     13a:	09 92       	st	Y+, r0
     13c:	9e 01       	movw	r18, r28
     13e:	81 50       	subi	r24, 0x01	; 1
     140:	c1 f7       	brne	.-16     	; 0x132 <_fpadd_parts+0x58>
     142:	e2 01       	movw	r28, r4
     144:	89 81       	ldd	r24, Y+1	; 0x01
     146:	11 96       	adiw	r26, 0x01	; 1
     148:	9c 91       	ld	r25, X
     14a:	89 23       	and	r24, r25
     14c:	81 83       	std	Z+1, r24	; 0x01
     14e:	08 c1       	rjmp	.+528    	; 0x360 <_fpadd_parts+0x286>
     150:	92 30       	cpi	r25, 0x02	; 2
     152:	09 f4       	brne	.+2      	; 0x156 <_fpadd_parts+0x7c>
     154:	07 c1       	rjmp	.+526    	; 0x364 <_fpadd_parts+0x28a>
     156:	12 96       	adiw	r26, 0x02	; 2
     158:	2d 90       	ld	r2, X+
     15a:	3c 90       	ld	r3, X
     15c:	13 97       	sbiw	r26, 0x03	; 3
     15e:	eb 01       	movw	r28, r22
     160:	8a 81       	ldd	r24, Y+2	; 0x02
     162:	9b 81       	ldd	r25, Y+3	; 0x03
     164:	14 96       	adiw	r26, 0x04	; 4
     166:	ad 90       	ld	r10, X+
     168:	bd 90       	ld	r11, X+
     16a:	cd 90       	ld	r12, X+
     16c:	dc 90       	ld	r13, X
     16e:	17 97       	sbiw	r26, 0x07	; 7
     170:	ec 80       	ldd	r14, Y+4	; 0x04
     172:	fd 80       	ldd	r15, Y+5	; 0x05
     174:	0e 81       	ldd	r16, Y+6	; 0x06
     176:	1f 81       	ldd	r17, Y+7	; 0x07
     178:	91 01       	movw	r18, r2
     17a:	28 1b       	sub	r18, r24
     17c:	39 0b       	sbc	r19, r25
     17e:	b9 01       	movw	r22, r18
     180:	37 ff       	sbrs	r19, 7
     182:	04 c0       	rjmp	.+8      	; 0x18c <_fpadd_parts+0xb2>
     184:	66 27       	eor	r22, r22
     186:	77 27       	eor	r23, r23
     188:	62 1b       	sub	r22, r18
     18a:	73 0b       	sbc	r23, r19
     18c:	60 32       	cpi	r22, 0x20	; 32
     18e:	71 05       	cpc	r23, r1
     190:	0c f0       	brlt	.+2      	; 0x194 <_fpadd_parts+0xba>
     192:	61 c0       	rjmp	.+194    	; 0x256 <_fpadd_parts+0x17c>
     194:	12 16       	cp	r1, r18
     196:	13 06       	cpc	r1, r19
     198:	6c f5       	brge	.+90     	; 0x1f4 <_fpadd_parts+0x11a>
     19a:	37 01       	movw	r6, r14
     19c:	48 01       	movw	r8, r16
     19e:	06 2e       	mov	r0, r22
     1a0:	04 c0       	rjmp	.+8      	; 0x1aa <_fpadd_parts+0xd0>
     1a2:	96 94       	lsr	r9
     1a4:	87 94       	ror	r8
     1a6:	77 94       	ror	r7
     1a8:	67 94       	ror	r6
     1aa:	0a 94       	dec	r0
     1ac:	d2 f7       	brpl	.-12     	; 0x1a2 <_fpadd_parts+0xc8>
     1ae:	21 e0       	ldi	r18, 0x01	; 1
     1b0:	30 e0       	ldi	r19, 0x00	; 0
     1b2:	40 e0       	ldi	r20, 0x00	; 0
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	04 c0       	rjmp	.+8      	; 0x1c0 <_fpadd_parts+0xe6>
     1b8:	22 0f       	add	r18, r18
     1ba:	33 1f       	adc	r19, r19
     1bc:	44 1f       	adc	r20, r20
     1be:	55 1f       	adc	r21, r21
     1c0:	6a 95       	dec	r22
     1c2:	d2 f7       	brpl	.-12     	; 0x1b8 <_fpadd_parts+0xde>
     1c4:	21 50       	subi	r18, 0x01	; 1
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 40       	sbci	r21, 0x00	; 0
     1cc:	2e 21       	and	r18, r14
     1ce:	3f 21       	and	r19, r15
     1d0:	40 23       	and	r20, r16
     1d2:	51 23       	and	r21, r17
     1d4:	21 15       	cp	r18, r1
     1d6:	31 05       	cpc	r19, r1
     1d8:	41 05       	cpc	r20, r1
     1da:	51 05       	cpc	r21, r1
     1dc:	21 f0       	breq	.+8      	; 0x1e6 <_fpadd_parts+0x10c>
     1de:	21 e0       	ldi	r18, 0x01	; 1
     1e0:	30 e0       	ldi	r19, 0x00	; 0
     1e2:	40 e0       	ldi	r20, 0x00	; 0
     1e4:	50 e0       	ldi	r21, 0x00	; 0
     1e6:	79 01       	movw	r14, r18
     1e8:	8a 01       	movw	r16, r20
     1ea:	e6 28       	or	r14, r6
     1ec:	f7 28       	or	r15, r7
     1ee:	08 29       	or	r16, r8
     1f0:	19 29       	or	r17, r9
     1f2:	3c c0       	rjmp	.+120    	; 0x26c <_fpadd_parts+0x192>
     1f4:	23 2b       	or	r18, r19
     1f6:	d1 f1       	breq	.+116    	; 0x26c <_fpadd_parts+0x192>
     1f8:	26 0e       	add	r2, r22
     1fa:	37 1e       	adc	r3, r23
     1fc:	35 01       	movw	r6, r10
     1fe:	46 01       	movw	r8, r12
     200:	06 2e       	mov	r0, r22
     202:	04 c0       	rjmp	.+8      	; 0x20c <_fpadd_parts+0x132>
     204:	96 94       	lsr	r9
     206:	87 94       	ror	r8
     208:	77 94       	ror	r7
     20a:	67 94       	ror	r6
     20c:	0a 94       	dec	r0
     20e:	d2 f7       	brpl	.-12     	; 0x204 <_fpadd_parts+0x12a>
     210:	21 e0       	ldi	r18, 0x01	; 1
     212:	30 e0       	ldi	r19, 0x00	; 0
     214:	40 e0       	ldi	r20, 0x00	; 0
     216:	50 e0       	ldi	r21, 0x00	; 0
     218:	04 c0       	rjmp	.+8      	; 0x222 <_fpadd_parts+0x148>
     21a:	22 0f       	add	r18, r18
     21c:	33 1f       	adc	r19, r19
     21e:	44 1f       	adc	r20, r20
     220:	55 1f       	adc	r21, r21
     222:	6a 95       	dec	r22
     224:	d2 f7       	brpl	.-12     	; 0x21a <_fpadd_parts+0x140>
     226:	21 50       	subi	r18, 0x01	; 1
     228:	30 40       	sbci	r19, 0x00	; 0
     22a:	40 40       	sbci	r20, 0x00	; 0
     22c:	50 40       	sbci	r21, 0x00	; 0
     22e:	2a 21       	and	r18, r10
     230:	3b 21       	and	r19, r11
     232:	4c 21       	and	r20, r12
     234:	5d 21       	and	r21, r13
     236:	21 15       	cp	r18, r1
     238:	31 05       	cpc	r19, r1
     23a:	41 05       	cpc	r20, r1
     23c:	51 05       	cpc	r21, r1
     23e:	21 f0       	breq	.+8      	; 0x248 <_fpadd_parts+0x16e>
     240:	21 e0       	ldi	r18, 0x01	; 1
     242:	30 e0       	ldi	r19, 0x00	; 0
     244:	40 e0       	ldi	r20, 0x00	; 0
     246:	50 e0       	ldi	r21, 0x00	; 0
     248:	59 01       	movw	r10, r18
     24a:	6a 01       	movw	r12, r20
     24c:	a6 28       	or	r10, r6
     24e:	b7 28       	or	r11, r7
     250:	c8 28       	or	r12, r8
     252:	d9 28       	or	r13, r9
     254:	0b c0       	rjmp	.+22     	; 0x26c <_fpadd_parts+0x192>
     256:	82 15       	cp	r24, r2
     258:	93 05       	cpc	r25, r3
     25a:	2c f0       	brlt	.+10     	; 0x266 <_fpadd_parts+0x18c>
     25c:	1c 01       	movw	r2, r24
     25e:	aa 24       	eor	r10, r10
     260:	bb 24       	eor	r11, r11
     262:	65 01       	movw	r12, r10
     264:	03 c0       	rjmp	.+6      	; 0x26c <_fpadd_parts+0x192>
     266:	ee 24       	eor	r14, r14
     268:	ff 24       	eor	r15, r15
     26a:	87 01       	movw	r16, r14
     26c:	11 96       	adiw	r26, 0x01	; 1
     26e:	9c 91       	ld	r25, X
     270:	d2 01       	movw	r26, r4
     272:	11 96       	adiw	r26, 0x01	; 1
     274:	8c 91       	ld	r24, X
     276:	98 17       	cp	r25, r24
     278:	09 f4       	brne	.+2      	; 0x27c <_fpadd_parts+0x1a2>
     27a:	45 c0       	rjmp	.+138    	; 0x306 <_fpadd_parts+0x22c>
     27c:	99 23       	and	r25, r25
     27e:	39 f0       	breq	.+14     	; 0x28e <_fpadd_parts+0x1b4>
     280:	a8 01       	movw	r20, r16
     282:	97 01       	movw	r18, r14
     284:	2a 19       	sub	r18, r10
     286:	3b 09       	sbc	r19, r11
     288:	4c 09       	sbc	r20, r12
     28a:	5d 09       	sbc	r21, r13
     28c:	06 c0       	rjmp	.+12     	; 0x29a <_fpadd_parts+0x1c0>
     28e:	a6 01       	movw	r20, r12
     290:	95 01       	movw	r18, r10
     292:	2e 19       	sub	r18, r14
     294:	3f 09       	sbc	r19, r15
     296:	40 0b       	sbc	r20, r16
     298:	51 0b       	sbc	r21, r17
     29a:	57 fd       	sbrc	r21, 7
     29c:	08 c0       	rjmp	.+16     	; 0x2ae <_fpadd_parts+0x1d4>
     29e:	11 82       	std	Z+1, r1	; 0x01
     2a0:	33 82       	std	Z+3, r3	; 0x03
     2a2:	22 82       	std	Z+2, r2	; 0x02
     2a4:	24 83       	std	Z+4, r18	; 0x04
     2a6:	35 83       	std	Z+5, r19	; 0x05
     2a8:	46 83       	std	Z+6, r20	; 0x06
     2aa:	57 83       	std	Z+7, r21	; 0x07
     2ac:	1d c0       	rjmp	.+58     	; 0x2e8 <_fpadd_parts+0x20e>
     2ae:	81 e0       	ldi	r24, 0x01	; 1
     2b0:	81 83       	std	Z+1, r24	; 0x01
     2b2:	33 82       	std	Z+3, r3	; 0x03
     2b4:	22 82       	std	Z+2, r2	; 0x02
     2b6:	88 27       	eor	r24, r24
     2b8:	99 27       	eor	r25, r25
     2ba:	dc 01       	movw	r26, r24
     2bc:	82 1b       	sub	r24, r18
     2be:	93 0b       	sbc	r25, r19
     2c0:	a4 0b       	sbc	r26, r20
     2c2:	b5 0b       	sbc	r27, r21
     2c4:	84 83       	std	Z+4, r24	; 0x04
     2c6:	95 83       	std	Z+5, r25	; 0x05
     2c8:	a6 83       	std	Z+6, r26	; 0x06
     2ca:	b7 83       	std	Z+7, r27	; 0x07
     2cc:	0d c0       	rjmp	.+26     	; 0x2e8 <_fpadd_parts+0x20e>
     2ce:	22 0f       	add	r18, r18
     2d0:	33 1f       	adc	r19, r19
     2d2:	44 1f       	adc	r20, r20
     2d4:	55 1f       	adc	r21, r21
     2d6:	24 83       	std	Z+4, r18	; 0x04
     2d8:	35 83       	std	Z+5, r19	; 0x05
     2da:	46 83       	std	Z+6, r20	; 0x06
     2dc:	57 83       	std	Z+7, r21	; 0x07
     2de:	82 81       	ldd	r24, Z+2	; 0x02
     2e0:	93 81       	ldd	r25, Z+3	; 0x03
     2e2:	01 97       	sbiw	r24, 0x01	; 1
     2e4:	93 83       	std	Z+3, r25	; 0x03
     2e6:	82 83       	std	Z+2, r24	; 0x02
     2e8:	24 81       	ldd	r18, Z+4	; 0x04
     2ea:	35 81       	ldd	r19, Z+5	; 0x05
     2ec:	46 81       	ldd	r20, Z+6	; 0x06
     2ee:	57 81       	ldd	r21, Z+7	; 0x07
     2f0:	da 01       	movw	r26, r20
     2f2:	c9 01       	movw	r24, r18
     2f4:	01 97       	sbiw	r24, 0x01	; 1
     2f6:	a1 09       	sbc	r26, r1
     2f8:	b1 09       	sbc	r27, r1
     2fa:	8f 5f       	subi	r24, 0xFF	; 255
     2fc:	9f 4f       	sbci	r25, 0xFF	; 255
     2fe:	af 4f       	sbci	r26, 0xFF	; 255
     300:	bf 43       	sbci	r27, 0x3F	; 63
     302:	28 f3       	brcs	.-54     	; 0x2ce <_fpadd_parts+0x1f4>
     304:	0b c0       	rjmp	.+22     	; 0x31c <_fpadd_parts+0x242>
     306:	91 83       	std	Z+1, r25	; 0x01
     308:	33 82       	std	Z+3, r3	; 0x03
     30a:	22 82       	std	Z+2, r2	; 0x02
     30c:	ea 0c       	add	r14, r10
     30e:	fb 1c       	adc	r15, r11
     310:	0c 1d       	adc	r16, r12
     312:	1d 1d       	adc	r17, r13
     314:	e4 82       	std	Z+4, r14	; 0x04
     316:	f5 82       	std	Z+5, r15	; 0x05
     318:	06 83       	std	Z+6, r16	; 0x06
     31a:	17 83       	std	Z+7, r17	; 0x07
     31c:	83 e0       	ldi	r24, 0x03	; 3
     31e:	80 83       	st	Z, r24
     320:	24 81       	ldd	r18, Z+4	; 0x04
     322:	35 81       	ldd	r19, Z+5	; 0x05
     324:	46 81       	ldd	r20, Z+6	; 0x06
     326:	57 81       	ldd	r21, Z+7	; 0x07
     328:	57 ff       	sbrs	r21, 7
     32a:	1a c0       	rjmp	.+52     	; 0x360 <_fpadd_parts+0x286>
     32c:	c9 01       	movw	r24, r18
     32e:	aa 27       	eor	r26, r26
     330:	97 fd       	sbrc	r25, 7
     332:	a0 95       	com	r26
     334:	ba 2f       	mov	r27, r26
     336:	81 70       	andi	r24, 0x01	; 1
     338:	90 70       	andi	r25, 0x00	; 0
     33a:	a0 70       	andi	r26, 0x00	; 0
     33c:	b0 70       	andi	r27, 0x00	; 0
     33e:	56 95       	lsr	r21
     340:	47 95       	ror	r20
     342:	37 95       	ror	r19
     344:	27 95       	ror	r18
     346:	82 2b       	or	r24, r18
     348:	93 2b       	or	r25, r19
     34a:	a4 2b       	or	r26, r20
     34c:	b5 2b       	or	r27, r21
     34e:	84 83       	std	Z+4, r24	; 0x04
     350:	95 83       	std	Z+5, r25	; 0x05
     352:	a6 83       	std	Z+6, r26	; 0x06
     354:	b7 83       	std	Z+7, r27	; 0x07
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	01 96       	adiw	r24, 0x01	; 1
     35c:	93 83       	std	Z+3, r25	; 0x03
     35e:	82 83       	std	Z+2, r24	; 0x02
     360:	df 01       	movw	r26, r30
     362:	01 c0       	rjmp	.+2      	; 0x366 <_fpadd_parts+0x28c>
     364:	d2 01       	movw	r26, r4
     366:	cd 01       	movw	r24, r26
     368:	cd b7       	in	r28, 0x3d	; 61
     36a:	de b7       	in	r29, 0x3e	; 62
     36c:	e2 e1       	ldi	r30, 0x12	; 18
     36e:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__>

00000372 <__subsf3>:
     372:	a0 e2       	ldi	r26, 0x20	; 32
     374:	b0 e0       	ldi	r27, 0x00	; 0
     376:	ef eb       	ldi	r30, 0xBF	; 191
     378:	f1 e0       	ldi	r31, 0x01	; 1
     37a:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x18>
     37e:	69 83       	std	Y+1, r22	; 0x01
     380:	7a 83       	std	Y+2, r23	; 0x02
     382:	8b 83       	std	Y+3, r24	; 0x03
     384:	9c 83       	std	Y+4, r25	; 0x04
     386:	2d 83       	std	Y+5, r18	; 0x05
     388:	3e 83       	std	Y+6, r19	; 0x06
     38a:	4f 83       	std	Y+7, r20	; 0x07
     38c:	58 87       	std	Y+8, r21	; 0x08
     38e:	e9 e0       	ldi	r30, 0x09	; 9
     390:	ee 2e       	mov	r14, r30
     392:	f1 2c       	mov	r15, r1
     394:	ec 0e       	add	r14, r28
     396:	fd 1e       	adc	r15, r29
     398:	ce 01       	movw	r24, r28
     39a:	01 96       	adiw	r24, 0x01	; 1
     39c:	b7 01       	movw	r22, r14
     39e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3a2:	8e 01       	movw	r16, r28
     3a4:	0f 5e       	subi	r16, 0xEF	; 239
     3a6:	1f 4f       	sbci	r17, 0xFF	; 255
     3a8:	ce 01       	movw	r24, r28
     3aa:	05 96       	adiw	r24, 0x05	; 5
     3ac:	b8 01       	movw	r22, r16
     3ae:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     3b2:	8a 89       	ldd	r24, Y+18	; 0x12
     3b4:	91 e0       	ldi	r25, 0x01	; 1
     3b6:	89 27       	eor	r24, r25
     3b8:	8a 8b       	std	Y+18, r24	; 0x12
     3ba:	c7 01       	movw	r24, r14
     3bc:	b8 01       	movw	r22, r16
     3be:	ae 01       	movw	r20, r28
     3c0:	47 5e       	subi	r20, 0xE7	; 231
     3c2:	5f 4f       	sbci	r21, 0xFF	; 255
     3c4:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     3c8:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     3cc:	a0 96       	adiw	r28, 0x20	; 32
     3ce:	e6 e0       	ldi	r30, 0x06	; 6
     3d0:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x18>

000003d4 <__addsf3>:
     3d4:	a0 e2       	ldi	r26, 0x20	; 32
     3d6:	b0 e0       	ldi	r27, 0x00	; 0
     3d8:	e0 ef       	ldi	r30, 0xF0	; 240
     3da:	f1 e0       	ldi	r31, 0x01	; 1
     3dc:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x18>
     3e0:	69 83       	std	Y+1, r22	; 0x01
     3e2:	7a 83       	std	Y+2, r23	; 0x02
     3e4:	8b 83       	std	Y+3, r24	; 0x03
     3e6:	9c 83       	std	Y+4, r25	; 0x04
     3e8:	2d 83       	std	Y+5, r18	; 0x05
     3ea:	3e 83       	std	Y+6, r19	; 0x06
     3ec:	4f 83       	std	Y+7, r20	; 0x07
     3ee:	58 87       	std	Y+8, r21	; 0x08
     3f0:	f9 e0       	ldi	r31, 0x09	; 9
     3f2:	ef 2e       	mov	r14, r31
     3f4:	f1 2c       	mov	r15, r1
     3f6:	ec 0e       	add	r14, r28
     3f8:	fd 1e       	adc	r15, r29
     3fa:	ce 01       	movw	r24, r28
     3fc:	01 96       	adiw	r24, 0x01	; 1
     3fe:	b7 01       	movw	r22, r14
     400:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     404:	8e 01       	movw	r16, r28
     406:	0f 5e       	subi	r16, 0xEF	; 239
     408:	1f 4f       	sbci	r17, 0xFF	; 255
     40a:	ce 01       	movw	r24, r28
     40c:	05 96       	adiw	r24, 0x05	; 5
     40e:	b8 01       	movw	r22, r16
     410:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     414:	c7 01       	movw	r24, r14
     416:	b8 01       	movw	r22, r16
     418:	ae 01       	movw	r20, r28
     41a:	47 5e       	subi	r20, 0xE7	; 231
     41c:	5f 4f       	sbci	r21, 0xFF	; 255
     41e:	0e 94 6d 00 	call	0xda	; 0xda <_fpadd_parts>
     422:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     426:	a0 96       	adiw	r28, 0x20	; 32
     428:	e6 e0       	ldi	r30, 0x06	; 6
     42a:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x18>

0000042e <__mulsf3>:
     42e:	a0 e2       	ldi	r26, 0x20	; 32
     430:	b0 e0       	ldi	r27, 0x00	; 0
     432:	ed e1       	ldi	r30, 0x1D	; 29
     434:	f2 e0       	ldi	r31, 0x02	; 2
     436:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <__prologue_saves__>
     43a:	69 83       	std	Y+1, r22	; 0x01
     43c:	7a 83       	std	Y+2, r23	; 0x02
     43e:	8b 83       	std	Y+3, r24	; 0x03
     440:	9c 83       	std	Y+4, r25	; 0x04
     442:	2d 83       	std	Y+5, r18	; 0x05
     444:	3e 83       	std	Y+6, r19	; 0x06
     446:	4f 83       	std	Y+7, r20	; 0x07
     448:	58 87       	std	Y+8, r21	; 0x08
     44a:	ce 01       	movw	r24, r28
     44c:	01 96       	adiw	r24, 0x01	; 1
     44e:	be 01       	movw	r22, r28
     450:	67 5f       	subi	r22, 0xF7	; 247
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     458:	ce 01       	movw	r24, r28
     45a:	05 96       	adiw	r24, 0x05	; 5
     45c:	be 01       	movw	r22, r28
     45e:	6f 5e       	subi	r22, 0xEF	; 239
     460:	7f 4f       	sbci	r23, 0xFF	; 255
     462:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     466:	99 85       	ldd	r25, Y+9	; 0x09
     468:	92 30       	cpi	r25, 0x02	; 2
     46a:	88 f0       	brcs	.+34     	; 0x48e <__mulsf3+0x60>
     46c:	89 89       	ldd	r24, Y+17	; 0x11
     46e:	82 30       	cpi	r24, 0x02	; 2
     470:	c8 f0       	brcs	.+50     	; 0x4a4 <__mulsf3+0x76>
     472:	94 30       	cpi	r25, 0x04	; 4
     474:	19 f4       	brne	.+6      	; 0x47c <__mulsf3+0x4e>
     476:	82 30       	cpi	r24, 0x02	; 2
     478:	51 f4       	brne	.+20     	; 0x48e <__mulsf3+0x60>
     47a:	04 c0       	rjmp	.+8      	; 0x484 <__mulsf3+0x56>
     47c:	84 30       	cpi	r24, 0x04	; 4
     47e:	29 f4       	brne	.+10     	; 0x48a <__mulsf3+0x5c>
     480:	92 30       	cpi	r25, 0x02	; 2
     482:	81 f4       	brne	.+32     	; 0x4a4 <__mulsf3+0x76>
     484:	82 e7       	ldi	r24, 0x72	; 114
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	c6 c0       	rjmp	.+396    	; 0x616 <__mulsf3+0x1e8>
     48a:	92 30       	cpi	r25, 0x02	; 2
     48c:	49 f4       	brne	.+18     	; 0x4a0 <__mulsf3+0x72>
     48e:	20 e0       	ldi	r18, 0x00	; 0
     490:	9a 85       	ldd	r25, Y+10	; 0x0a
     492:	8a 89       	ldd	r24, Y+18	; 0x12
     494:	98 13       	cpse	r25, r24
     496:	21 e0       	ldi	r18, 0x01	; 1
     498:	2a 87       	std	Y+10, r18	; 0x0a
     49a:	ce 01       	movw	r24, r28
     49c:	09 96       	adiw	r24, 0x09	; 9
     49e:	bb c0       	rjmp	.+374    	; 0x616 <__mulsf3+0x1e8>
     4a0:	82 30       	cpi	r24, 0x02	; 2
     4a2:	49 f4       	brne	.+18     	; 0x4b6 <__mulsf3+0x88>
     4a4:	20 e0       	ldi	r18, 0x00	; 0
     4a6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a8:	8a 89       	ldd	r24, Y+18	; 0x12
     4aa:	98 13       	cpse	r25, r24
     4ac:	21 e0       	ldi	r18, 0x01	; 1
     4ae:	2a 8b       	std	Y+18, r18	; 0x12
     4b0:	ce 01       	movw	r24, r28
     4b2:	41 96       	adiw	r24, 0x11	; 17
     4b4:	b0 c0       	rjmp	.+352    	; 0x616 <__mulsf3+0x1e8>
     4b6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4b8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ba:	4f 84       	ldd	r4, Y+15	; 0x0f
     4bc:	58 88       	ldd	r5, Y+16	; 0x10
     4be:	6d 88       	ldd	r6, Y+21	; 0x15
     4c0:	7e 88       	ldd	r7, Y+22	; 0x16
     4c2:	8f 88       	ldd	r8, Y+23	; 0x17
     4c4:	98 8c       	ldd	r9, Y+24	; 0x18
     4c6:	ee 24       	eor	r14, r14
     4c8:	ff 24       	eor	r15, r15
     4ca:	87 01       	movw	r16, r14
     4cc:	aa 24       	eor	r10, r10
     4ce:	bb 24       	eor	r11, r11
     4d0:	65 01       	movw	r12, r10
     4d2:	40 e0       	ldi	r20, 0x00	; 0
     4d4:	50 e0       	ldi	r21, 0x00	; 0
     4d6:	60 e0       	ldi	r22, 0x00	; 0
     4d8:	70 e0       	ldi	r23, 0x00	; 0
     4da:	e0 e0       	ldi	r30, 0x00	; 0
     4dc:	f0 e0       	ldi	r31, 0x00	; 0
     4de:	c1 01       	movw	r24, r2
     4e0:	81 70       	andi	r24, 0x01	; 1
     4e2:	90 70       	andi	r25, 0x00	; 0
     4e4:	89 2b       	or	r24, r25
     4e6:	e9 f0       	breq	.+58     	; 0x522 <__mulsf3+0xf4>
     4e8:	e6 0c       	add	r14, r6
     4ea:	f7 1c       	adc	r15, r7
     4ec:	08 1d       	adc	r16, r8
     4ee:	19 1d       	adc	r17, r9
     4f0:	9a 01       	movw	r18, r20
     4f2:	ab 01       	movw	r20, r22
     4f4:	2a 0d       	add	r18, r10
     4f6:	3b 1d       	adc	r19, r11
     4f8:	4c 1d       	adc	r20, r12
     4fa:	5d 1d       	adc	r21, r13
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	a0 e0       	ldi	r26, 0x00	; 0
     502:	b0 e0       	ldi	r27, 0x00	; 0
     504:	e6 14       	cp	r14, r6
     506:	f7 04       	cpc	r15, r7
     508:	08 05       	cpc	r16, r8
     50a:	19 05       	cpc	r17, r9
     50c:	20 f4       	brcc	.+8      	; 0x516 <__mulsf3+0xe8>
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	a0 e0       	ldi	r26, 0x00	; 0
     514:	b0 e0       	ldi	r27, 0x00	; 0
     516:	ba 01       	movw	r22, r20
     518:	a9 01       	movw	r20, r18
     51a:	48 0f       	add	r20, r24
     51c:	59 1f       	adc	r21, r25
     51e:	6a 1f       	adc	r22, r26
     520:	7b 1f       	adc	r23, r27
     522:	aa 0c       	add	r10, r10
     524:	bb 1c       	adc	r11, r11
     526:	cc 1c       	adc	r12, r12
     528:	dd 1c       	adc	r13, r13
     52a:	97 fe       	sbrs	r9, 7
     52c:	08 c0       	rjmp	.+16     	; 0x53e <__mulsf3+0x110>
     52e:	81 e0       	ldi	r24, 0x01	; 1
     530:	90 e0       	ldi	r25, 0x00	; 0
     532:	a0 e0       	ldi	r26, 0x00	; 0
     534:	b0 e0       	ldi	r27, 0x00	; 0
     536:	a8 2a       	or	r10, r24
     538:	b9 2a       	or	r11, r25
     53a:	ca 2a       	or	r12, r26
     53c:	db 2a       	or	r13, r27
     53e:	31 96       	adiw	r30, 0x01	; 1
     540:	e0 32       	cpi	r30, 0x20	; 32
     542:	f1 05       	cpc	r31, r1
     544:	49 f0       	breq	.+18     	; 0x558 <__mulsf3+0x12a>
     546:	66 0c       	add	r6, r6
     548:	77 1c       	adc	r7, r7
     54a:	88 1c       	adc	r8, r8
     54c:	99 1c       	adc	r9, r9
     54e:	56 94       	lsr	r5
     550:	47 94       	ror	r4
     552:	37 94       	ror	r3
     554:	27 94       	ror	r2
     556:	c3 cf       	rjmp	.-122    	; 0x4de <__mulsf3+0xb0>
     558:	fa 85       	ldd	r31, Y+10	; 0x0a
     55a:	ea 89       	ldd	r30, Y+18	; 0x12
     55c:	2b 89       	ldd	r18, Y+19	; 0x13
     55e:	3c 89       	ldd	r19, Y+20	; 0x14
     560:	8b 85       	ldd	r24, Y+11	; 0x0b
     562:	9c 85       	ldd	r25, Y+12	; 0x0c
     564:	28 0f       	add	r18, r24
     566:	39 1f       	adc	r19, r25
     568:	2e 5f       	subi	r18, 0xFE	; 254
     56a:	3f 4f       	sbci	r19, 0xFF	; 255
     56c:	17 c0       	rjmp	.+46     	; 0x59c <__mulsf3+0x16e>
     56e:	ca 01       	movw	r24, r20
     570:	81 70       	andi	r24, 0x01	; 1
     572:	90 70       	andi	r25, 0x00	; 0
     574:	89 2b       	or	r24, r25
     576:	61 f0       	breq	.+24     	; 0x590 <__mulsf3+0x162>
     578:	16 95       	lsr	r17
     57a:	07 95       	ror	r16
     57c:	f7 94       	ror	r15
     57e:	e7 94       	ror	r14
     580:	80 e0       	ldi	r24, 0x00	; 0
     582:	90 e0       	ldi	r25, 0x00	; 0
     584:	a0 e0       	ldi	r26, 0x00	; 0
     586:	b0 e8       	ldi	r27, 0x80	; 128
     588:	e8 2a       	or	r14, r24
     58a:	f9 2a       	or	r15, r25
     58c:	0a 2b       	or	r16, r26
     58e:	1b 2b       	or	r17, r27
     590:	76 95       	lsr	r23
     592:	67 95       	ror	r22
     594:	57 95       	ror	r21
     596:	47 95       	ror	r20
     598:	2f 5f       	subi	r18, 0xFF	; 255
     59a:	3f 4f       	sbci	r19, 0xFF	; 255
     59c:	77 fd       	sbrc	r23, 7
     59e:	e7 cf       	rjmp	.-50     	; 0x56e <__mulsf3+0x140>
     5a0:	0c c0       	rjmp	.+24     	; 0x5ba <__mulsf3+0x18c>
     5a2:	44 0f       	add	r20, r20
     5a4:	55 1f       	adc	r21, r21
     5a6:	66 1f       	adc	r22, r22
     5a8:	77 1f       	adc	r23, r23
     5aa:	17 fd       	sbrc	r17, 7
     5ac:	41 60       	ori	r20, 0x01	; 1
     5ae:	ee 0c       	add	r14, r14
     5b0:	ff 1c       	adc	r15, r15
     5b2:	00 1f       	adc	r16, r16
     5b4:	11 1f       	adc	r17, r17
     5b6:	21 50       	subi	r18, 0x01	; 1
     5b8:	30 40       	sbci	r19, 0x00	; 0
     5ba:	40 30       	cpi	r20, 0x00	; 0
     5bc:	90 e0       	ldi	r25, 0x00	; 0
     5be:	59 07       	cpc	r21, r25
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	69 07       	cpc	r22, r25
     5c4:	90 e4       	ldi	r25, 0x40	; 64
     5c6:	79 07       	cpc	r23, r25
     5c8:	60 f3       	brcs	.-40     	; 0x5a2 <__mulsf3+0x174>
     5ca:	2b 8f       	std	Y+27, r18	; 0x1b
     5cc:	3c 8f       	std	Y+28, r19	; 0x1c
     5ce:	db 01       	movw	r26, r22
     5d0:	ca 01       	movw	r24, r20
     5d2:	8f 77       	andi	r24, 0x7F	; 127
     5d4:	90 70       	andi	r25, 0x00	; 0
     5d6:	a0 70       	andi	r26, 0x00	; 0
     5d8:	b0 70       	andi	r27, 0x00	; 0
     5da:	80 34       	cpi	r24, 0x40	; 64
     5dc:	91 05       	cpc	r25, r1
     5de:	a1 05       	cpc	r26, r1
     5e0:	b1 05       	cpc	r27, r1
     5e2:	61 f4       	brne	.+24     	; 0x5fc <__mulsf3+0x1ce>
     5e4:	47 fd       	sbrc	r20, 7
     5e6:	0a c0       	rjmp	.+20     	; 0x5fc <__mulsf3+0x1ce>
     5e8:	e1 14       	cp	r14, r1
     5ea:	f1 04       	cpc	r15, r1
     5ec:	01 05       	cpc	r16, r1
     5ee:	11 05       	cpc	r17, r1
     5f0:	29 f0       	breq	.+10     	; 0x5fc <__mulsf3+0x1ce>
     5f2:	40 5c       	subi	r20, 0xC0	; 192
     5f4:	5f 4f       	sbci	r21, 0xFF	; 255
     5f6:	6f 4f       	sbci	r22, 0xFF	; 255
     5f8:	7f 4f       	sbci	r23, 0xFF	; 255
     5fa:	40 78       	andi	r20, 0x80	; 128
     5fc:	1a 8e       	std	Y+26, r1	; 0x1a
     5fe:	fe 17       	cp	r31, r30
     600:	11 f0       	breq	.+4      	; 0x606 <__mulsf3+0x1d8>
     602:	81 e0       	ldi	r24, 0x01	; 1
     604:	8a 8f       	std	Y+26, r24	; 0x1a
     606:	4d 8f       	std	Y+29, r20	; 0x1d
     608:	5e 8f       	std	Y+30, r21	; 0x1e
     60a:	6f 8f       	std	Y+31, r22	; 0x1f
     60c:	78 a3       	std	Y+32, r23	; 0x20
     60e:	83 e0       	ldi	r24, 0x03	; 3
     610:	89 8f       	std	Y+25, r24	; 0x19
     612:	ce 01       	movw	r24, r28
     614:	49 96       	adiw	r24, 0x19	; 25
     616:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     61a:	a0 96       	adiw	r28, 0x20	; 32
     61c:	e2 e1       	ldi	r30, 0x12	; 18
     61e:	0c 94 b4 15 	jmp	0x2b68	; 0x2b68 <__epilogue_restores__>

00000622 <__divsf3>:
     622:	a8 e1       	ldi	r26, 0x18	; 24
     624:	b0 e0       	ldi	r27, 0x00	; 0
     626:	e7 e1       	ldi	r30, 0x17	; 23
     628:	f3 e0       	ldi	r31, 0x03	; 3
     62a:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__prologue_saves__+0x10>
     62e:	69 83       	std	Y+1, r22	; 0x01
     630:	7a 83       	std	Y+2, r23	; 0x02
     632:	8b 83       	std	Y+3, r24	; 0x03
     634:	9c 83       	std	Y+4, r25	; 0x04
     636:	2d 83       	std	Y+5, r18	; 0x05
     638:	3e 83       	std	Y+6, r19	; 0x06
     63a:	4f 83       	std	Y+7, r20	; 0x07
     63c:	58 87       	std	Y+8, r21	; 0x08
     63e:	b9 e0       	ldi	r27, 0x09	; 9
     640:	eb 2e       	mov	r14, r27
     642:	f1 2c       	mov	r15, r1
     644:	ec 0e       	add	r14, r28
     646:	fd 1e       	adc	r15, r29
     648:	ce 01       	movw	r24, r28
     64a:	01 96       	adiw	r24, 0x01	; 1
     64c:	b7 01       	movw	r22, r14
     64e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     652:	8e 01       	movw	r16, r28
     654:	0f 5e       	subi	r16, 0xEF	; 239
     656:	1f 4f       	sbci	r17, 0xFF	; 255
     658:	ce 01       	movw	r24, r28
     65a:	05 96       	adiw	r24, 0x05	; 5
     65c:	b8 01       	movw	r22, r16
     65e:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     662:	29 85       	ldd	r18, Y+9	; 0x09
     664:	22 30       	cpi	r18, 0x02	; 2
     666:	08 f4       	brcc	.+2      	; 0x66a <__divsf3+0x48>
     668:	7e c0       	rjmp	.+252    	; 0x766 <__divsf3+0x144>
     66a:	39 89       	ldd	r19, Y+17	; 0x11
     66c:	32 30       	cpi	r19, 0x02	; 2
     66e:	10 f4       	brcc	.+4      	; 0x674 <__divsf3+0x52>
     670:	b8 01       	movw	r22, r16
     672:	7c c0       	rjmp	.+248    	; 0x76c <__divsf3+0x14a>
     674:	8a 85       	ldd	r24, Y+10	; 0x0a
     676:	9a 89       	ldd	r25, Y+18	; 0x12
     678:	89 27       	eor	r24, r25
     67a:	8a 87       	std	Y+10, r24	; 0x0a
     67c:	24 30       	cpi	r18, 0x04	; 4
     67e:	11 f0       	breq	.+4      	; 0x684 <__divsf3+0x62>
     680:	22 30       	cpi	r18, 0x02	; 2
     682:	31 f4       	brne	.+12     	; 0x690 <__divsf3+0x6e>
     684:	23 17       	cp	r18, r19
     686:	09 f0       	breq	.+2      	; 0x68a <__divsf3+0x68>
     688:	6e c0       	rjmp	.+220    	; 0x766 <__divsf3+0x144>
     68a:	62 e7       	ldi	r22, 0x72	; 114
     68c:	70 e0       	ldi	r23, 0x00	; 0
     68e:	6e c0       	rjmp	.+220    	; 0x76c <__divsf3+0x14a>
     690:	34 30       	cpi	r19, 0x04	; 4
     692:	39 f4       	brne	.+14     	; 0x6a2 <__divsf3+0x80>
     694:	1d 86       	std	Y+13, r1	; 0x0d
     696:	1e 86       	std	Y+14, r1	; 0x0e
     698:	1f 86       	std	Y+15, r1	; 0x0f
     69a:	18 8a       	std	Y+16, r1	; 0x10
     69c:	1c 86       	std	Y+12, r1	; 0x0c
     69e:	1b 86       	std	Y+11, r1	; 0x0b
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <__divsf3+0x88>
     6a2:	32 30       	cpi	r19, 0x02	; 2
     6a4:	21 f4       	brne	.+8      	; 0x6ae <__divsf3+0x8c>
     6a6:	84 e0       	ldi	r24, 0x04	; 4
     6a8:	89 87       	std	Y+9, r24	; 0x09
     6aa:	b7 01       	movw	r22, r14
     6ac:	5f c0       	rjmp	.+190    	; 0x76c <__divsf3+0x14a>
     6ae:	2b 85       	ldd	r18, Y+11	; 0x0b
     6b0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6b2:	8b 89       	ldd	r24, Y+19	; 0x13
     6b4:	9c 89       	ldd	r25, Y+20	; 0x14
     6b6:	28 1b       	sub	r18, r24
     6b8:	39 0b       	sbc	r19, r25
     6ba:	3c 87       	std	Y+12, r19	; 0x0c
     6bc:	2b 87       	std	Y+11, r18	; 0x0b
     6be:	ed 84       	ldd	r14, Y+13	; 0x0d
     6c0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6c2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6c4:	18 89       	ldd	r17, Y+16	; 0x10
     6c6:	ad 88       	ldd	r10, Y+21	; 0x15
     6c8:	be 88       	ldd	r11, Y+22	; 0x16
     6ca:	cf 88       	ldd	r12, Y+23	; 0x17
     6cc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6ce:	ea 14       	cp	r14, r10
     6d0:	fb 04       	cpc	r15, r11
     6d2:	0c 05       	cpc	r16, r12
     6d4:	1d 05       	cpc	r17, r13
     6d6:	40 f4       	brcc	.+16     	; 0x6e8 <__divsf3+0xc6>
     6d8:	ee 0c       	add	r14, r14
     6da:	ff 1c       	adc	r15, r15
     6dc:	00 1f       	adc	r16, r16
     6de:	11 1f       	adc	r17, r17
     6e0:	21 50       	subi	r18, 0x01	; 1
     6e2:	30 40       	sbci	r19, 0x00	; 0
     6e4:	3c 87       	std	Y+12, r19	; 0x0c
     6e6:	2b 87       	std	Y+11, r18	; 0x0b
     6e8:	20 e0       	ldi	r18, 0x00	; 0
     6ea:	30 e0       	ldi	r19, 0x00	; 0
     6ec:	40 e0       	ldi	r20, 0x00	; 0
     6ee:	50 e0       	ldi	r21, 0x00	; 0
     6f0:	80 e0       	ldi	r24, 0x00	; 0
     6f2:	90 e0       	ldi	r25, 0x00	; 0
     6f4:	a0 e0       	ldi	r26, 0x00	; 0
     6f6:	b0 e4       	ldi	r27, 0x40	; 64
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	ea 14       	cp	r14, r10
     6fe:	fb 04       	cpc	r15, r11
     700:	0c 05       	cpc	r16, r12
     702:	1d 05       	cpc	r17, r13
     704:	40 f0       	brcs	.+16     	; 0x716 <__divsf3+0xf4>
     706:	28 2b       	or	r18, r24
     708:	39 2b       	or	r19, r25
     70a:	4a 2b       	or	r20, r26
     70c:	5b 2b       	or	r21, r27
     70e:	ea 18       	sub	r14, r10
     710:	fb 08       	sbc	r15, r11
     712:	0c 09       	sbc	r16, r12
     714:	1d 09       	sbc	r17, r13
     716:	b6 95       	lsr	r27
     718:	a7 95       	ror	r26
     71a:	97 95       	ror	r25
     71c:	87 95       	ror	r24
     71e:	ee 0c       	add	r14, r14
     720:	ff 1c       	adc	r15, r15
     722:	00 1f       	adc	r16, r16
     724:	11 1f       	adc	r17, r17
     726:	6f 5f       	subi	r22, 0xFF	; 255
     728:	7f 4f       	sbci	r23, 0xFF	; 255
     72a:	6f 31       	cpi	r22, 0x1F	; 31
     72c:	71 05       	cpc	r23, r1
     72e:	31 f7       	brne	.-52     	; 0x6fc <__divsf3+0xda>
     730:	da 01       	movw	r26, r20
     732:	c9 01       	movw	r24, r18
     734:	8f 77       	andi	r24, 0x7F	; 127
     736:	90 70       	andi	r25, 0x00	; 0
     738:	a0 70       	andi	r26, 0x00	; 0
     73a:	b0 70       	andi	r27, 0x00	; 0
     73c:	80 34       	cpi	r24, 0x40	; 64
     73e:	91 05       	cpc	r25, r1
     740:	a1 05       	cpc	r26, r1
     742:	b1 05       	cpc	r27, r1
     744:	61 f4       	brne	.+24     	; 0x75e <__divsf3+0x13c>
     746:	27 fd       	sbrc	r18, 7
     748:	0a c0       	rjmp	.+20     	; 0x75e <__divsf3+0x13c>
     74a:	e1 14       	cp	r14, r1
     74c:	f1 04       	cpc	r15, r1
     74e:	01 05       	cpc	r16, r1
     750:	11 05       	cpc	r17, r1
     752:	29 f0       	breq	.+10     	; 0x75e <__divsf3+0x13c>
     754:	20 5c       	subi	r18, 0xC0	; 192
     756:	3f 4f       	sbci	r19, 0xFF	; 255
     758:	4f 4f       	sbci	r20, 0xFF	; 255
     75a:	5f 4f       	sbci	r21, 0xFF	; 255
     75c:	20 78       	andi	r18, 0x80	; 128
     75e:	2d 87       	std	Y+13, r18	; 0x0d
     760:	3e 87       	std	Y+14, r19	; 0x0e
     762:	4f 87       	std	Y+15, r20	; 0x0f
     764:	58 8b       	std	Y+16, r21	; 0x10
     766:	be 01       	movw	r22, r28
     768:	67 5f       	subi	r22, 0xF7	; 247
     76a:	7f 4f       	sbci	r23, 0xFF	; 255
     76c:	cb 01       	movw	r24, r22
     76e:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     772:	68 96       	adiw	r28, 0x18	; 24
     774:	ea e0       	ldi	r30, 0x0A	; 10
     776:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__epilogue_restores__+0x10>

0000077a <__gtsf2>:
     77a:	a8 e1       	ldi	r26, 0x18	; 24
     77c:	b0 e0       	ldi	r27, 0x00	; 0
     77e:	e3 ec       	ldi	r30, 0xC3	; 195
     780:	f3 e0       	ldi	r31, 0x03	; 3
     782:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x18>
     786:	69 83       	std	Y+1, r22	; 0x01
     788:	7a 83       	std	Y+2, r23	; 0x02
     78a:	8b 83       	std	Y+3, r24	; 0x03
     78c:	9c 83       	std	Y+4, r25	; 0x04
     78e:	2d 83       	std	Y+5, r18	; 0x05
     790:	3e 83       	std	Y+6, r19	; 0x06
     792:	4f 83       	std	Y+7, r20	; 0x07
     794:	58 87       	std	Y+8, r21	; 0x08
     796:	89 e0       	ldi	r24, 0x09	; 9
     798:	e8 2e       	mov	r14, r24
     79a:	f1 2c       	mov	r15, r1
     79c:	ec 0e       	add	r14, r28
     79e:	fd 1e       	adc	r15, r29
     7a0:	ce 01       	movw	r24, r28
     7a2:	01 96       	adiw	r24, 0x01	; 1
     7a4:	b7 01       	movw	r22, r14
     7a6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7aa:	8e 01       	movw	r16, r28
     7ac:	0f 5e       	subi	r16, 0xEF	; 239
     7ae:	1f 4f       	sbci	r17, 0xFF	; 255
     7b0:	ce 01       	movw	r24, r28
     7b2:	05 96       	adiw	r24, 0x05	; 5
     7b4:	b8 01       	movw	r22, r16
     7b6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     7ba:	89 85       	ldd	r24, Y+9	; 0x09
     7bc:	82 30       	cpi	r24, 0x02	; 2
     7be:	40 f0       	brcs	.+16     	; 0x7d0 <__gtsf2+0x56>
     7c0:	89 89       	ldd	r24, Y+17	; 0x11
     7c2:	82 30       	cpi	r24, 0x02	; 2
     7c4:	28 f0       	brcs	.+10     	; 0x7d0 <__gtsf2+0x56>
     7c6:	c7 01       	movw	r24, r14
     7c8:	b8 01       	movw	r22, r16
     7ca:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     7ce:	01 c0       	rjmp	.+2      	; 0x7d2 <__gtsf2+0x58>
     7d0:	8f ef       	ldi	r24, 0xFF	; 255
     7d2:	68 96       	adiw	r28, 0x18	; 24
     7d4:	e6 e0       	ldi	r30, 0x06	; 6
     7d6:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x18>

000007da <__gesf2>:
     7da:	a8 e1       	ldi	r26, 0x18	; 24
     7dc:	b0 e0       	ldi	r27, 0x00	; 0
     7de:	e3 ef       	ldi	r30, 0xF3	; 243
     7e0:	f3 e0       	ldi	r31, 0x03	; 3
     7e2:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x18>
     7e6:	69 83       	std	Y+1, r22	; 0x01
     7e8:	7a 83       	std	Y+2, r23	; 0x02
     7ea:	8b 83       	std	Y+3, r24	; 0x03
     7ec:	9c 83       	std	Y+4, r25	; 0x04
     7ee:	2d 83       	std	Y+5, r18	; 0x05
     7f0:	3e 83       	std	Y+6, r19	; 0x06
     7f2:	4f 83       	std	Y+7, r20	; 0x07
     7f4:	58 87       	std	Y+8, r21	; 0x08
     7f6:	89 e0       	ldi	r24, 0x09	; 9
     7f8:	e8 2e       	mov	r14, r24
     7fa:	f1 2c       	mov	r15, r1
     7fc:	ec 0e       	add	r14, r28
     7fe:	fd 1e       	adc	r15, r29
     800:	ce 01       	movw	r24, r28
     802:	01 96       	adiw	r24, 0x01	; 1
     804:	b7 01       	movw	r22, r14
     806:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     80a:	8e 01       	movw	r16, r28
     80c:	0f 5e       	subi	r16, 0xEF	; 239
     80e:	1f 4f       	sbci	r17, 0xFF	; 255
     810:	ce 01       	movw	r24, r28
     812:	05 96       	adiw	r24, 0x05	; 5
     814:	b8 01       	movw	r22, r16
     816:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     81a:	89 85       	ldd	r24, Y+9	; 0x09
     81c:	82 30       	cpi	r24, 0x02	; 2
     81e:	40 f0       	brcs	.+16     	; 0x830 <__gesf2+0x56>
     820:	89 89       	ldd	r24, Y+17	; 0x11
     822:	82 30       	cpi	r24, 0x02	; 2
     824:	28 f0       	brcs	.+10     	; 0x830 <__gesf2+0x56>
     826:	c7 01       	movw	r24, r14
     828:	b8 01       	movw	r22, r16
     82a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     82e:	01 c0       	rjmp	.+2      	; 0x832 <__gesf2+0x58>
     830:	8f ef       	ldi	r24, 0xFF	; 255
     832:	68 96       	adiw	r28, 0x18	; 24
     834:	e6 e0       	ldi	r30, 0x06	; 6
     836:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x18>

0000083a <__ltsf2>:
     83a:	a8 e1       	ldi	r26, 0x18	; 24
     83c:	b0 e0       	ldi	r27, 0x00	; 0
     83e:	e3 e2       	ldi	r30, 0x23	; 35
     840:	f4 e0       	ldi	r31, 0x04	; 4
     842:	0c 94 a4 15 	jmp	0x2b48	; 0x2b48 <__prologue_saves__+0x18>
     846:	69 83       	std	Y+1, r22	; 0x01
     848:	7a 83       	std	Y+2, r23	; 0x02
     84a:	8b 83       	std	Y+3, r24	; 0x03
     84c:	9c 83       	std	Y+4, r25	; 0x04
     84e:	2d 83       	std	Y+5, r18	; 0x05
     850:	3e 83       	std	Y+6, r19	; 0x06
     852:	4f 83       	std	Y+7, r20	; 0x07
     854:	58 87       	std	Y+8, r21	; 0x08
     856:	89 e0       	ldi	r24, 0x09	; 9
     858:	e8 2e       	mov	r14, r24
     85a:	f1 2c       	mov	r15, r1
     85c:	ec 0e       	add	r14, r28
     85e:	fd 1e       	adc	r15, r29
     860:	ce 01       	movw	r24, r28
     862:	01 96       	adiw	r24, 0x01	; 1
     864:	b7 01       	movw	r22, r14
     866:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     86a:	8e 01       	movw	r16, r28
     86c:	0f 5e       	subi	r16, 0xEF	; 239
     86e:	1f 4f       	sbci	r17, 0xFF	; 255
     870:	ce 01       	movw	r24, r28
     872:	05 96       	adiw	r24, 0x05	; 5
     874:	b8 01       	movw	r22, r16
     876:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     87a:	89 85       	ldd	r24, Y+9	; 0x09
     87c:	82 30       	cpi	r24, 0x02	; 2
     87e:	40 f0       	brcs	.+16     	; 0x890 <__stack+0x31>
     880:	89 89       	ldd	r24, Y+17	; 0x11
     882:	82 30       	cpi	r24, 0x02	; 2
     884:	28 f0       	brcs	.+10     	; 0x890 <__stack+0x31>
     886:	c7 01       	movw	r24, r14
     888:	b8 01       	movw	r22, r16
     88a:	0e 94 b6 06 	call	0xd6c	; 0xd6c <__fpcmp_parts_f>
     88e:	01 c0       	rjmp	.+2      	; 0x892 <__stack+0x33>
     890:	81 e0       	ldi	r24, 0x01	; 1
     892:	68 96       	adiw	r28, 0x18	; 24
     894:	e6 e0       	ldi	r30, 0x06	; 6
     896:	0c 94 c0 15 	jmp	0x2b80	; 0x2b80 <__epilogue_restores__+0x18>

0000089a <__fixsfsi>:
     89a:	ac e0       	ldi	r26, 0x0C	; 12
     89c:	b0 e0       	ldi	r27, 0x00	; 0
     89e:	e3 e5       	ldi	r30, 0x53	; 83
     8a0:	f4 e0       	ldi	r31, 0x04	; 4
     8a2:	0c 94 a8 15 	jmp	0x2b50	; 0x2b50 <__prologue_saves__+0x20>
     8a6:	69 83       	std	Y+1, r22	; 0x01
     8a8:	7a 83       	std	Y+2, r23	; 0x02
     8aa:	8b 83       	std	Y+3, r24	; 0x03
     8ac:	9c 83       	std	Y+4, r25	; 0x04
     8ae:	ce 01       	movw	r24, r28
     8b0:	01 96       	adiw	r24, 0x01	; 1
     8b2:	be 01       	movw	r22, r28
     8b4:	6b 5f       	subi	r22, 0xFB	; 251
     8b6:	7f 4f       	sbci	r23, 0xFF	; 255
     8b8:	0e 94 3e 06 	call	0xc7c	; 0xc7c <__unpack_f>
     8bc:	8d 81       	ldd	r24, Y+5	; 0x05
     8be:	82 30       	cpi	r24, 0x02	; 2
     8c0:	61 f1       	breq	.+88     	; 0x91a <__fixsfsi+0x80>
     8c2:	82 30       	cpi	r24, 0x02	; 2
     8c4:	50 f1       	brcs	.+84     	; 0x91a <__fixsfsi+0x80>
     8c6:	84 30       	cpi	r24, 0x04	; 4
     8c8:	21 f4       	brne	.+8      	; 0x8d2 <__fixsfsi+0x38>
     8ca:	8e 81       	ldd	r24, Y+6	; 0x06
     8cc:	88 23       	and	r24, r24
     8ce:	51 f1       	breq	.+84     	; 0x924 <__fixsfsi+0x8a>
     8d0:	2e c0       	rjmp	.+92     	; 0x92e <__fixsfsi+0x94>
     8d2:	2f 81       	ldd	r18, Y+7	; 0x07
     8d4:	38 85       	ldd	r19, Y+8	; 0x08
     8d6:	37 fd       	sbrc	r19, 7
     8d8:	20 c0       	rjmp	.+64     	; 0x91a <__fixsfsi+0x80>
     8da:	6e 81       	ldd	r22, Y+6	; 0x06
     8dc:	2f 31       	cpi	r18, 0x1F	; 31
     8de:	31 05       	cpc	r19, r1
     8e0:	1c f0       	brlt	.+6      	; 0x8e8 <__fixsfsi+0x4e>
     8e2:	66 23       	and	r22, r22
     8e4:	f9 f0       	breq	.+62     	; 0x924 <__fixsfsi+0x8a>
     8e6:	23 c0       	rjmp	.+70     	; 0x92e <__fixsfsi+0x94>
     8e8:	8e e1       	ldi	r24, 0x1E	; 30
     8ea:	90 e0       	ldi	r25, 0x00	; 0
     8ec:	82 1b       	sub	r24, r18
     8ee:	93 0b       	sbc	r25, r19
     8f0:	29 85       	ldd	r18, Y+9	; 0x09
     8f2:	3a 85       	ldd	r19, Y+10	; 0x0a
     8f4:	4b 85       	ldd	r20, Y+11	; 0x0b
     8f6:	5c 85       	ldd	r21, Y+12	; 0x0c
     8f8:	04 c0       	rjmp	.+8      	; 0x902 <__fixsfsi+0x68>
     8fa:	56 95       	lsr	r21
     8fc:	47 95       	ror	r20
     8fe:	37 95       	ror	r19
     900:	27 95       	ror	r18
     902:	8a 95       	dec	r24
     904:	d2 f7       	brpl	.-12     	; 0x8fa <__fixsfsi+0x60>
     906:	66 23       	and	r22, r22
     908:	b1 f0       	breq	.+44     	; 0x936 <__fixsfsi+0x9c>
     90a:	50 95       	com	r21
     90c:	40 95       	com	r20
     90e:	30 95       	com	r19
     910:	21 95       	neg	r18
     912:	3f 4f       	sbci	r19, 0xFF	; 255
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	0e c0       	rjmp	.+28     	; 0x936 <__fixsfsi+0x9c>
     91a:	20 e0       	ldi	r18, 0x00	; 0
     91c:	30 e0       	ldi	r19, 0x00	; 0
     91e:	40 e0       	ldi	r20, 0x00	; 0
     920:	50 e0       	ldi	r21, 0x00	; 0
     922:	09 c0       	rjmp	.+18     	; 0x936 <__fixsfsi+0x9c>
     924:	2f ef       	ldi	r18, 0xFF	; 255
     926:	3f ef       	ldi	r19, 0xFF	; 255
     928:	4f ef       	ldi	r20, 0xFF	; 255
     92a:	5f e7       	ldi	r21, 0x7F	; 127
     92c:	04 c0       	rjmp	.+8      	; 0x936 <__fixsfsi+0x9c>
     92e:	20 e0       	ldi	r18, 0x00	; 0
     930:	30 e0       	ldi	r19, 0x00	; 0
     932:	40 e0       	ldi	r20, 0x00	; 0
     934:	50 e8       	ldi	r21, 0x80	; 128
     936:	b9 01       	movw	r22, r18
     938:	ca 01       	movw	r24, r20
     93a:	2c 96       	adiw	r28, 0x0c	; 12
     93c:	e2 e0       	ldi	r30, 0x02	; 2
     93e:	0c 94 c4 15 	jmp	0x2b88	; 0x2b88 <__epilogue_restores__+0x20>

00000942 <__floatunsisf>:
     942:	a8 e0       	ldi	r26, 0x08	; 8
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e7 ea       	ldi	r30, 0xA7	; 167
     948:	f4 e0       	ldi	r31, 0x04	; 4
     94a:	0c 94 a0 15 	jmp	0x2b40	; 0x2b40 <__prologue_saves__+0x10>
     94e:	7b 01       	movw	r14, r22
     950:	8c 01       	movw	r16, r24
     952:	61 15       	cp	r22, r1
     954:	71 05       	cpc	r23, r1
     956:	81 05       	cpc	r24, r1
     958:	91 05       	cpc	r25, r1
     95a:	19 f4       	brne	.+6      	; 0x962 <__floatunsisf+0x20>
     95c:	82 e0       	ldi	r24, 0x02	; 2
     95e:	89 83       	std	Y+1, r24	; 0x01
     960:	60 c0       	rjmp	.+192    	; 0xa22 <__floatunsisf+0xe0>
     962:	83 e0       	ldi	r24, 0x03	; 3
     964:	89 83       	std	Y+1, r24	; 0x01
     966:	8e e1       	ldi	r24, 0x1E	; 30
     968:	c8 2e       	mov	r12, r24
     96a:	d1 2c       	mov	r13, r1
     96c:	dc 82       	std	Y+4, r13	; 0x04
     96e:	cb 82       	std	Y+3, r12	; 0x03
     970:	ed 82       	std	Y+5, r14	; 0x05
     972:	fe 82       	std	Y+6, r15	; 0x06
     974:	0f 83       	std	Y+7, r16	; 0x07
     976:	18 87       	std	Y+8, r17	; 0x08
     978:	c8 01       	movw	r24, r16
     97a:	b7 01       	movw	r22, r14
     97c:	0e 94 1a 05 	call	0xa34	; 0xa34 <__clzsi2>
     980:	fc 01       	movw	r30, r24
     982:	31 97       	sbiw	r30, 0x01	; 1
     984:	f7 ff       	sbrs	r31, 7
     986:	3b c0       	rjmp	.+118    	; 0x9fe <__floatunsisf+0xbc>
     988:	22 27       	eor	r18, r18
     98a:	33 27       	eor	r19, r19
     98c:	2e 1b       	sub	r18, r30
     98e:	3f 0b       	sbc	r19, r31
     990:	57 01       	movw	r10, r14
     992:	68 01       	movw	r12, r16
     994:	02 2e       	mov	r0, r18
     996:	04 c0       	rjmp	.+8      	; 0x9a0 <__floatunsisf+0x5e>
     998:	d6 94       	lsr	r13
     99a:	c7 94       	ror	r12
     99c:	b7 94       	ror	r11
     99e:	a7 94       	ror	r10
     9a0:	0a 94       	dec	r0
     9a2:	d2 f7       	brpl	.-12     	; 0x998 <__floatunsisf+0x56>
     9a4:	40 e0       	ldi	r20, 0x00	; 0
     9a6:	50 e0       	ldi	r21, 0x00	; 0
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	81 e0       	ldi	r24, 0x01	; 1
     9ae:	90 e0       	ldi	r25, 0x00	; 0
     9b0:	a0 e0       	ldi	r26, 0x00	; 0
     9b2:	b0 e0       	ldi	r27, 0x00	; 0
     9b4:	04 c0       	rjmp	.+8      	; 0x9be <__floatunsisf+0x7c>
     9b6:	88 0f       	add	r24, r24
     9b8:	99 1f       	adc	r25, r25
     9ba:	aa 1f       	adc	r26, r26
     9bc:	bb 1f       	adc	r27, r27
     9be:	2a 95       	dec	r18
     9c0:	d2 f7       	brpl	.-12     	; 0x9b6 <__floatunsisf+0x74>
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	a1 09       	sbc	r26, r1
     9c6:	b1 09       	sbc	r27, r1
     9c8:	8e 21       	and	r24, r14
     9ca:	9f 21       	and	r25, r15
     9cc:	a0 23       	and	r26, r16
     9ce:	b1 23       	and	r27, r17
     9d0:	00 97       	sbiw	r24, 0x00	; 0
     9d2:	a1 05       	cpc	r26, r1
     9d4:	b1 05       	cpc	r27, r1
     9d6:	21 f0       	breq	.+8      	; 0x9e0 <__floatunsisf+0x9e>
     9d8:	41 e0       	ldi	r20, 0x01	; 1
     9da:	50 e0       	ldi	r21, 0x00	; 0
     9dc:	60 e0       	ldi	r22, 0x00	; 0
     9de:	70 e0       	ldi	r23, 0x00	; 0
     9e0:	4a 29       	or	r20, r10
     9e2:	5b 29       	or	r21, r11
     9e4:	6c 29       	or	r22, r12
     9e6:	7d 29       	or	r23, r13
     9e8:	4d 83       	std	Y+5, r20	; 0x05
     9ea:	5e 83       	std	Y+6, r21	; 0x06
     9ec:	6f 83       	std	Y+7, r22	; 0x07
     9ee:	78 87       	std	Y+8, r23	; 0x08
     9f0:	8e e1       	ldi	r24, 0x1E	; 30
     9f2:	90 e0       	ldi	r25, 0x00	; 0
     9f4:	8e 1b       	sub	r24, r30
     9f6:	9f 0b       	sbc	r25, r31
     9f8:	9c 83       	std	Y+4, r25	; 0x04
     9fa:	8b 83       	std	Y+3, r24	; 0x03
     9fc:	12 c0       	rjmp	.+36     	; 0xa22 <__floatunsisf+0xe0>
     9fe:	30 97       	sbiw	r30, 0x00	; 0
     a00:	81 f0       	breq	.+32     	; 0xa22 <__floatunsisf+0xe0>
     a02:	0e 2e       	mov	r0, r30
     a04:	04 c0       	rjmp	.+8      	; 0xa0e <__floatunsisf+0xcc>
     a06:	ee 0c       	add	r14, r14
     a08:	ff 1c       	adc	r15, r15
     a0a:	00 1f       	adc	r16, r16
     a0c:	11 1f       	adc	r17, r17
     a0e:	0a 94       	dec	r0
     a10:	d2 f7       	brpl	.-12     	; 0xa06 <__floatunsisf+0xc4>
     a12:	ed 82       	std	Y+5, r14	; 0x05
     a14:	fe 82       	std	Y+6, r15	; 0x06
     a16:	0f 83       	std	Y+7, r16	; 0x07
     a18:	18 87       	std	Y+8, r17	; 0x08
     a1a:	ce 1a       	sub	r12, r30
     a1c:	df 0a       	sbc	r13, r31
     a1e:	dc 82       	std	Y+4, r13	; 0x04
     a20:	cb 82       	std	Y+3, r12	; 0x03
     a22:	1a 82       	std	Y+2, r1	; 0x02
     a24:	ce 01       	movw	r24, r28
     a26:	01 96       	adiw	r24, 0x01	; 1
     a28:	0e 94 69 05 	call	0xad2	; 0xad2 <__pack_f>
     a2c:	28 96       	adiw	r28, 0x08	; 8
     a2e:	ea e0       	ldi	r30, 0x0A	; 10
     a30:	0c 94 bc 15 	jmp	0x2b78	; 0x2b78 <__epilogue_restores__+0x10>

00000a34 <__clzsi2>:
     a34:	ef 92       	push	r14
     a36:	ff 92       	push	r15
     a38:	0f 93       	push	r16
     a3a:	1f 93       	push	r17
     a3c:	7b 01       	movw	r14, r22
     a3e:	8c 01       	movw	r16, r24
     a40:	80 e0       	ldi	r24, 0x00	; 0
     a42:	e8 16       	cp	r14, r24
     a44:	80 e0       	ldi	r24, 0x00	; 0
     a46:	f8 06       	cpc	r15, r24
     a48:	81 e0       	ldi	r24, 0x01	; 1
     a4a:	08 07       	cpc	r16, r24
     a4c:	80 e0       	ldi	r24, 0x00	; 0
     a4e:	18 07       	cpc	r17, r24
     a50:	88 f4       	brcc	.+34     	; 0xa74 <__clzsi2+0x40>
     a52:	8f ef       	ldi	r24, 0xFF	; 255
     a54:	e8 16       	cp	r14, r24
     a56:	f1 04       	cpc	r15, r1
     a58:	01 05       	cpc	r16, r1
     a5a:	11 05       	cpc	r17, r1
     a5c:	31 f0       	breq	.+12     	; 0xa6a <__clzsi2+0x36>
     a5e:	28 f0       	brcs	.+10     	; 0xa6a <__clzsi2+0x36>
     a60:	88 e0       	ldi	r24, 0x08	; 8
     a62:	90 e0       	ldi	r25, 0x00	; 0
     a64:	a0 e0       	ldi	r26, 0x00	; 0
     a66:	b0 e0       	ldi	r27, 0x00	; 0
     a68:	17 c0       	rjmp	.+46     	; 0xa98 <__clzsi2+0x64>
     a6a:	80 e0       	ldi	r24, 0x00	; 0
     a6c:	90 e0       	ldi	r25, 0x00	; 0
     a6e:	a0 e0       	ldi	r26, 0x00	; 0
     a70:	b0 e0       	ldi	r27, 0x00	; 0
     a72:	12 c0       	rjmp	.+36     	; 0xa98 <__clzsi2+0x64>
     a74:	80 e0       	ldi	r24, 0x00	; 0
     a76:	e8 16       	cp	r14, r24
     a78:	80 e0       	ldi	r24, 0x00	; 0
     a7a:	f8 06       	cpc	r15, r24
     a7c:	80 e0       	ldi	r24, 0x00	; 0
     a7e:	08 07       	cpc	r16, r24
     a80:	81 e0       	ldi	r24, 0x01	; 1
     a82:	18 07       	cpc	r17, r24
     a84:	28 f0       	brcs	.+10     	; 0xa90 <__clzsi2+0x5c>
     a86:	88 e1       	ldi	r24, 0x18	; 24
     a88:	90 e0       	ldi	r25, 0x00	; 0
     a8a:	a0 e0       	ldi	r26, 0x00	; 0
     a8c:	b0 e0       	ldi	r27, 0x00	; 0
     a8e:	04 c0       	rjmp	.+8      	; 0xa98 <__clzsi2+0x64>
     a90:	80 e1       	ldi	r24, 0x10	; 16
     a92:	90 e0       	ldi	r25, 0x00	; 0
     a94:	a0 e0       	ldi	r26, 0x00	; 0
     a96:	b0 e0       	ldi	r27, 0x00	; 0
     a98:	20 e2       	ldi	r18, 0x20	; 32
     a9a:	30 e0       	ldi	r19, 0x00	; 0
     a9c:	40 e0       	ldi	r20, 0x00	; 0
     a9e:	50 e0       	ldi	r21, 0x00	; 0
     aa0:	28 1b       	sub	r18, r24
     aa2:	39 0b       	sbc	r19, r25
     aa4:	4a 0b       	sbc	r20, r26
     aa6:	5b 0b       	sbc	r21, r27
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__clzsi2+0x7e>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	8a 95       	dec	r24
     ab4:	d2 f7       	brpl	.-12     	; 0xaaa <__clzsi2+0x76>
     ab6:	f7 01       	movw	r30, r14
     ab8:	e6 58       	subi	r30, 0x86	; 134
     aba:	ff 4f       	sbci	r31, 0xFF	; 255
     abc:	80 81       	ld	r24, Z
     abe:	28 1b       	sub	r18, r24
     ac0:	31 09       	sbc	r19, r1
     ac2:	41 09       	sbc	r20, r1
     ac4:	51 09       	sbc	r21, r1
     ac6:	c9 01       	movw	r24, r18
     ac8:	1f 91       	pop	r17
     aca:	0f 91       	pop	r16
     acc:	ff 90       	pop	r15
     ace:	ef 90       	pop	r14
     ad0:	08 95       	ret

00000ad2 <__pack_f>:
     ad2:	df 92       	push	r13
     ad4:	ef 92       	push	r14
     ad6:	ff 92       	push	r15
     ad8:	0f 93       	push	r16
     ada:	1f 93       	push	r17
     adc:	fc 01       	movw	r30, r24
     ade:	e4 80       	ldd	r14, Z+4	; 0x04
     ae0:	f5 80       	ldd	r15, Z+5	; 0x05
     ae2:	06 81       	ldd	r16, Z+6	; 0x06
     ae4:	17 81       	ldd	r17, Z+7	; 0x07
     ae6:	d1 80       	ldd	r13, Z+1	; 0x01
     ae8:	80 81       	ld	r24, Z
     aea:	82 30       	cpi	r24, 0x02	; 2
     aec:	48 f4       	brcc	.+18     	; 0xb00 <__pack_f+0x2e>
     aee:	80 e0       	ldi	r24, 0x00	; 0
     af0:	90 e0       	ldi	r25, 0x00	; 0
     af2:	a0 e1       	ldi	r26, 0x10	; 16
     af4:	b0 e0       	ldi	r27, 0x00	; 0
     af6:	e8 2a       	or	r14, r24
     af8:	f9 2a       	or	r15, r25
     afa:	0a 2b       	or	r16, r26
     afc:	1b 2b       	or	r17, r27
     afe:	a5 c0       	rjmp	.+330    	; 0xc4a <__pack_f+0x178>
     b00:	84 30       	cpi	r24, 0x04	; 4
     b02:	09 f4       	brne	.+2      	; 0xb06 <__pack_f+0x34>
     b04:	9f c0       	rjmp	.+318    	; 0xc44 <__pack_f+0x172>
     b06:	82 30       	cpi	r24, 0x02	; 2
     b08:	21 f4       	brne	.+8      	; 0xb12 <__pack_f+0x40>
     b0a:	ee 24       	eor	r14, r14
     b0c:	ff 24       	eor	r15, r15
     b0e:	87 01       	movw	r16, r14
     b10:	05 c0       	rjmp	.+10     	; 0xb1c <__pack_f+0x4a>
     b12:	e1 14       	cp	r14, r1
     b14:	f1 04       	cpc	r15, r1
     b16:	01 05       	cpc	r16, r1
     b18:	11 05       	cpc	r17, r1
     b1a:	19 f4       	brne	.+6      	; 0xb22 <__pack_f+0x50>
     b1c:	e0 e0       	ldi	r30, 0x00	; 0
     b1e:	f0 e0       	ldi	r31, 0x00	; 0
     b20:	96 c0       	rjmp	.+300    	; 0xc4e <__pack_f+0x17c>
     b22:	62 81       	ldd	r22, Z+2	; 0x02
     b24:	73 81       	ldd	r23, Z+3	; 0x03
     b26:	9f ef       	ldi	r25, 0xFF	; 255
     b28:	62 38       	cpi	r22, 0x82	; 130
     b2a:	79 07       	cpc	r23, r25
     b2c:	0c f0       	brlt	.+2      	; 0xb30 <__pack_f+0x5e>
     b2e:	5b c0       	rjmp	.+182    	; 0xbe6 <__pack_f+0x114>
     b30:	22 e8       	ldi	r18, 0x82	; 130
     b32:	3f ef       	ldi	r19, 0xFF	; 255
     b34:	26 1b       	sub	r18, r22
     b36:	37 0b       	sbc	r19, r23
     b38:	2a 31       	cpi	r18, 0x1A	; 26
     b3a:	31 05       	cpc	r19, r1
     b3c:	2c f0       	brlt	.+10     	; 0xb48 <__pack_f+0x76>
     b3e:	20 e0       	ldi	r18, 0x00	; 0
     b40:	30 e0       	ldi	r19, 0x00	; 0
     b42:	40 e0       	ldi	r20, 0x00	; 0
     b44:	50 e0       	ldi	r21, 0x00	; 0
     b46:	2a c0       	rjmp	.+84     	; 0xb9c <__pack_f+0xca>
     b48:	b8 01       	movw	r22, r16
     b4a:	a7 01       	movw	r20, r14
     b4c:	02 2e       	mov	r0, r18
     b4e:	04 c0       	rjmp	.+8      	; 0xb58 <__pack_f+0x86>
     b50:	76 95       	lsr	r23
     b52:	67 95       	ror	r22
     b54:	57 95       	ror	r21
     b56:	47 95       	ror	r20
     b58:	0a 94       	dec	r0
     b5a:	d2 f7       	brpl	.-12     	; 0xb50 <__pack_f+0x7e>
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	a0 e0       	ldi	r26, 0x00	; 0
     b62:	b0 e0       	ldi	r27, 0x00	; 0
     b64:	04 c0       	rjmp	.+8      	; 0xb6e <__pack_f+0x9c>
     b66:	88 0f       	add	r24, r24
     b68:	99 1f       	adc	r25, r25
     b6a:	aa 1f       	adc	r26, r26
     b6c:	bb 1f       	adc	r27, r27
     b6e:	2a 95       	dec	r18
     b70:	d2 f7       	brpl	.-12     	; 0xb66 <__pack_f+0x94>
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	a1 09       	sbc	r26, r1
     b76:	b1 09       	sbc	r27, r1
     b78:	8e 21       	and	r24, r14
     b7a:	9f 21       	and	r25, r15
     b7c:	a0 23       	and	r26, r16
     b7e:	b1 23       	and	r27, r17
     b80:	00 97       	sbiw	r24, 0x00	; 0
     b82:	a1 05       	cpc	r26, r1
     b84:	b1 05       	cpc	r27, r1
     b86:	21 f0       	breq	.+8      	; 0xb90 <__pack_f+0xbe>
     b88:	81 e0       	ldi	r24, 0x01	; 1
     b8a:	90 e0       	ldi	r25, 0x00	; 0
     b8c:	a0 e0       	ldi	r26, 0x00	; 0
     b8e:	b0 e0       	ldi	r27, 0x00	; 0
     b90:	9a 01       	movw	r18, r20
     b92:	ab 01       	movw	r20, r22
     b94:	28 2b       	or	r18, r24
     b96:	39 2b       	or	r19, r25
     b98:	4a 2b       	or	r20, r26
     b9a:	5b 2b       	or	r21, r27
     b9c:	da 01       	movw	r26, r20
     b9e:	c9 01       	movw	r24, r18
     ba0:	8f 77       	andi	r24, 0x7F	; 127
     ba2:	90 70       	andi	r25, 0x00	; 0
     ba4:	a0 70       	andi	r26, 0x00	; 0
     ba6:	b0 70       	andi	r27, 0x00	; 0
     ba8:	80 34       	cpi	r24, 0x40	; 64
     baa:	91 05       	cpc	r25, r1
     bac:	a1 05       	cpc	r26, r1
     bae:	b1 05       	cpc	r27, r1
     bb0:	39 f4       	brne	.+14     	; 0xbc0 <__pack_f+0xee>
     bb2:	27 ff       	sbrs	r18, 7
     bb4:	09 c0       	rjmp	.+18     	; 0xbc8 <__pack_f+0xf6>
     bb6:	20 5c       	subi	r18, 0xC0	; 192
     bb8:	3f 4f       	sbci	r19, 0xFF	; 255
     bba:	4f 4f       	sbci	r20, 0xFF	; 255
     bbc:	5f 4f       	sbci	r21, 0xFF	; 255
     bbe:	04 c0       	rjmp	.+8      	; 0xbc8 <__pack_f+0xf6>
     bc0:	21 5c       	subi	r18, 0xC1	; 193
     bc2:	3f 4f       	sbci	r19, 0xFF	; 255
     bc4:	4f 4f       	sbci	r20, 0xFF	; 255
     bc6:	5f 4f       	sbci	r21, 0xFF	; 255
     bc8:	e0 e0       	ldi	r30, 0x00	; 0
     bca:	f0 e0       	ldi	r31, 0x00	; 0
     bcc:	20 30       	cpi	r18, 0x00	; 0
     bce:	a0 e0       	ldi	r26, 0x00	; 0
     bd0:	3a 07       	cpc	r19, r26
     bd2:	a0 e0       	ldi	r26, 0x00	; 0
     bd4:	4a 07       	cpc	r20, r26
     bd6:	a0 e4       	ldi	r26, 0x40	; 64
     bd8:	5a 07       	cpc	r21, r26
     bda:	10 f0       	brcs	.+4      	; 0xbe0 <__pack_f+0x10e>
     bdc:	e1 e0       	ldi	r30, 0x01	; 1
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	79 01       	movw	r14, r18
     be2:	8a 01       	movw	r16, r20
     be4:	27 c0       	rjmp	.+78     	; 0xc34 <__pack_f+0x162>
     be6:	60 38       	cpi	r22, 0x80	; 128
     be8:	71 05       	cpc	r23, r1
     bea:	64 f5       	brge	.+88     	; 0xc44 <__pack_f+0x172>
     bec:	fb 01       	movw	r30, r22
     bee:	e1 58       	subi	r30, 0x81	; 129
     bf0:	ff 4f       	sbci	r31, 0xFF	; 255
     bf2:	d8 01       	movw	r26, r16
     bf4:	c7 01       	movw	r24, r14
     bf6:	8f 77       	andi	r24, 0x7F	; 127
     bf8:	90 70       	andi	r25, 0x00	; 0
     bfa:	a0 70       	andi	r26, 0x00	; 0
     bfc:	b0 70       	andi	r27, 0x00	; 0
     bfe:	80 34       	cpi	r24, 0x40	; 64
     c00:	91 05       	cpc	r25, r1
     c02:	a1 05       	cpc	r26, r1
     c04:	b1 05       	cpc	r27, r1
     c06:	39 f4       	brne	.+14     	; 0xc16 <__pack_f+0x144>
     c08:	e7 fe       	sbrs	r14, 7
     c0a:	0d c0       	rjmp	.+26     	; 0xc26 <__pack_f+0x154>
     c0c:	80 e4       	ldi	r24, 0x40	; 64
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	a0 e0       	ldi	r26, 0x00	; 0
     c12:	b0 e0       	ldi	r27, 0x00	; 0
     c14:	04 c0       	rjmp	.+8      	; 0xc1e <__pack_f+0x14c>
     c16:	8f e3       	ldi	r24, 0x3F	; 63
     c18:	90 e0       	ldi	r25, 0x00	; 0
     c1a:	a0 e0       	ldi	r26, 0x00	; 0
     c1c:	b0 e0       	ldi	r27, 0x00	; 0
     c1e:	e8 0e       	add	r14, r24
     c20:	f9 1e       	adc	r15, r25
     c22:	0a 1f       	adc	r16, r26
     c24:	1b 1f       	adc	r17, r27
     c26:	17 ff       	sbrs	r17, 7
     c28:	05 c0       	rjmp	.+10     	; 0xc34 <__pack_f+0x162>
     c2a:	16 95       	lsr	r17
     c2c:	07 95       	ror	r16
     c2e:	f7 94       	ror	r15
     c30:	e7 94       	ror	r14
     c32:	31 96       	adiw	r30, 0x01	; 1
     c34:	87 e0       	ldi	r24, 0x07	; 7
     c36:	16 95       	lsr	r17
     c38:	07 95       	ror	r16
     c3a:	f7 94       	ror	r15
     c3c:	e7 94       	ror	r14
     c3e:	8a 95       	dec	r24
     c40:	d1 f7       	brne	.-12     	; 0xc36 <__pack_f+0x164>
     c42:	05 c0       	rjmp	.+10     	; 0xc4e <__pack_f+0x17c>
     c44:	ee 24       	eor	r14, r14
     c46:	ff 24       	eor	r15, r15
     c48:	87 01       	movw	r16, r14
     c4a:	ef ef       	ldi	r30, 0xFF	; 255
     c4c:	f0 e0       	ldi	r31, 0x00	; 0
     c4e:	6e 2f       	mov	r22, r30
     c50:	67 95       	ror	r22
     c52:	66 27       	eor	r22, r22
     c54:	67 95       	ror	r22
     c56:	90 2f       	mov	r25, r16
     c58:	9f 77       	andi	r25, 0x7F	; 127
     c5a:	d7 94       	ror	r13
     c5c:	dd 24       	eor	r13, r13
     c5e:	d7 94       	ror	r13
     c60:	8e 2f       	mov	r24, r30
     c62:	86 95       	lsr	r24
     c64:	49 2f       	mov	r20, r25
     c66:	46 2b       	or	r20, r22
     c68:	58 2f       	mov	r21, r24
     c6a:	5d 29       	or	r21, r13
     c6c:	b7 01       	movw	r22, r14
     c6e:	ca 01       	movw	r24, r20
     c70:	1f 91       	pop	r17
     c72:	0f 91       	pop	r16
     c74:	ff 90       	pop	r15
     c76:	ef 90       	pop	r14
     c78:	df 90       	pop	r13
     c7a:	08 95       	ret

00000c7c <__unpack_f>:
     c7c:	fc 01       	movw	r30, r24
     c7e:	db 01       	movw	r26, r22
     c80:	40 81       	ld	r20, Z
     c82:	51 81       	ldd	r21, Z+1	; 0x01
     c84:	22 81       	ldd	r18, Z+2	; 0x02
     c86:	62 2f       	mov	r22, r18
     c88:	6f 77       	andi	r22, 0x7F	; 127
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	22 1f       	adc	r18, r18
     c8e:	22 27       	eor	r18, r18
     c90:	22 1f       	adc	r18, r18
     c92:	93 81       	ldd	r25, Z+3	; 0x03
     c94:	89 2f       	mov	r24, r25
     c96:	88 0f       	add	r24, r24
     c98:	82 2b       	or	r24, r18
     c9a:	28 2f       	mov	r18, r24
     c9c:	30 e0       	ldi	r19, 0x00	; 0
     c9e:	99 1f       	adc	r25, r25
     ca0:	99 27       	eor	r25, r25
     ca2:	99 1f       	adc	r25, r25
     ca4:	11 96       	adiw	r26, 0x01	; 1
     ca6:	9c 93       	st	X, r25
     ca8:	11 97       	sbiw	r26, 0x01	; 1
     caa:	21 15       	cp	r18, r1
     cac:	31 05       	cpc	r19, r1
     cae:	a9 f5       	brne	.+106    	; 0xd1a <__unpack_f+0x9e>
     cb0:	41 15       	cp	r20, r1
     cb2:	51 05       	cpc	r21, r1
     cb4:	61 05       	cpc	r22, r1
     cb6:	71 05       	cpc	r23, r1
     cb8:	11 f4       	brne	.+4      	; 0xcbe <__unpack_f+0x42>
     cba:	82 e0       	ldi	r24, 0x02	; 2
     cbc:	37 c0       	rjmp	.+110    	; 0xd2c <__unpack_f+0xb0>
     cbe:	82 e8       	ldi	r24, 0x82	; 130
     cc0:	9f ef       	ldi	r25, 0xFF	; 255
     cc2:	13 96       	adiw	r26, 0x03	; 3
     cc4:	9c 93       	st	X, r25
     cc6:	8e 93       	st	-X, r24
     cc8:	12 97       	sbiw	r26, 0x02	; 2
     cca:	9a 01       	movw	r18, r20
     ccc:	ab 01       	movw	r20, r22
     cce:	67 e0       	ldi	r22, 0x07	; 7
     cd0:	22 0f       	add	r18, r18
     cd2:	33 1f       	adc	r19, r19
     cd4:	44 1f       	adc	r20, r20
     cd6:	55 1f       	adc	r21, r21
     cd8:	6a 95       	dec	r22
     cda:	d1 f7       	brne	.-12     	; 0xcd0 <__unpack_f+0x54>
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	8c 93       	st	X, r24
     ce0:	0d c0       	rjmp	.+26     	; 0xcfc <__unpack_f+0x80>
     ce2:	22 0f       	add	r18, r18
     ce4:	33 1f       	adc	r19, r19
     ce6:	44 1f       	adc	r20, r20
     ce8:	55 1f       	adc	r21, r21
     cea:	12 96       	adiw	r26, 0x02	; 2
     cec:	8d 91       	ld	r24, X+
     cee:	9c 91       	ld	r25, X
     cf0:	13 97       	sbiw	r26, 0x03	; 3
     cf2:	01 97       	sbiw	r24, 0x01	; 1
     cf4:	13 96       	adiw	r26, 0x03	; 3
     cf6:	9c 93       	st	X, r25
     cf8:	8e 93       	st	-X, r24
     cfa:	12 97       	sbiw	r26, 0x02	; 2
     cfc:	20 30       	cpi	r18, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	38 07       	cpc	r19, r24
     d02:	80 e0       	ldi	r24, 0x00	; 0
     d04:	48 07       	cpc	r20, r24
     d06:	80 e4       	ldi	r24, 0x40	; 64
     d08:	58 07       	cpc	r21, r24
     d0a:	58 f3       	brcs	.-42     	; 0xce2 <__unpack_f+0x66>
     d0c:	14 96       	adiw	r26, 0x04	; 4
     d0e:	2d 93       	st	X+, r18
     d10:	3d 93       	st	X+, r19
     d12:	4d 93       	st	X+, r20
     d14:	5c 93       	st	X, r21
     d16:	17 97       	sbiw	r26, 0x07	; 7
     d18:	08 95       	ret
     d1a:	2f 3f       	cpi	r18, 0xFF	; 255
     d1c:	31 05       	cpc	r19, r1
     d1e:	79 f4       	brne	.+30     	; 0xd3e <__unpack_f+0xc2>
     d20:	41 15       	cp	r20, r1
     d22:	51 05       	cpc	r21, r1
     d24:	61 05       	cpc	r22, r1
     d26:	71 05       	cpc	r23, r1
     d28:	19 f4       	brne	.+6      	; 0xd30 <__unpack_f+0xb4>
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	8c 93       	st	X, r24
     d2e:	08 95       	ret
     d30:	64 ff       	sbrs	r22, 4
     d32:	03 c0       	rjmp	.+6      	; 0xd3a <__unpack_f+0xbe>
     d34:	81 e0       	ldi	r24, 0x01	; 1
     d36:	8c 93       	st	X, r24
     d38:	12 c0       	rjmp	.+36     	; 0xd5e <__unpack_f+0xe2>
     d3a:	1c 92       	st	X, r1
     d3c:	10 c0       	rjmp	.+32     	; 0xd5e <__unpack_f+0xe2>
     d3e:	2f 57       	subi	r18, 0x7F	; 127
     d40:	30 40       	sbci	r19, 0x00	; 0
     d42:	13 96       	adiw	r26, 0x03	; 3
     d44:	3c 93       	st	X, r19
     d46:	2e 93       	st	-X, r18
     d48:	12 97       	sbiw	r26, 0x02	; 2
     d4a:	83 e0       	ldi	r24, 0x03	; 3
     d4c:	8c 93       	st	X, r24
     d4e:	87 e0       	ldi	r24, 0x07	; 7
     d50:	44 0f       	add	r20, r20
     d52:	55 1f       	adc	r21, r21
     d54:	66 1f       	adc	r22, r22
     d56:	77 1f       	adc	r23, r23
     d58:	8a 95       	dec	r24
     d5a:	d1 f7       	brne	.-12     	; 0xd50 <__unpack_f+0xd4>
     d5c:	70 64       	ori	r23, 0x40	; 64
     d5e:	14 96       	adiw	r26, 0x04	; 4
     d60:	4d 93       	st	X+, r20
     d62:	5d 93       	st	X+, r21
     d64:	6d 93       	st	X+, r22
     d66:	7c 93       	st	X, r23
     d68:	17 97       	sbiw	r26, 0x07	; 7
     d6a:	08 95       	ret

00000d6c <__fpcmp_parts_f>:
     d6c:	1f 93       	push	r17
     d6e:	dc 01       	movw	r26, r24
     d70:	fb 01       	movw	r30, r22
     d72:	9c 91       	ld	r25, X
     d74:	92 30       	cpi	r25, 0x02	; 2
     d76:	08 f4       	brcc	.+2      	; 0xd7a <__fpcmp_parts_f+0xe>
     d78:	47 c0       	rjmp	.+142    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d7a:	80 81       	ld	r24, Z
     d7c:	82 30       	cpi	r24, 0x02	; 2
     d7e:	08 f4       	brcc	.+2      	; 0xd82 <__fpcmp_parts_f+0x16>
     d80:	43 c0       	rjmp	.+134    	; 0xe08 <__fpcmp_parts_f+0x9c>
     d82:	94 30       	cpi	r25, 0x04	; 4
     d84:	51 f4       	brne	.+20     	; 0xd9a <__fpcmp_parts_f+0x2e>
     d86:	11 96       	adiw	r26, 0x01	; 1
     d88:	1c 91       	ld	r17, X
     d8a:	84 30       	cpi	r24, 0x04	; 4
     d8c:	99 f5       	brne	.+102    	; 0xdf4 <__fpcmp_parts_f+0x88>
     d8e:	81 81       	ldd	r24, Z+1	; 0x01
     d90:	68 2f       	mov	r22, r24
     d92:	70 e0       	ldi	r23, 0x00	; 0
     d94:	61 1b       	sub	r22, r17
     d96:	71 09       	sbc	r23, r1
     d98:	3f c0       	rjmp	.+126    	; 0xe18 <__fpcmp_parts_f+0xac>
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	21 f0       	breq	.+8      	; 0xda6 <__fpcmp_parts_f+0x3a>
     d9e:	92 30       	cpi	r25, 0x02	; 2
     da0:	31 f4       	brne	.+12     	; 0xdae <__fpcmp_parts_f+0x42>
     da2:	82 30       	cpi	r24, 0x02	; 2
     da4:	b9 f1       	breq	.+110    	; 0xe14 <__fpcmp_parts_f+0xa8>
     da6:	81 81       	ldd	r24, Z+1	; 0x01
     da8:	88 23       	and	r24, r24
     daa:	89 f1       	breq	.+98     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dac:	2d c0       	rjmp	.+90     	; 0xe08 <__fpcmp_parts_f+0x9c>
     dae:	11 96       	adiw	r26, 0x01	; 1
     db0:	1c 91       	ld	r17, X
     db2:	11 97       	sbiw	r26, 0x01	; 1
     db4:	82 30       	cpi	r24, 0x02	; 2
     db6:	f1 f0       	breq	.+60     	; 0xdf4 <__fpcmp_parts_f+0x88>
     db8:	81 81       	ldd	r24, Z+1	; 0x01
     dba:	18 17       	cp	r17, r24
     dbc:	d9 f4       	brne	.+54     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dbe:	12 96       	adiw	r26, 0x02	; 2
     dc0:	2d 91       	ld	r18, X+
     dc2:	3c 91       	ld	r19, X
     dc4:	13 97       	sbiw	r26, 0x03	; 3
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	82 17       	cp	r24, r18
     dcc:	93 07       	cpc	r25, r19
     dce:	94 f0       	brlt	.+36     	; 0xdf4 <__fpcmp_parts_f+0x88>
     dd0:	28 17       	cp	r18, r24
     dd2:	39 07       	cpc	r19, r25
     dd4:	bc f0       	brlt	.+46     	; 0xe04 <__fpcmp_parts_f+0x98>
     dd6:	14 96       	adiw	r26, 0x04	; 4
     dd8:	8d 91       	ld	r24, X+
     dda:	9d 91       	ld	r25, X+
     ddc:	0d 90       	ld	r0, X+
     dde:	bc 91       	ld	r27, X
     de0:	a0 2d       	mov	r26, r0
     de2:	24 81       	ldd	r18, Z+4	; 0x04
     de4:	35 81       	ldd	r19, Z+5	; 0x05
     de6:	46 81       	ldd	r20, Z+6	; 0x06
     de8:	57 81       	ldd	r21, Z+7	; 0x07
     dea:	28 17       	cp	r18, r24
     dec:	39 07       	cpc	r19, r25
     dee:	4a 07       	cpc	r20, r26
     df0:	5b 07       	cpc	r21, r27
     df2:	18 f4       	brcc	.+6      	; 0xdfa <__fpcmp_parts_f+0x8e>
     df4:	11 23       	and	r17, r17
     df6:	41 f0       	breq	.+16     	; 0xe08 <__fpcmp_parts_f+0x9c>
     df8:	0a c0       	rjmp	.+20     	; 0xe0e <__fpcmp_parts_f+0xa2>
     dfa:	82 17       	cp	r24, r18
     dfc:	93 07       	cpc	r25, r19
     dfe:	a4 07       	cpc	r26, r20
     e00:	b5 07       	cpc	r27, r21
     e02:	40 f4       	brcc	.+16     	; 0xe14 <__fpcmp_parts_f+0xa8>
     e04:	11 23       	and	r17, r17
     e06:	19 f0       	breq	.+6      	; 0xe0e <__fpcmp_parts_f+0xa2>
     e08:	61 e0       	ldi	r22, 0x01	; 1
     e0a:	70 e0       	ldi	r23, 0x00	; 0
     e0c:	05 c0       	rjmp	.+10     	; 0xe18 <__fpcmp_parts_f+0xac>
     e0e:	6f ef       	ldi	r22, 0xFF	; 255
     e10:	7f ef       	ldi	r23, 0xFF	; 255
     e12:	02 c0       	rjmp	.+4      	; 0xe18 <__fpcmp_parts_f+0xac>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	70 e0       	ldi	r23, 0x00	; 0
     e18:	cb 01       	movw	r24, r22
     e1a:	1f 91       	pop	r17
     e1c:	08 95       	ret

00000e1e <main>:




int main()
{
     e1e:	df 93       	push	r29
     e20:	cf 93       	push	r28
     e22:	cd b7       	in	r28, 0x3d	; 61
     e24:	de b7       	in	r29, 0x3e	; 62
     e26:	a4 97       	sbiw	r28, 0x24	; 36
     e28:	0f b6       	in	r0, 0x3f	; 63
     e2a:	f8 94       	cli
     e2c:	de bf       	out	0x3e, r29	; 62
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	cd bf       	out	0x3d, r28	; 61
	u8 Local_u8Brightness,Local_u8BrightnessLevel;
	u16 Local_u16Digital,Local_u16AnalogValue;
	DIO_Init();
     e32:	0e 94 e5 09 	call	0x13ca	; 0x13ca <DIO_Init>
	LCD_voidInit();
     e36:	0e 94 5c 0e 	call	0x1cb8	; 0x1cb8 <LCD_voidInit>
	ADC_voidInit();
     e3a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <ADC_voidInit>
	while(1)
	{
		//read digital value
		ADC_u8GetDigitalValueSynchNonBlocking(ADC_u8_CHANNEL_0,&Local_u16Digital);
     e3e:	9e 01       	movw	r18, r28
     e40:	2f 5d       	subi	r18, 0xDF	; 223
     e42:	3f 4f       	sbci	r19, 0xFF	; 255
     e44:	80 e0       	ldi	r24, 0x00	; 0
     e46:	b9 01       	movw	r22, r18
     e48:	0e 94 12 09 	call	0x1224	; 0x1224 <ADC_u8GetDigitalValueSynchNonBlocking>
		//get analog value
		Local_u16AnalogValue=(Local_u16Digital*250000UL)/1024;//since the highest room temp = 50 celsius
     e4c:	89 a1       	ldd	r24, Y+33	; 0x21
     e4e:	9a a1       	ldd	r25, Y+34	; 0x22
     e50:	cc 01       	movw	r24, r24
     e52:	a0 e0       	ldi	r26, 0x00	; 0
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	20 e9       	ldi	r18, 0x90	; 144
     e58:	30 ed       	ldi	r19, 0xD0	; 208
     e5a:	43 e0       	ldi	r20, 0x03	; 3
     e5c:	50 e0       	ldi	r21, 0x00	; 0
     e5e:	bc 01       	movw	r22, r24
     e60:	cd 01       	movw	r24, r26
     e62:	0e 94 65 15 	call	0x2aca	; 0x2aca <__mulsi3>
     e66:	dc 01       	movw	r26, r24
     e68:	cb 01       	movw	r24, r22
     e6a:	07 2e       	mov	r0, r23
     e6c:	7a e0       	ldi	r23, 0x0A	; 10
     e6e:	b6 95       	lsr	r27
     e70:	a7 95       	ror	r26
     e72:	97 95       	ror	r25
     e74:	87 95       	ror	r24
     e76:	7a 95       	dec	r23
     e78:	d1 f7       	brne	.-12     	; 0xe6e <main+0x50>
     e7a:	70 2d       	mov	r23, r0
     e7c:	9e 8f       	std	Y+30, r25	; 0x1e
     e7e:	8d 8f       	std	Y+29, r24	; 0x1d
		Local_u8Brightness=trunc(Local_u16AnalogValue/100);
     e80:	8d 8d       	ldd	r24, Y+29	; 0x1d
     e82:	9e 8d       	ldd	r25, Y+30	; 0x1e
     e84:	24 e6       	ldi	r18, 0x64	; 100
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	b9 01       	movw	r22, r18
     e8a:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__udivmodhi4>
     e8e:	cb 01       	movw	r24, r22
     e90:	cc 01       	movw	r24, r24
     e92:	a0 e0       	ldi	r26, 0x00	; 0
     e94:	b0 e0       	ldi	r27, 0x00	; 0
     e96:	bc 01       	movw	r22, r24
     e98:	cd 01       	movw	r24, r26
     e9a:	0e 94 a1 04 	call	0x942	; 0x942 <__floatunsisf>
     e9e:	dc 01       	movw	r26, r24
     ea0:	cb 01       	movw	r24, r22
     ea2:	bc 01       	movw	r22, r24
     ea4:	cd 01       	movw	r24, r26
     ea6:	0e 94 cf 15 	call	0x2b9e	; 0x2b9e <trunc>
     eaa:	dc 01       	movw	r26, r24
     eac:	cb 01       	movw	r24, r22
     eae:	bc 01       	movw	r22, r24
     eb0:	cd 01       	movw	r24, r26
     eb2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
     eb6:	dc 01       	movw	r26, r24
     eb8:	cb 01       	movw	r24, r22
     eba:	88 a3       	std	Y+32, r24	; 0x20
		//turning on the lights
		switch(Local_u8Brightness)
     ebc:	88 a1       	ldd	r24, Y+32	; 0x20
     ebe:	28 2f       	mov	r18, r24
     ec0:	30 e0       	ldi	r19, 0x00	; 0
     ec2:	3c a3       	std	Y+36, r19	; 0x24
     ec4:	2b a3       	std	Y+35, r18	; 0x23
     ec6:	8b a1       	ldd	r24, Y+35	; 0x23
     ec8:	9c a1       	ldd	r25, Y+36	; 0x24
     eca:	82 35       	cpi	r24, 0x52	; 82
     ecc:	91 05       	cpc	r25, r1
     ece:	09 f4       	brne	.+2      	; 0xed2 <main+0xb4>
     ed0:	6a c0       	rjmp	.+212    	; 0xfa6 <main+0x188>
     ed2:	2b a1       	ldd	r18, Y+35	; 0x23
     ed4:	3c a1       	ldd	r19, Y+36	; 0x24
     ed6:	23 35       	cpi	r18, 0x53	; 83
     ed8:	31 05       	cpc	r19, r1
     eda:	e4 f4       	brge	.+56     	; 0xf14 <main+0xf6>
     edc:	8b a1       	ldd	r24, Y+35	; 0x23
     ede:	9c a1       	ldd	r25, Y+36	; 0x24
     ee0:	8c 30       	cpi	r24, 0x0C	; 12
     ee2:	91 05       	cpc	r25, r1
     ee4:	09 f4       	brne	.+2      	; 0xee8 <main+0xca>
     ee6:	3c c0       	rjmp	.+120    	; 0xf60 <main+0x142>
     ee8:	2b a1       	ldd	r18, Y+35	; 0x23
     eea:	3c a1       	ldd	r19, Y+36	; 0x24
     eec:	2d 30       	cpi	r18, 0x0D	; 13
     eee:	31 05       	cpc	r19, r1
     ef0:	34 f4       	brge	.+12     	; 0xefe <main+0xe0>
     ef2:	8b a1       	ldd	r24, Y+35	; 0x23
     ef4:	9c a1       	ldd	r25, Y+36	; 0x24
     ef6:	82 30       	cpi	r24, 0x02	; 2
     ef8:	91 05       	cpc	r25, r1
     efa:	69 f1       	breq	.+90     	; 0xf56 <main+0x138>
     efc:	5e c0       	rjmp	.+188    	; 0xfba <main+0x19c>
     efe:	2b a1       	ldd	r18, Y+35	; 0x23
     f00:	3c a1       	ldd	r19, Y+36	; 0x24
     f02:	28 31       	cpi	r18, 0x18	; 24
     f04:	31 05       	cpc	r19, r1
     f06:	89 f1       	breq	.+98     	; 0xf6a <main+0x14c>
     f08:	8b a1       	ldd	r24, Y+35	; 0x23
     f0a:	9c a1       	ldd	r25, Y+36	; 0x24
     f0c:	80 33       	cpi	r24, 0x30	; 48
     f0e:	91 05       	cpc	r25, r1
     f10:	89 f1       	breq	.+98     	; 0xf74 <main+0x156>
     f12:	53 c0       	rjmp	.+166    	; 0xfba <main+0x19c>
     f14:	2b a1       	ldd	r18, Y+35	; 0x23
     f16:	3c a1       	ldd	r19, Y+36	; 0x24
     f18:	21 3a       	cpi	r18, 0xA1	; 161
     f1a:	31 05       	cpc	r19, r1
     f1c:	d1 f1       	breq	.+116    	; 0xf92 <main+0x174>
     f1e:	8b a1       	ldd	r24, Y+35	; 0x23
     f20:	9c a1       	ldd	r25, Y+36	; 0x24
     f22:	82 3a       	cpi	r24, 0xA2	; 162
     f24:	91 05       	cpc	r25, r1
     f26:	64 f4       	brge	.+24     	; 0xf40 <main+0x122>
     f28:	2b a1       	ldd	r18, Y+35	; 0x23
     f2a:	3c a1       	ldd	r19, Y+36	; 0x24
     f2c:	24 36       	cpi	r18, 0x64	; 100
     f2e:	31 05       	cpc	r19, r1
     f30:	09 f4       	brne	.+2      	; 0xf34 <main+0x116>
     f32:	3e c0       	rjmp	.+124    	; 0xfb0 <main+0x192>
     f34:	8b a1       	ldd	r24, Y+35	; 0x23
     f36:	9c a1       	ldd	r25, Y+36	; 0x24
     f38:	87 37       	cpi	r24, 0x77	; 119
     f3a:	91 05       	cpc	r25, r1
     f3c:	01 f1       	breq	.+64     	; 0xf7e <main+0x160>
     f3e:	3d c0       	rjmp	.+122    	; 0xfba <main+0x19c>
     f40:	2b a1       	ldd	r18, Y+35	; 0x23
     f42:	3c a1       	ldd	r19, Y+36	; 0x24
     f44:	21 3b       	cpi	r18, 0xB1	; 177
     f46:	31 05       	cpc	r19, r1
     f48:	49 f1       	breq	.+82     	; 0xf9c <main+0x17e>
     f4a:	8b a1       	ldd	r24, Y+35	; 0x23
     f4c:	9c a1       	ldd	r25, Y+36	; 0x24
     f4e:	83 3e       	cpi	r24, 0xE3	; 227
     f50:	91 05       	cpc	r25, r1
     f52:	d1 f0       	breq	.+52     	; 0xf88 <main+0x16a>
     f54:	32 c0       	rjmp	.+100    	; 0xfba <main+0x19c>
		{
		case  2:Local_u8BrightnessLevel=1;LED1234();break;
     f56:	81 e0       	ldi	r24, 0x01	; 1
     f58:	8f 8f       	std	Y+31, r24	; 0x1f
     f5a:	0e 94 ca 09 	call	0x1394	; 0x1394 <LED1234>
     f5e:	2f c0       	rjmp	.+94     	; 0xfbe <main+0x1a0>
		case  12:Local_u8BrightnessLevel=2;LED1234();break;
     f60:	82 e0       	ldi	r24, 0x02	; 2
     f62:	8f 8f       	std	Y+31, r24	; 0x1f
     f64:	0e 94 ca 09 	call	0x1394	; 0x1394 <LED1234>
     f68:	2a c0       	rjmp	.+84     	; 0xfbe <main+0x1a0>
		case  24:Local_u8BrightnessLevel=3;LED123();break;
     f6a:	83 e0       	ldi	r24, 0x03	; 3
     f6c:	8f 8f       	std	Y+31, r24	; 0x1f
     f6e:	0e 94 af 09 	call	0x135e	; 0x135e <LED123>
     f72:	25 c0       	rjmp	.+74     	; 0xfbe <main+0x1a0>
		case  48:Local_u8BrightnessLevel=4;LED123();break;
     f74:	84 e0       	ldi	r24, 0x04	; 4
     f76:	8f 8f       	std	Y+31, r24	; 0x1f
     f78:	0e 94 af 09 	call	0x135e	; 0x135e <LED123>
     f7c:	20 c0       	rjmp	.+64     	; 0xfbe <main+0x1a0>
		case  119:Local_u8BrightnessLevel=5;LED12();break;
     f7e:	85 e0       	ldi	r24, 0x05	; 5
     f80:	8f 8f       	std	Y+31, r24	; 0x1f
     f82:	0e 94 94 09 	call	0x1328	; 0x1328 <LED12>
     f86:	1b c0       	rjmp	.+54     	; 0xfbe <main+0x1a0>
		case  227:Local_u8BrightnessLevel=6;LED12();break;
     f88:	86 e0       	ldi	r24, 0x06	; 6
     f8a:	8f 8f       	std	Y+31, r24	; 0x1f
     f8c:	0e 94 94 09 	call	0x1328	; 0x1328 <LED12>
     f90:	16 c0       	rjmp	.+44     	; 0xfbe <main+0x1a0>
		case  161:Local_u8BrightnessLevel=7;LED1();break;
     f92:	87 e0       	ldi	r24, 0x07	; 7
     f94:	8f 8f       	std	Y+31, r24	; 0x1f
     f96:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LED1>
     f9a:	11 c0       	rjmp	.+34     	; 0xfbe <main+0x1a0>
		case  177:Local_u8BrightnessLevel=8;LED1();break;
     f9c:	88 e0       	ldi	r24, 0x08	; 8
     f9e:	8f 8f       	std	Y+31, r24	; 0x1f
     fa0:	0e 94 79 09 	call	0x12f2	; 0x12f2 <LED1>
     fa4:	0c c0       	rjmp	.+24     	; 0xfbe <main+0x1a0>
		case  82:Local_u8BrightnessLevel=9;NOLED();break;
     fa6:	89 e0       	ldi	r24, 0x09	; 9
     fa8:	8f 8f       	std	Y+31, r24	; 0x1f
     faa:	0e 94 5e 09 	call	0x12bc	; 0x12bc <NOLED>
     fae:	07 c0       	rjmp	.+14     	; 0xfbe <main+0x1a0>
		case  100:Local_u8BrightnessLevel=10;NOLED();break;
     fb0:	8a e0       	ldi	r24, 0x0A	; 10
     fb2:	8f 8f       	std	Y+31, r24	; 0x1f
     fb4:	0e 94 5e 09 	call	0x12bc	; 0x12bc <NOLED>
     fb8:	02 c0       	rjmp	.+4      	; 0xfbe <main+0x1a0>
		default:NOLED();break;
     fba:	0e 94 5e 09 	call	0x12bc	; 0x12bc <NOLED>

		}

		//turning on LCD
		LCD_voidSendString("brightness level=");
     fbe:	80 e6       	ldi	r24, 0x60	; 96
     fc0:	90 e0       	ldi	r25, 0x00	; 0
     fc2:	0e 94 6f 14 	call	0x28de	; 0x28de <LCD_voidSendString>
		LCD_voidGoToRowColumn(1,5);
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	65 e0       	ldi	r22, 0x05	; 5
     fca:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_voidGoToRowColumn>
		LCD_voidSendNum(Local_u8BrightnessLevel);
     fce:	8f 8d       	ldd	r24, Y+31	; 0x1f
     fd0:	88 2f       	mov	r24, r24
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 15 15 	call	0x2a2a	; 0x2a2a <LCD_voidSendNum>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a8 e4       	ldi	r26, 0x48	; 72
     fde:	b2 e4       	ldi	r27, 0x42	; 66
     fe0:	89 8f       	std	Y+25, r24	; 0x19
     fe2:	9a 8f       	std	Y+26, r25	; 0x1a
     fe4:	ab 8f       	std	Y+27, r26	; 0x1b
     fe6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe8:	69 8d       	ldd	r22, Y+25	; 0x19
     fea:	7a 8d       	ldd	r23, Y+26	; 0x1a
     fec:	8b 8d       	ldd	r24, Y+27	; 0x1b
     fee:	9c 8d       	ldd	r25, Y+28	; 0x1c
     ff0:	20 e0       	ldi	r18, 0x00	; 0
     ff2:	30 e0       	ldi	r19, 0x00	; 0
     ff4:	4a ef       	ldi	r20, 0xFA	; 250
     ff6:	54 e4       	ldi	r21, 0x44	; 68
     ff8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
     ffc:	dc 01       	movw	r26, r24
     ffe:	cb 01       	movw	r24, r22
    1000:	8d 8b       	std	Y+21, r24	; 0x15
    1002:	9e 8b       	std	Y+22, r25	; 0x16
    1004:	af 8b       	std	Y+23, r26	; 0x17
    1006:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1008:	6d 89       	ldd	r22, Y+21	; 0x15
    100a:	7e 89       	ldd	r23, Y+22	; 0x16
    100c:	8f 89       	ldd	r24, Y+23	; 0x17
    100e:	98 8d       	ldd	r25, Y+24	; 0x18
    1010:	20 e0       	ldi	r18, 0x00	; 0
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	40 e8       	ldi	r20, 0x80	; 128
    1016:	5f e3       	ldi	r21, 0x3F	; 63
    1018:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    101c:	88 23       	and	r24, r24
    101e:	2c f4       	brge	.+10     	; 0x102a <main+0x20c>
		__ticks = 1;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	9c 8b       	std	Y+20, r25	; 0x14
    1026:	8b 8b       	std	Y+19, r24	; 0x13
    1028:	3f c0       	rjmp	.+126    	; 0x10a8 <main+0x28a>
	else if (__tmp > 65535)
    102a:	6d 89       	ldd	r22, Y+21	; 0x15
    102c:	7e 89       	ldd	r23, Y+22	; 0x16
    102e:	8f 89       	ldd	r24, Y+23	; 0x17
    1030:	98 8d       	ldd	r25, Y+24	; 0x18
    1032:	20 e0       	ldi	r18, 0x00	; 0
    1034:	3f ef       	ldi	r19, 0xFF	; 255
    1036:	4f e7       	ldi	r20, 0x7F	; 127
    1038:	57 e4       	ldi	r21, 0x47	; 71
    103a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    103e:	18 16       	cp	r1, r24
    1040:	4c f5       	brge	.+82     	; 0x1094 <main+0x276>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1042:	69 8d       	ldd	r22, Y+25	; 0x19
    1044:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1046:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1048:	9c 8d       	ldd	r25, Y+28	; 0x1c
    104a:	20 e0       	ldi	r18, 0x00	; 0
    104c:	30 e0       	ldi	r19, 0x00	; 0
    104e:	40 e2       	ldi	r20, 0x20	; 32
    1050:	51 e4       	ldi	r21, 0x41	; 65
    1052:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1056:	dc 01       	movw	r26, r24
    1058:	cb 01       	movw	r24, r22
    105a:	bc 01       	movw	r22, r24
    105c:	cd 01       	movw	r24, r26
    105e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1062:	dc 01       	movw	r26, r24
    1064:	cb 01       	movw	r24, r22
    1066:	9c 8b       	std	Y+20, r25	; 0x14
    1068:	8b 8b       	std	Y+19, r24	; 0x13
    106a:	0f c0       	rjmp	.+30     	; 0x108a <main+0x26c>
    106c:	88 ec       	ldi	r24, 0xC8	; 200
    106e:	90 e0       	ldi	r25, 0x00	; 0
    1070:	9a 8b       	std	Y+18, r25	; 0x12
    1072:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1074:	89 89       	ldd	r24, Y+17	; 0x11
    1076:	9a 89       	ldd	r25, Y+18	; 0x12
    1078:	01 97       	sbiw	r24, 0x01	; 1
    107a:	f1 f7       	brne	.-4      	; 0x1078 <main+0x25a>
    107c:	9a 8b       	std	Y+18, r25	; 0x12
    107e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1080:	8b 89       	ldd	r24, Y+19	; 0x13
    1082:	9c 89       	ldd	r25, Y+20	; 0x14
    1084:	01 97       	sbiw	r24, 0x01	; 1
    1086:	9c 8b       	std	Y+20, r25	; 0x14
    1088:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    108a:	8b 89       	ldd	r24, Y+19	; 0x13
    108c:	9c 89       	ldd	r25, Y+20	; 0x14
    108e:	00 97       	sbiw	r24, 0x00	; 0
    1090:	69 f7       	brne	.-38     	; 0x106c <main+0x24e>
    1092:	14 c0       	rjmp	.+40     	; 0x10bc <main+0x29e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1094:	6d 89       	ldd	r22, Y+21	; 0x15
    1096:	7e 89       	ldd	r23, Y+22	; 0x16
    1098:	8f 89       	ldd	r24, Y+23	; 0x17
    109a:	98 8d       	ldd	r25, Y+24	; 0x18
    109c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    10a0:	dc 01       	movw	r26, r24
    10a2:	cb 01       	movw	r24, r22
    10a4:	9c 8b       	std	Y+20, r25	; 0x14
    10a6:	8b 8b       	std	Y+19, r24	; 0x13
    10a8:	8b 89       	ldd	r24, Y+19	; 0x13
    10aa:	9c 89       	ldd	r25, Y+20	; 0x14
    10ac:	98 8b       	std	Y+16, r25	; 0x10
    10ae:	8f 87       	std	Y+15, r24	; 0x0f
    10b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    10b2:	98 89       	ldd	r25, Y+16	; 0x10
    10b4:	01 97       	sbiw	r24, 0x01	; 1
    10b6:	f1 f7       	brne	.-4      	; 0x10b4 <main+0x296>
    10b8:	98 8b       	std	Y+16, r25	; 0x10
    10ba:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(50);
		LCD_voidClear();
    10bc:	0e 94 9a 14 	call	0x2934	; 0x2934 <LCD_voidClear>
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	a8 e4       	ldi	r26, 0x48	; 72
    10c6:	b2 e4       	ldi	r27, 0x42	; 66
    10c8:	8b 87       	std	Y+11, r24	; 0x0b
    10ca:	9c 87       	std	Y+12, r25	; 0x0c
    10cc:	ad 87       	std	Y+13, r26	; 0x0d
    10ce:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d0:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d2:	7c 85       	ldd	r23, Y+12	; 0x0c
    10d4:	8d 85       	ldd	r24, Y+13	; 0x0d
    10d6:	9e 85       	ldd	r25, Y+14	; 0x0e
    10d8:	20 e0       	ldi	r18, 0x00	; 0
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	4a ef       	ldi	r20, 0xFA	; 250
    10de:	54 e4       	ldi	r21, 0x44	; 68
    10e0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    10e4:	dc 01       	movw	r26, r24
    10e6:	cb 01       	movw	r24, r22
    10e8:	8f 83       	std	Y+7, r24	; 0x07
    10ea:	98 87       	std	Y+8, r25	; 0x08
    10ec:	a9 87       	std	Y+9, r26	; 0x09
    10ee:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f0:	6f 81       	ldd	r22, Y+7	; 0x07
    10f2:	78 85       	ldd	r23, Y+8	; 0x08
    10f4:	89 85       	ldd	r24, Y+9	; 0x09
    10f6:	9a 85       	ldd	r25, Y+10	; 0x0a
    10f8:	20 e0       	ldi	r18, 0x00	; 0
    10fa:	30 e0       	ldi	r19, 0x00	; 0
    10fc:	40 e8       	ldi	r20, 0x80	; 128
    10fe:	5f e3       	ldi	r21, 0x3F	; 63
    1100:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1104:	88 23       	and	r24, r24
    1106:	2c f4       	brge	.+10     	; 0x1112 <main+0x2f4>
		__ticks = 1;
    1108:	81 e0       	ldi	r24, 0x01	; 1
    110a:	90 e0       	ldi	r25, 0x00	; 0
    110c:	9e 83       	std	Y+6, r25	; 0x06
    110e:	8d 83       	std	Y+5, r24	; 0x05
    1110:	3f c0       	rjmp	.+126    	; 0x1190 <main+0x372>
	else if (__tmp > 65535)
    1112:	6f 81       	ldd	r22, Y+7	; 0x07
    1114:	78 85       	ldd	r23, Y+8	; 0x08
    1116:	89 85       	ldd	r24, Y+9	; 0x09
    1118:	9a 85       	ldd	r25, Y+10	; 0x0a
    111a:	20 e0       	ldi	r18, 0x00	; 0
    111c:	3f ef       	ldi	r19, 0xFF	; 255
    111e:	4f e7       	ldi	r20, 0x7F	; 127
    1120:	57 e4       	ldi	r21, 0x47	; 71
    1122:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1126:	18 16       	cp	r1, r24
    1128:	4c f5       	brge	.+82     	; 0x117c <main+0x35e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    112a:	6b 85       	ldd	r22, Y+11	; 0x0b
    112c:	7c 85       	ldd	r23, Y+12	; 0x0c
    112e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1130:	9e 85       	ldd	r25, Y+14	; 0x0e
    1132:	20 e0       	ldi	r18, 0x00	; 0
    1134:	30 e0       	ldi	r19, 0x00	; 0
    1136:	40 e2       	ldi	r20, 0x20	; 32
    1138:	51 e4       	ldi	r21, 0x41	; 65
    113a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    113e:	dc 01       	movw	r26, r24
    1140:	cb 01       	movw	r24, r22
    1142:	bc 01       	movw	r22, r24
    1144:	cd 01       	movw	r24, r26
    1146:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    114a:	dc 01       	movw	r26, r24
    114c:	cb 01       	movw	r24, r22
    114e:	9e 83       	std	Y+6, r25	; 0x06
    1150:	8d 83       	std	Y+5, r24	; 0x05
    1152:	0f c0       	rjmp	.+30     	; 0x1172 <main+0x354>
    1154:	88 ec       	ldi	r24, 0xC8	; 200
    1156:	90 e0       	ldi	r25, 0x00	; 0
    1158:	9c 83       	std	Y+4, r25	; 0x04
    115a:	8b 83       	std	Y+3, r24	; 0x03
    115c:	8b 81       	ldd	r24, Y+3	; 0x03
    115e:	9c 81       	ldd	r25, Y+4	; 0x04
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	f1 f7       	brne	.-4      	; 0x1160 <main+0x342>
    1164:	9c 83       	std	Y+4, r25	; 0x04
    1166:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1168:	8d 81       	ldd	r24, Y+5	; 0x05
    116a:	9e 81       	ldd	r25, Y+6	; 0x06
    116c:	01 97       	sbiw	r24, 0x01	; 1
    116e:	9e 83       	std	Y+6, r25	; 0x06
    1170:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1172:	8d 81       	ldd	r24, Y+5	; 0x05
    1174:	9e 81       	ldd	r25, Y+6	; 0x06
    1176:	00 97       	sbiw	r24, 0x00	; 0
    1178:	69 f7       	brne	.-38     	; 0x1154 <main+0x336>
    117a:	61 ce       	rjmp	.-830    	; 0xe3e <main+0x20>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    117c:	6f 81       	ldd	r22, Y+7	; 0x07
    117e:	78 85       	ldd	r23, Y+8	; 0x08
    1180:	89 85       	ldd	r24, Y+9	; 0x09
    1182:	9a 85       	ldd	r25, Y+10	; 0x0a
    1184:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1188:	dc 01       	movw	r26, r24
    118a:	cb 01       	movw	r24, r22
    118c:	9e 83       	std	Y+6, r25	; 0x06
    118e:	8d 83       	std	Y+5, r24	; 0x05
    1190:	8d 81       	ldd	r24, Y+5	; 0x05
    1192:	9e 81       	ldd	r25, Y+6	; 0x06
    1194:	9a 83       	std	Y+2, r25	; 0x02
    1196:	89 83       	std	Y+1, r24	; 0x01
    1198:	89 81       	ldd	r24, Y+1	; 0x01
    119a:	9a 81       	ldd	r25, Y+2	; 0x02
    119c:	01 97       	sbiw	r24, 0x01	; 1
    119e:	f1 f7       	brne	.-4      	; 0x119c <main+0x37e>
    11a0:	9a 83       	std	Y+2, r25	; 0x02
    11a2:	89 83       	std	Y+1, r24	; 0x01
    11a4:	4c ce       	rjmp	.-872    	; 0xe3e <main+0x20>

000011a6 <ADC_voidInit>:
#include "ADC_config.h"



void ADC_voidInit(void)
{
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	SET_BIT(ADC_u8_ADMUX,6);
    11ae:	a7 e2       	ldi	r26, 0x27	; 39
    11b0:	b0 e0       	ldi	r27, 0x00	; 0
    11b2:	e7 e2       	ldi	r30, 0x27	; 39
    11b4:	f0 e0       	ldi	r31, 0x00	; 0
    11b6:	80 81       	ld	r24, Z
    11b8:	80 64       	ori	r24, 0x40	; 64
    11ba:	8c 93       	st	X, r24
	CLR_BIT(ADC_u8_ADMUX,7);
    11bc:	a7 e2       	ldi	r26, 0x27	; 39
    11be:	b0 e0       	ldi	r27, 0x00	; 0
    11c0:	e7 e2       	ldi	r30, 0x27	; 39
    11c2:	f0 e0       	ldi	r31, 0x00	; 0
    11c4:	80 81       	ld	r24, Z
    11c6:	8f 77       	andi	r24, 0x7F	; 127
    11c8:	8c 93       	st	X, r24


	//left or right adjust //right
	CLR_BIT(ADC_u8_ADMUX,5);
    11ca:	a7 e2       	ldi	r26, 0x27	; 39
    11cc:	b0 e0       	ldi	r27, 0x00	; 0
    11ce:	e7 e2       	ldi	r30, 0x27	; 39
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	80 81       	ld	r24, Z
    11d4:	8f 7d       	andi	r24, 0xDF	; 223
    11d6:	8c 93       	st	X, r24


	CLR_BIT(ADC_u8_ADCSRA,5);
    11d8:	a6 e2       	ldi	r26, 0x26	; 38
    11da:	b0 e0       	ldi	r27, 0x00	; 0
    11dc:	e6 e2       	ldi	r30, 0x26	; 38
    11de:	f0 e0       	ldi	r31, 0x00	; 0
    11e0:	80 81       	ld	r24, Z
    11e2:	8f 7d       	andi	r24, 0xDF	; 223
    11e4:	8c 93       	st	X, r24


	CLR_BIT( ADC_u8_ADCSRA,0);
    11e6:	a6 e2       	ldi	r26, 0x26	; 38
    11e8:	b0 e0       	ldi	r27, 0x00	; 0
    11ea:	e6 e2       	ldi	r30, 0x26	; 38
    11ec:	f0 e0       	ldi	r31, 0x00	; 0
    11ee:	80 81       	ld	r24, Z
    11f0:	8e 7f       	andi	r24, 0xFE	; 254
    11f2:	8c 93       	st	X, r24
	CLR_BIT( ADC_u8_ADCSRA,1);
    11f4:	a6 e2       	ldi	r26, 0x26	; 38
    11f6:	b0 e0       	ldi	r27, 0x00	; 0
    11f8:	e6 e2       	ldi	r30, 0x26	; 38
    11fa:	f0 e0       	ldi	r31, 0x00	; 0
    11fc:	80 81       	ld	r24, Z
    11fe:	8d 7f       	andi	r24, 0xFD	; 253
    1200:	8c 93       	st	X, r24
	SET_BIT(ADC_u8_ADCSRA,2);
    1202:	a6 e2       	ldi	r26, 0x26	; 38
    1204:	b0 e0       	ldi	r27, 0x00	; 0
    1206:	e6 e2       	ldi	r30, 0x26	; 38
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	84 60       	ori	r24, 0x04	; 4
    120e:	8c 93       	st	X, r24


	SET_BIT(ADC_u8_ADCSRA,7);
    1210:	a6 e2       	ldi	r26, 0x26	; 38
    1212:	b0 e0       	ldi	r27, 0x00	; 0
    1214:	e6 e2       	ldi	r30, 0x26	; 38
    1216:	f0 e0       	ldi	r31, 0x00	; 0
    1218:	80 81       	ld	r24, Z
    121a:	80 68       	ori	r24, 0x80	; 128
    121c:	8c 93       	st	X, r24
}
    121e:	cf 91       	pop	r28
    1220:	df 91       	pop	r29
    1222:	08 95       	ret

00001224 <ADC_u8GetDigitalValueSynchNonBlocking>:

u8 ADC_u8GetDigitalValueSynchNonBlocking( u8 Copy_u8Channel ,u16 * Copy_pu16DigitalValue)
{
    1224:	df 93       	push	r29
    1226:	cf 93       	push	r28
    1228:	00 d0       	rcall	.+0      	; 0x122a <ADC_u8GetDigitalValueSynchNonBlocking+0x6>
    122a:	00 d0       	rcall	.+0      	; 0x122c <ADC_u8GetDigitalValueSynchNonBlocking+0x8>
    122c:	cd b7       	in	r28, 0x3d	; 61
    122e:	de b7       	in	r29, 0x3e	; 62
    1230:	8a 83       	std	Y+2, r24	; 0x02
    1232:	7c 83       	std	Y+4, r23	; 0x04
    1234:	6b 83       	std	Y+3, r22	; 0x03
	u8 Local_u8ErrorState = STD_TYPES_OK;
    1236:	81 e0       	ldi	r24, 0x01	; 1
    1238:	89 83       	std	Y+1, r24	; 0x01
	if((Copy_u8Channel<32) && ( Copy_pu16DigitalValue!=NULL))
    123a:	8a 81       	ldd	r24, Y+2	; 0x02
    123c:	80 32       	cpi	r24, 0x20	; 32
    123e:	a8 f5       	brcc	.+106    	; 0x12aa <ADC_u8GetDigitalValueSynchNonBlocking+0x86>
    1240:	8b 81       	ldd	r24, Y+3	; 0x03
    1242:	9c 81       	ldd	r25, Y+4	; 0x04
    1244:	00 97       	sbiw	r24, 0x00	; 0
    1246:	89 f1       	breq	.+98     	; 0x12aa <ADC_u8GetDigitalValueSynchNonBlocking+0x86>
	{
		//clear ADMUX
		ADC_u8_ADMUX &= 0b11100000;
    1248:	a7 e2       	ldi	r26, 0x27	; 39
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	e7 e2       	ldi	r30, 0x27	; 39
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 7e       	andi	r24, 0xE0	; 224
    1254:	8c 93       	st	X, r24
		//select channel
		ADC_u8_ADMUX |= Copy_u8Channel;
    1256:	a7 e2       	ldi	r26, 0x27	; 39
    1258:	b0 e0       	ldi	r27, 0x00	; 0
    125a:	e7 e2       	ldi	r30, 0x27	; 39
    125c:	f0 e0       	ldi	r31, 0x00	; 0
    125e:	90 81       	ld	r25, Z
    1260:	8a 81       	ldd	r24, Y+2	; 0x02
    1262:	89 2b       	or	r24, r25
    1264:	8c 93       	st	X, r24
		//start conversion
		SET_BIT(ADC_u8_ADCSRA,6);
    1266:	a6 e2       	ldi	r26, 0x26	; 38
    1268:	b0 e0       	ldi	r27, 0x00	; 0
    126a:	e6 e2       	ldi	r30, 0x26	; 38
    126c:	f0 e0       	ldi	r31, 0x00	; 0
    126e:	80 81       	ld	r24, Z
    1270:	80 64       	ori	r24, 0x40	; 64
    1272:	8c 93       	st	X, r24
		//wait for the interrupt flag
		while((GET_BIT(ADC_u8_ADCSRA,4))==0);
    1274:	e6 e2       	ldi	r30, 0x26	; 38
    1276:	f0 e0       	ldi	r31, 0x00	; 0
    1278:	80 81       	ld	r24, Z
    127a:	82 95       	swap	r24
    127c:	8f 70       	andi	r24, 0x0F	; 15
    127e:	88 2f       	mov	r24, r24
    1280:	90 e0       	ldi	r25, 0x00	; 0
    1282:	81 70       	andi	r24, 0x01	; 1
    1284:	90 70       	andi	r25, 0x00	; 0
    1286:	00 97       	sbiw	r24, 0x00	; 0
    1288:	a9 f3       	breq	.-22     	; 0x1274 <ADC_u8GetDigitalValueSynchNonBlocking+0x50>

		//read output
		*Copy_pu16DigitalValue= ADC_u16_ADC;
    128a:	e4 e2       	ldi	r30, 0x24	; 36
    128c:	f0 e0       	ldi	r31, 0x00	; 0
    128e:	80 81       	ld	r24, Z
    1290:	91 81       	ldd	r25, Z+1	; 0x01
    1292:	eb 81       	ldd	r30, Y+3	; 0x03
    1294:	fc 81       	ldd	r31, Y+4	; 0x04
    1296:	91 83       	std	Z+1, r25	; 0x01
    1298:	80 83       	st	Z, r24

		//remove flag
		SET_BIT(ADC_u8_ADCSRA,4);
    129a:	a6 e2       	ldi	r26, 0x26	; 38
    129c:	b0 e0       	ldi	r27, 0x00	; 0
    129e:	e6 e2       	ldi	r30, 0x26	; 38
    12a0:	f0 e0       	ldi	r31, 0x00	; 0
    12a2:	80 81       	ld	r24, Z
    12a4:	80 61       	ori	r24, 0x10	; 16
    12a6:	8c 93       	st	X, r24
    12a8:	01 c0       	rjmp	.+2      	; 0x12ac <ADC_u8GetDigitalValueSynchNonBlocking+0x88>

	}
	else Local_u8ErrorState = STD_TYPES_NOK;
    12aa:	19 82       	std	Y+1, r1	; 0x01

	return Local_u8ErrorState;
    12ac:	89 81       	ldd	r24, Y+1	; 0x01

}
    12ae:	0f 90       	pop	r0
    12b0:	0f 90       	pop	r0
    12b2:	0f 90       	pop	r0
    12b4:	0f 90       	pop	r0
    12b6:	cf 91       	pop	r28
    12b8:	df 91       	pop	r29
    12ba:	08 95       	ret

000012bc <NOLED>:
void NOLED (void)
{
    12bc:	df 93       	push	r29
    12be:	cf 93       	push	r28
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_LOW);
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	60 e0       	ldi	r22, 0x00	; 0
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    12ce:	81 e0       	ldi	r24, 0x01	; 1
    12d0:	61 e0       	ldi	r22, 0x01	; 1
    12d2:	40 e0       	ldi	r20, 0x00	; 0
    12d4:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    12d8:	81 e0       	ldi	r24, 0x01	; 1
    12da:	62 e0       	ldi	r22, 0x02	; 2
    12dc:	40 e0       	ldi	r20, 0x00	; 0
    12de:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	63 e0       	ldi	r22, 0x03	; 3
    12e6:	40 e0       	ldi	r20, 0x00	; 0
    12e8:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
}
    12ec:	cf 91       	pop	r28
    12ee:	df 91       	pop	r29
    12f0:	08 95       	ret

000012f2 <LED1>:

void LED1 (void)
{
    12f2:	df 93       	push	r29
    12f4:	cf 93       	push	r28
    12f6:	cd b7       	in	r28, 0x3d	; 61
    12f8:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    12fa:	81 e0       	ldi	r24, 0x01	; 1
    12fc:	60 e0       	ldi	r22, 0x00	; 0
    12fe:	41 e0       	ldi	r20, 0x01	; 1
    1300:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_LOW);
    1304:	81 e0       	ldi	r24, 0x01	; 1
    1306:	61 e0       	ldi	r22, 0x01	; 1
    1308:	40 e0       	ldi	r20, 0x00	; 0
    130a:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    130e:	81 e0       	ldi	r24, 0x01	; 1
    1310:	62 e0       	ldi	r22, 0x02	; 2
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    1318:	81 e0       	ldi	r24, 0x01	; 1
    131a:	63 e0       	ldi	r22, 0x03	; 3
    131c:	40 e0       	ldi	r20, 0x00	; 0
    131e:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
}
    1322:	cf 91       	pop	r28
    1324:	df 91       	pop	r29
    1326:	08 95       	ret

00001328 <LED12>:
void LED12 (void)
{
    1328:	df 93       	push	r29
    132a:	cf 93       	push	r28
    132c:	cd b7       	in	r28, 0x3d	; 61
    132e:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    1330:	81 e0       	ldi	r24, 0x01	; 1
    1332:	60 e0       	ldi	r22, 0x00	; 0
    1334:	41 e0       	ldi	r20, 0x01	; 1
    1336:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    133a:	81 e0       	ldi	r24, 0x01	; 1
    133c:	61 e0       	ldi	r22, 0x01	; 1
    133e:	41 e0       	ldi	r20, 0x01	; 1
    1340:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_LOW);
    1344:	81 e0       	ldi	r24, 0x01	; 1
    1346:	62 e0       	ldi	r22, 0x02	; 2
    1348:	40 e0       	ldi	r20, 0x00	; 0
    134a:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    134e:	81 e0       	ldi	r24, 0x01	; 1
    1350:	63 e0       	ldi	r22, 0x03	; 3
    1352:	40 e0       	ldi	r20, 0x00	; 0
    1354:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
}
    1358:	cf 91       	pop	r28
    135a:	df 91       	pop	r29
    135c:	08 95       	ret

0000135e <LED123>:
void LED123 (void)
{
    135e:	df 93       	push	r29
    1360:	cf 93       	push	r28
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    1366:	81 e0       	ldi	r24, 0x01	; 1
    1368:	60 e0       	ldi	r22, 0x00	; 0
    136a:	41 e0       	ldi	r20, 0x01	; 1
    136c:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    1370:	81 e0       	ldi	r24, 0x01	; 1
    1372:	61 e0       	ldi	r22, 0x01	; 1
    1374:	41 e0       	ldi	r20, 0x01	; 1
    1376:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    137a:	81 e0       	ldi	r24, 0x01	; 1
    137c:	62 e0       	ldi	r22, 0x02	; 2
    137e:	41 e0       	ldi	r20, 0x01	; 1
    1380:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_LOW);
    1384:	81 e0       	ldi	r24, 0x01	; 1
    1386:	63 e0       	ldi	r22, 0x03	; 3
    1388:	40 e0       	ldi	r20, 0x00	; 0
    138a:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
}
    138e:	cf 91       	pop	r28
    1390:	df 91       	pop	r29
    1392:	08 95       	ret

00001394 <LED1234>:
void LED1234 (void)
{
    1394:	df 93       	push	r29
    1396:	cf 93       	push	r28
    1398:	cd b7       	in	r28, 0x3d	; 61
    139a:	de b7       	in	r29, 0x3e	; 62
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN0,DIO_u8_HIGH);
    139c:	81 e0       	ldi	r24, 0x01	; 1
    139e:	60 e0       	ldi	r22, 0x00	; 0
    13a0:	41 e0       	ldi	r20, 0x01	; 1
    13a2:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN1,DIO_u8_HIGH);
    13a6:	81 e0       	ldi	r24, 0x01	; 1
    13a8:	61 e0       	ldi	r22, 0x01	; 1
    13aa:	41 e0       	ldi	r20, 0x01	; 1
    13ac:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN2,DIO_u8_HIGH);
    13b0:	81 e0       	ldi	r24, 0x01	; 1
    13b2:	62 e0       	ldi	r22, 0x02	; 2
    13b4:	41 e0       	ldi	r20, 0x01	; 1
    13b6:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	DIO_u8SetPinValue(DIO_u8_PORTB,DIO_u8_PIN3,DIO_u8_HIGH);
    13ba:	81 e0       	ldi	r24, 0x01	; 1
    13bc:	63 e0       	ldi	r22, 0x03	; 3
    13be:	41 e0       	ldi	r20, 0x01	; 1
    13c0:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>


}
    13c4:	cf 91       	pop	r28
    13c6:	df 91       	pop	r29
    13c8:	08 95       	ret

000013ca <DIO_Init>:
#include "DIO_interface.h"
#include "DIO_private.h"
#include "DIO_config.h"

void DIO_Init(void)
{
    13ca:	df 93       	push	r29
    13cc:	cf 93       	push	r28
    13ce:	cd b7       	in	r28, 0x3d	; 61
    13d0:	de b7       	in	r29, 0x3e	; 62
	/* Initial Direction For Pins */
	DDRA_u8_REG = CONC(DIO_u8_PA7_INITIAL_DIRECTION,DIO_u8_PA6_INITIAL_DIRECTION,DIO_u8_PA5_INITIAL_DIRECTION,DIO_u8_PA4_INITIAL_DIRECTION,
    13d2:	ea e3       	ldi	r30, 0x3A	; 58
    13d4:	f0 e0       	ldi	r31, 0x00	; 0
    13d6:	82 e0       	ldi	r24, 0x02	; 2
    13d8:	80 83       	st	Z, r24
			DIO_u8_PA3_INITIAL_DIRECTION,DIO_u8_PA2_INITIAL_DIRECTION,DIO_u8_PA1_INITIAL_DIRECTION,DIO_u8_PA0_INITIAL_DIRECTION);
	DDRB_u8_REG = CONC(DIO_u8_PB7_INITIAL_DIRECTION,DIO_u8_PB6_INITIAL_DIRECTION,DIO_u8_PB5_INITIAL_DIRECTION,DIO_u8_PB4_INITIAL_DIRECTION,
    13da:	e7 e3       	ldi	r30, 0x37	; 55
    13dc:	f0 e0       	ldi	r31, 0x00	; 0
    13de:	8f ef       	ldi	r24, 0xFF	; 255
    13e0:	80 83       	st	Z, r24
			DIO_u8_PB3_INITIAL_DIRECTION,DIO_u8_PB2_INITIAL_DIRECTION,DIO_u8_PB1_INITIAL_DIRECTION,DIO_u8_PB0_INITIAL_DIRECTION);
	DDRC_u8_REG = CONC(DIO_u8_PC7_INITIAL_DIRECTION,DIO_u8_PC6_INITIAL_DIRECTION,DIO_u8_PC5_INITIAL_DIRECTION,DIO_u8_PC4_INITIAL_DIRECTION,
    13e2:	e4 e3       	ldi	r30, 0x34	; 52
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	8f ef       	ldi	r24, 0xFF	; 255
    13e8:	80 83       	st	Z, r24
			DIO_u8_PC3_INITIAL_DIRECTION,DIO_u8_PC2_INITIAL_DIRECTION,DIO_u8_PC1_INITIAL_DIRECTION,DIO_u8_PC0_INITIAL_DIRECTION);
	DDRD_u8_REG = CONC(DIO_u8_PD7_INITIAL_DIRECTION,DIO_u8_PD6_INITIAL_DIRECTION,DIO_u8_PD5_INITIAL_DIRECTION,DIO_u8_PD4_INITIAL_DIRECTION,
    13ea:	e1 e3       	ldi	r30, 0x31	; 49
    13ec:	f0 e0       	ldi	r31, 0x00	; 0
    13ee:	8f ef       	ldi	r24, 0xFF	; 255
    13f0:	80 83       	st	Z, r24
			DIO_u8_PD3_INITIAL_DIRECTION,DIO_u8_PD2_INITIAL_DIRECTION,DIO_u8_PD1_INITIAL_DIRECTION,DIO_u8_PD0_INITIAL_DIRECTION);

	/* Initial Value For Pins */
	PORTA_u8_REG = CONC(DIO_u8_PA7_INITIAL_VALUE,DIO_u8_PA6_INITIAL_VALUE,DIO_u8_PA5_INITIAL_VALUE,DIO_u8_PA4_INITIAL_VALUE,
    13f2:	eb e3       	ldi	r30, 0x3B	; 59
    13f4:	f0 e0       	ldi	r31, 0x00	; 0
    13f6:	10 82       	st	Z, r1
			DIO_u8_PA3_INITIAL_VALUE,DIO_u8_PA2_INITIAL_VALUE,DIO_u8_PA1_INITIAL_VALUE,DIO_u8_PA0_INITIAL_VALUE);
	PORTB_u8_REG = CONC(DIO_u8_PB7_INITIAL_VALUE,DIO_u8_PB6_INITIAL_VALUE,DIO_u8_PB5_INITIAL_VALUE,DIO_u8_PB4_INITIAL_VALUE,
    13f8:	e8 e3       	ldi	r30, 0x38	; 56
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	10 82       	st	Z, r1
			DIO_u8_PB3_INITIAL_VALUE,DIO_u8_PB2_INITIAL_VALUE,DIO_u8_PB1_INITIAL_VALUE,DIO_u8_PB0_INITIAL_VALUE);
	PORTC_u8_REG = CONC(DIO_u8_PC7_INITIAL_VALUE,DIO_u8_PC6_INITIAL_VALUE,DIO_u8_PC5_INITIAL_VALUE,DIO_u8_PC4_INITIAL_VALUE,
    13fe:	e5 e3       	ldi	r30, 0x35	; 53
    1400:	f0 e0       	ldi	r31, 0x00	; 0
    1402:	10 82       	st	Z, r1
			DIO_u8_PC3_INITIAL_VALUE,DIO_u8_PC2_INITIAL_VALUE,DIO_u8_PC1_INITIAL_VALUE,DIO_u8_PC0_INITIAL_VALUE);
	PORTD_u8_REG = CONC(DIO_u8_PD7_INITIAL_VALUE,DIO_u8_PD6_INITIAL_VALUE,DIO_u8_PD5_INITIAL_VALUE,DIO_u8_PD4_INITIAL_VALUE,
    1404:	e2 e3       	ldi	r30, 0x32	; 50
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	10 82       	st	Z, r1
			DIO_u8_PD3_INITIAL_VALUE,DIO_u8_PD2_INITIAL_VALUE,DIO_u8_PD1_INITIAL_VALUE,DIO_u8_PD0_INITIAL_VALUE);
}
    140a:	cf 91       	pop	r28
    140c:	df 91       	pop	r29
    140e:	08 95       	ret

00001410 <DIO_u8SetPinDirection>:

u8 DIO_u8SetPinDirection	(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinDirection)
{
    1410:	df 93       	push	r29
    1412:	cf 93       	push	r28
    1414:	cd b7       	in	r28, 0x3d	; 61
    1416:	de b7       	in	r29, 0x3e	; 62
    1418:	2e 97       	sbiw	r28, 0x0e	; 14
    141a:	0f b6       	in	r0, 0x3f	; 63
    141c:	f8 94       	cli
    141e:	de bf       	out	0x3e, r29	; 62
    1420:	0f be       	out	0x3f, r0	; 63
    1422:	cd bf       	out	0x3d, r28	; 61
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	6b 83       	std	Y+3, r22	; 0x03
    1428:	4c 83       	std	Y+4, r20	; 0x04
	u8 Local_u8ErrorStatus = STD_TYPES_OK;
    142a:	81 e0       	ldi	r24, 0x01	; 1
    142c:	89 83       	std	Y+1, r24	; 0x01

	/* Check 1- Valid Port ID
             2- Valid Pin ID	
			 3- Valid Pin Direction*/
	if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinDirection == DIO_u8_INPUT) || (Copy_u8PinDirection == DIO_u8_OUTPUT)))
    142e:	8a 81       	ldd	r24, Y+2	; 0x02
    1430:	84 30       	cpi	r24, 0x04	; 4
    1432:	08 f0       	brcs	.+2      	; 0x1436 <DIO_u8SetPinDirection+0x26>
    1434:	0d c1       	rjmp	.+538    	; 0x1650 <DIO_u8SetPinDirection+0x240>
    1436:	8b 81       	ldd	r24, Y+3	; 0x03
    1438:	88 30       	cpi	r24, 0x08	; 8
    143a:	08 f0       	brcs	.+2      	; 0x143e <DIO_u8SetPinDirection+0x2e>
    143c:	09 c1       	rjmp	.+530    	; 0x1650 <DIO_u8SetPinDirection+0x240>
    143e:	8c 81       	ldd	r24, Y+4	; 0x04
    1440:	88 23       	and	r24, r24
    1442:	21 f0       	breq	.+8      	; 0x144c <DIO_u8SetPinDirection+0x3c>
    1444:	8c 81       	ldd	r24, Y+4	; 0x04
    1446:	81 30       	cpi	r24, 0x01	; 1
    1448:	09 f0       	breq	.+2      	; 0x144c <DIO_u8SetPinDirection+0x3c>
    144a:	02 c1       	rjmp	.+516    	; 0x1650 <DIO_u8SetPinDirection+0x240>
	{
		switch(Copy_u8PortId)
    144c:	8a 81       	ldd	r24, Y+2	; 0x02
    144e:	28 2f       	mov	r18, r24
    1450:	30 e0       	ldi	r19, 0x00	; 0
    1452:	3e 87       	std	Y+14, r19	; 0x0e
    1454:	2d 87       	std	Y+13, r18	; 0x0d
    1456:	8d 85       	ldd	r24, Y+13	; 0x0d
    1458:	9e 85       	ldd	r25, Y+14	; 0x0e
    145a:	81 30       	cpi	r24, 0x01	; 1
    145c:	91 05       	cpc	r25, r1
    145e:	09 f4       	brne	.+2      	; 0x1462 <DIO_u8SetPinDirection+0x52>
    1460:	4f c0       	rjmp	.+158    	; 0x1500 <DIO_u8SetPinDirection+0xf0>
    1462:	2d 85       	ldd	r18, Y+13	; 0x0d
    1464:	3e 85       	ldd	r19, Y+14	; 0x0e
    1466:	22 30       	cpi	r18, 0x02	; 2
    1468:	31 05       	cpc	r19, r1
    146a:	2c f4       	brge	.+10     	; 0x1476 <DIO_u8SetPinDirection+0x66>
    146c:	8d 85       	ldd	r24, Y+13	; 0x0d
    146e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1470:	00 97       	sbiw	r24, 0x00	; 0
    1472:	71 f0       	breq	.+28     	; 0x1490 <DIO_u8SetPinDirection+0x80>
    1474:	ee c0       	rjmp	.+476    	; 0x1652 <DIO_u8SetPinDirection+0x242>
    1476:	2d 85       	ldd	r18, Y+13	; 0x0d
    1478:	3e 85       	ldd	r19, Y+14	; 0x0e
    147a:	22 30       	cpi	r18, 0x02	; 2
    147c:	31 05       	cpc	r19, r1
    147e:	09 f4       	brne	.+2      	; 0x1482 <DIO_u8SetPinDirection+0x72>
    1480:	77 c0       	rjmp	.+238    	; 0x1570 <DIO_u8SetPinDirection+0x160>
    1482:	8d 85       	ldd	r24, Y+13	; 0x0d
    1484:	9e 85       	ldd	r25, Y+14	; 0x0e
    1486:	83 30       	cpi	r24, 0x03	; 3
    1488:	91 05       	cpc	r25, r1
    148a:	09 f4       	brne	.+2      	; 0x148e <DIO_u8SetPinDirection+0x7e>
    148c:	a9 c0       	rjmp	.+338    	; 0x15e0 <DIO_u8SetPinDirection+0x1d0>
    148e:	e1 c0       	rjmp	.+450    	; 0x1652 <DIO_u8SetPinDirection+0x242>
		{
		case DIO_u8_PORTA:
			switch(Copy_u8PinDirection)
    1490:	8c 81       	ldd	r24, Y+4	; 0x04
    1492:	28 2f       	mov	r18, r24
    1494:	30 e0       	ldi	r19, 0x00	; 0
    1496:	3c 87       	std	Y+12, r19	; 0x0c
    1498:	2b 87       	std	Y+11, r18	; 0x0b
    149a:	8b 85       	ldd	r24, Y+11	; 0x0b
    149c:	9c 85       	ldd	r25, Y+12	; 0x0c
    149e:	00 97       	sbiw	r24, 0x00	; 0
    14a0:	31 f0       	breq	.+12     	; 0x14ae <DIO_u8SetPinDirection+0x9e>
    14a2:	2b 85       	ldd	r18, Y+11	; 0x0b
    14a4:	3c 85       	ldd	r19, Y+12	; 0x0c
    14a6:	21 30       	cpi	r18, 0x01	; 1
    14a8:	31 05       	cpc	r19, r1
    14aa:	b1 f0       	breq	.+44     	; 0x14d8 <DIO_u8SetPinDirection+0xc8>
    14ac:	d2 c0       	rjmp	.+420    	; 0x1652 <DIO_u8SetPinDirection+0x242>
			{
			case DIO_u8_INPUT:
				CLR_BIT(DDRA_u8_REG,Copy_u8PinId);
    14ae:	aa e3       	ldi	r26, 0x3A	; 58
    14b0:	b0 e0       	ldi	r27, 0x00	; 0
    14b2:	ea e3       	ldi	r30, 0x3A	; 58
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	80 81       	ld	r24, Z
    14b8:	48 2f       	mov	r20, r24
    14ba:	8b 81       	ldd	r24, Y+3	; 0x03
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	81 e0       	ldi	r24, 0x01	; 1
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	02 2e       	mov	r0, r18
    14c6:	02 c0       	rjmp	.+4      	; 0x14cc <DIO_u8SetPinDirection+0xbc>
    14c8:	88 0f       	add	r24, r24
    14ca:	99 1f       	adc	r25, r25
    14cc:	0a 94       	dec	r0
    14ce:	e2 f7       	brpl	.-8      	; 0x14c8 <DIO_u8SetPinDirection+0xb8>
    14d0:	80 95       	com	r24
    14d2:	84 23       	and	r24, r20
    14d4:	8c 93       	st	X, r24
    14d6:	bd c0       	rjmp	.+378    	; 0x1652 <DIO_u8SetPinDirection+0x242>
				break;
			case DIO_u8_OUTPUT:
				SET_BIT(DDRA_u8_REG,Copy_u8PinId);
    14d8:	aa e3       	ldi	r26, 0x3A	; 58
    14da:	b0 e0       	ldi	r27, 0x00	; 0
    14dc:	ea e3       	ldi	r30, 0x3A	; 58
    14de:	f0 e0       	ldi	r31, 0x00	; 0
    14e0:	80 81       	ld	r24, Z
    14e2:	48 2f       	mov	r20, r24
    14e4:	8b 81       	ldd	r24, Y+3	; 0x03
    14e6:	28 2f       	mov	r18, r24
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	81 e0       	ldi	r24, 0x01	; 1
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	02 2e       	mov	r0, r18
    14f0:	02 c0       	rjmp	.+4      	; 0x14f6 <DIO_u8SetPinDirection+0xe6>
    14f2:	88 0f       	add	r24, r24
    14f4:	99 1f       	adc	r25, r25
    14f6:	0a 94       	dec	r0
    14f8:	e2 f7       	brpl	.-8      	; 0x14f2 <DIO_u8SetPinDirection+0xe2>
    14fa:	84 2b       	or	r24, r20
    14fc:	8c 93       	st	X, r24
    14fe:	a9 c0       	rjmp	.+338    	; 0x1652 <DIO_u8SetPinDirection+0x242>
				break;
			}
			break;
			case DIO_u8_PORTB:
				switch(Copy_u8PinDirection)
    1500:	8c 81       	ldd	r24, Y+4	; 0x04
    1502:	28 2f       	mov	r18, r24
    1504:	30 e0       	ldi	r19, 0x00	; 0
    1506:	3a 87       	std	Y+10, r19	; 0x0a
    1508:	29 87       	std	Y+9, r18	; 0x09
    150a:	89 85       	ldd	r24, Y+9	; 0x09
    150c:	9a 85       	ldd	r25, Y+10	; 0x0a
    150e:	00 97       	sbiw	r24, 0x00	; 0
    1510:	31 f0       	breq	.+12     	; 0x151e <DIO_u8SetPinDirection+0x10e>
    1512:	29 85       	ldd	r18, Y+9	; 0x09
    1514:	3a 85       	ldd	r19, Y+10	; 0x0a
    1516:	21 30       	cpi	r18, 0x01	; 1
    1518:	31 05       	cpc	r19, r1
    151a:	b1 f0       	breq	.+44     	; 0x1548 <DIO_u8SetPinDirection+0x138>
    151c:	9a c0       	rjmp	.+308    	; 0x1652 <DIO_u8SetPinDirection+0x242>
				{
				case DIO_u8_INPUT:
					CLR_BIT(DDRB_u8_REG,Copy_u8PinId);
    151e:	a7 e3       	ldi	r26, 0x37	; 55
    1520:	b0 e0       	ldi	r27, 0x00	; 0
    1522:	e7 e3       	ldi	r30, 0x37	; 55
    1524:	f0 e0       	ldi	r31, 0x00	; 0
    1526:	80 81       	ld	r24, Z
    1528:	48 2f       	mov	r20, r24
    152a:	8b 81       	ldd	r24, Y+3	; 0x03
    152c:	28 2f       	mov	r18, r24
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	90 e0       	ldi	r25, 0x00	; 0
    1534:	02 2e       	mov	r0, r18
    1536:	02 c0       	rjmp	.+4      	; 0x153c <DIO_u8SetPinDirection+0x12c>
    1538:	88 0f       	add	r24, r24
    153a:	99 1f       	adc	r25, r25
    153c:	0a 94       	dec	r0
    153e:	e2 f7       	brpl	.-8      	; 0x1538 <DIO_u8SetPinDirection+0x128>
    1540:	80 95       	com	r24
    1542:	84 23       	and	r24, r20
    1544:	8c 93       	st	X, r24
    1546:	85 c0       	rjmp	.+266    	; 0x1652 <DIO_u8SetPinDirection+0x242>
					break;
				case DIO_u8_OUTPUT:
					SET_BIT(DDRB_u8_REG,Copy_u8PinId);
    1548:	a7 e3       	ldi	r26, 0x37	; 55
    154a:	b0 e0       	ldi	r27, 0x00	; 0
    154c:	e7 e3       	ldi	r30, 0x37	; 55
    154e:	f0 e0       	ldi	r31, 0x00	; 0
    1550:	80 81       	ld	r24, Z
    1552:	48 2f       	mov	r20, r24
    1554:	8b 81       	ldd	r24, Y+3	; 0x03
    1556:	28 2f       	mov	r18, r24
    1558:	30 e0       	ldi	r19, 0x00	; 0
    155a:	81 e0       	ldi	r24, 0x01	; 1
    155c:	90 e0       	ldi	r25, 0x00	; 0
    155e:	02 2e       	mov	r0, r18
    1560:	02 c0       	rjmp	.+4      	; 0x1566 <DIO_u8SetPinDirection+0x156>
    1562:	88 0f       	add	r24, r24
    1564:	99 1f       	adc	r25, r25
    1566:	0a 94       	dec	r0
    1568:	e2 f7       	brpl	.-8      	; 0x1562 <DIO_u8SetPinDirection+0x152>
    156a:	84 2b       	or	r24, r20
    156c:	8c 93       	st	X, r24
    156e:	71 c0       	rjmp	.+226    	; 0x1652 <DIO_u8SetPinDirection+0x242>
					break;
				}
				break;
				case DIO_u8_PORTC:
					switch(Copy_u8PinDirection)
    1570:	8c 81       	ldd	r24, Y+4	; 0x04
    1572:	28 2f       	mov	r18, r24
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	38 87       	std	Y+8, r19	; 0x08
    1578:	2f 83       	std	Y+7, r18	; 0x07
    157a:	8f 81       	ldd	r24, Y+7	; 0x07
    157c:	98 85       	ldd	r25, Y+8	; 0x08
    157e:	00 97       	sbiw	r24, 0x00	; 0
    1580:	31 f0       	breq	.+12     	; 0x158e <DIO_u8SetPinDirection+0x17e>
    1582:	2f 81       	ldd	r18, Y+7	; 0x07
    1584:	38 85       	ldd	r19, Y+8	; 0x08
    1586:	21 30       	cpi	r18, 0x01	; 1
    1588:	31 05       	cpc	r19, r1
    158a:	b1 f0       	breq	.+44     	; 0x15b8 <DIO_u8SetPinDirection+0x1a8>
    158c:	62 c0       	rjmp	.+196    	; 0x1652 <DIO_u8SetPinDirection+0x242>
					{
					case DIO_u8_INPUT:
						CLR_BIT(DDRC_u8_REG,Copy_u8PinId);
    158e:	a4 e3       	ldi	r26, 0x34	; 52
    1590:	b0 e0       	ldi	r27, 0x00	; 0
    1592:	e4 e3       	ldi	r30, 0x34	; 52
    1594:	f0 e0       	ldi	r31, 0x00	; 0
    1596:	80 81       	ld	r24, Z
    1598:	48 2f       	mov	r20, r24
    159a:	8b 81       	ldd	r24, Y+3	; 0x03
    159c:	28 2f       	mov	r18, r24
    159e:	30 e0       	ldi	r19, 0x00	; 0
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	90 e0       	ldi	r25, 0x00	; 0
    15a4:	02 2e       	mov	r0, r18
    15a6:	02 c0       	rjmp	.+4      	; 0x15ac <DIO_u8SetPinDirection+0x19c>
    15a8:	88 0f       	add	r24, r24
    15aa:	99 1f       	adc	r25, r25
    15ac:	0a 94       	dec	r0
    15ae:	e2 f7       	brpl	.-8      	; 0x15a8 <DIO_u8SetPinDirection+0x198>
    15b0:	80 95       	com	r24
    15b2:	84 23       	and	r24, r20
    15b4:	8c 93       	st	X, r24
    15b6:	4d c0       	rjmp	.+154    	; 0x1652 <DIO_u8SetPinDirection+0x242>
						break;
					case DIO_u8_OUTPUT:
						SET_BIT(DDRC_u8_REG,Copy_u8PinId);
    15b8:	a4 e3       	ldi	r26, 0x34	; 52
    15ba:	b0 e0       	ldi	r27, 0x00	; 0
    15bc:	e4 e3       	ldi	r30, 0x34	; 52
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	48 2f       	mov	r20, r24
    15c4:	8b 81       	ldd	r24, Y+3	; 0x03
    15c6:	28 2f       	mov	r18, r24
    15c8:	30 e0       	ldi	r19, 0x00	; 0
    15ca:	81 e0       	ldi	r24, 0x01	; 1
    15cc:	90 e0       	ldi	r25, 0x00	; 0
    15ce:	02 2e       	mov	r0, r18
    15d0:	02 c0       	rjmp	.+4      	; 0x15d6 <DIO_u8SetPinDirection+0x1c6>
    15d2:	88 0f       	add	r24, r24
    15d4:	99 1f       	adc	r25, r25
    15d6:	0a 94       	dec	r0
    15d8:	e2 f7       	brpl	.-8      	; 0x15d2 <DIO_u8SetPinDirection+0x1c2>
    15da:	84 2b       	or	r24, r20
    15dc:	8c 93       	st	X, r24
    15de:	39 c0       	rjmp	.+114    	; 0x1652 <DIO_u8SetPinDirection+0x242>
						break;
					}
					break;
					case DIO_u8_PORTD:
						switch(Copy_u8PinDirection)
    15e0:	8c 81       	ldd	r24, Y+4	; 0x04
    15e2:	28 2f       	mov	r18, r24
    15e4:	30 e0       	ldi	r19, 0x00	; 0
    15e6:	3e 83       	std	Y+6, r19	; 0x06
    15e8:	2d 83       	std	Y+5, r18	; 0x05
    15ea:	8d 81       	ldd	r24, Y+5	; 0x05
    15ec:	9e 81       	ldd	r25, Y+6	; 0x06
    15ee:	00 97       	sbiw	r24, 0x00	; 0
    15f0:	31 f0       	breq	.+12     	; 0x15fe <DIO_u8SetPinDirection+0x1ee>
    15f2:	2d 81       	ldd	r18, Y+5	; 0x05
    15f4:	3e 81       	ldd	r19, Y+6	; 0x06
    15f6:	21 30       	cpi	r18, 0x01	; 1
    15f8:	31 05       	cpc	r19, r1
    15fa:	b1 f0       	breq	.+44     	; 0x1628 <DIO_u8SetPinDirection+0x218>
    15fc:	2a c0       	rjmp	.+84     	; 0x1652 <DIO_u8SetPinDirection+0x242>
						{
						case DIO_u8_INPUT:
							CLR_BIT(DDRD_u8_REG,Copy_u8PinId);
    15fe:	a1 e3       	ldi	r26, 0x31	; 49
    1600:	b0 e0       	ldi	r27, 0x00	; 0
    1602:	e1 e3       	ldi	r30, 0x31	; 49
    1604:	f0 e0       	ldi	r31, 0x00	; 0
    1606:	80 81       	ld	r24, Z
    1608:	48 2f       	mov	r20, r24
    160a:	8b 81       	ldd	r24, Y+3	; 0x03
    160c:	28 2f       	mov	r18, r24
    160e:	30 e0       	ldi	r19, 0x00	; 0
    1610:	81 e0       	ldi	r24, 0x01	; 1
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	02 2e       	mov	r0, r18
    1616:	02 c0       	rjmp	.+4      	; 0x161c <DIO_u8SetPinDirection+0x20c>
    1618:	88 0f       	add	r24, r24
    161a:	99 1f       	adc	r25, r25
    161c:	0a 94       	dec	r0
    161e:	e2 f7       	brpl	.-8      	; 0x1618 <DIO_u8SetPinDirection+0x208>
    1620:	80 95       	com	r24
    1622:	84 23       	and	r24, r20
    1624:	8c 93       	st	X, r24
    1626:	15 c0       	rjmp	.+42     	; 0x1652 <DIO_u8SetPinDirection+0x242>
							break;
						case DIO_u8_OUTPUT:
							SET_BIT(DDRD_u8_REG,Copy_u8PinId);
    1628:	a1 e3       	ldi	r26, 0x31	; 49
    162a:	b0 e0       	ldi	r27, 0x00	; 0
    162c:	e1 e3       	ldi	r30, 0x31	; 49
    162e:	f0 e0       	ldi	r31, 0x00	; 0
    1630:	80 81       	ld	r24, Z
    1632:	48 2f       	mov	r20, r24
    1634:	8b 81       	ldd	r24, Y+3	; 0x03
    1636:	28 2f       	mov	r18, r24
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	81 e0       	ldi	r24, 0x01	; 1
    163c:	90 e0       	ldi	r25, 0x00	; 0
    163e:	02 2e       	mov	r0, r18
    1640:	02 c0       	rjmp	.+4      	; 0x1646 <DIO_u8SetPinDirection+0x236>
    1642:	88 0f       	add	r24, r24
    1644:	99 1f       	adc	r25, r25
    1646:	0a 94       	dec	r0
    1648:	e2 f7       	brpl	.-8      	; 0x1642 <DIO_u8SetPinDirection+0x232>
    164a:	84 2b       	or	r24, r20
    164c:	8c 93       	st	X, r24
    164e:	01 c0       	rjmp	.+2      	; 0x1652 <DIO_u8SetPinDirection+0x242>
						break;
		}
	}
	else
	{
		Local_u8ErrorStatus = STD_TYPES_NOK;
    1650:	19 82       	std	Y+1, r1	; 0x01
	}
	return Local_u8ErrorStatus;
    1652:	89 81       	ldd	r24, Y+1	; 0x01
}
    1654:	2e 96       	adiw	r28, 0x0e	; 14
    1656:	0f b6       	in	r0, 0x3f	; 63
    1658:	f8 94       	cli
    165a:	de bf       	out	0x3e, r29	; 62
    165c:	0f be       	out	0x3f, r0	; 63
    165e:	cd bf       	out	0x3d, r28	; 61
    1660:	cf 91       	pop	r28
    1662:	df 91       	pop	r29
    1664:	08 95       	ret

00001666 <DIO_u8SetPinValue>:

	u8 DIO_u8SetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 Copy_u8PinValue    )
	{
    1666:	df 93       	push	r29
    1668:	cf 93       	push	r28
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	2e 97       	sbiw	r28, 0x0e	; 14
    1670:	0f b6       	in	r0, 0x3f	; 63
    1672:	f8 94       	cli
    1674:	de bf       	out	0x3e, r29	; 62
    1676:	0f be       	out	0x3f, r0	; 63
    1678:	cd bf       	out	0x3d, r28	; 61
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	6b 83       	std	Y+3, r22	; 0x03
    167e:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1680:	81 e0       	ldi	r24, 0x01	; 1
    1682:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && ((Copy_u8PinValue == DIO_u8_LOW) || (Copy_u8PinValue == DIO_u8_HIGH)))
    1684:	8a 81       	ldd	r24, Y+2	; 0x02
    1686:	84 30       	cpi	r24, 0x04	; 4
    1688:	08 f0       	brcs	.+2      	; 0x168c <DIO_u8SetPinValue+0x26>
    168a:	0d c1       	rjmp	.+538    	; 0x18a6 <DIO_u8SetPinValue+0x240>
    168c:	8b 81       	ldd	r24, Y+3	; 0x03
    168e:	88 30       	cpi	r24, 0x08	; 8
    1690:	08 f0       	brcs	.+2      	; 0x1694 <DIO_u8SetPinValue+0x2e>
    1692:	09 c1       	rjmp	.+530    	; 0x18a6 <DIO_u8SetPinValue+0x240>
    1694:	8c 81       	ldd	r24, Y+4	; 0x04
    1696:	88 23       	and	r24, r24
    1698:	21 f0       	breq	.+8      	; 0x16a2 <DIO_u8SetPinValue+0x3c>
    169a:	8c 81       	ldd	r24, Y+4	; 0x04
    169c:	81 30       	cpi	r24, 0x01	; 1
    169e:	09 f0       	breq	.+2      	; 0x16a2 <DIO_u8SetPinValue+0x3c>
    16a0:	02 c1       	rjmp	.+516    	; 0x18a6 <DIO_u8SetPinValue+0x240>
		{
			switch(Copy_u8PortId)
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	28 2f       	mov	r18, r24
    16a6:	30 e0       	ldi	r19, 0x00	; 0
    16a8:	3e 87       	std	Y+14, r19	; 0x0e
    16aa:	2d 87       	std	Y+13, r18	; 0x0d
    16ac:	8d 85       	ldd	r24, Y+13	; 0x0d
    16ae:	9e 85       	ldd	r25, Y+14	; 0x0e
    16b0:	81 30       	cpi	r24, 0x01	; 1
    16b2:	91 05       	cpc	r25, r1
    16b4:	09 f4       	brne	.+2      	; 0x16b8 <DIO_u8SetPinValue+0x52>
    16b6:	4f c0       	rjmp	.+158    	; 0x1756 <DIO_u8SetPinValue+0xf0>
    16b8:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ba:	3e 85       	ldd	r19, Y+14	; 0x0e
    16bc:	22 30       	cpi	r18, 0x02	; 2
    16be:	31 05       	cpc	r19, r1
    16c0:	2c f4       	brge	.+10     	; 0x16cc <DIO_u8SetPinValue+0x66>
    16c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    16c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    16c6:	00 97       	sbiw	r24, 0x00	; 0
    16c8:	71 f0       	breq	.+28     	; 0x16e6 <DIO_u8SetPinValue+0x80>
    16ca:	ee c0       	rjmp	.+476    	; 0x18a8 <DIO_u8SetPinValue+0x242>
    16cc:	2d 85       	ldd	r18, Y+13	; 0x0d
    16ce:	3e 85       	ldd	r19, Y+14	; 0x0e
    16d0:	22 30       	cpi	r18, 0x02	; 2
    16d2:	31 05       	cpc	r19, r1
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <DIO_u8SetPinValue+0x72>
    16d6:	77 c0       	rjmp	.+238    	; 0x17c6 <DIO_u8SetPinValue+0x160>
    16d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    16da:	9e 85       	ldd	r25, Y+14	; 0x0e
    16dc:	83 30       	cpi	r24, 0x03	; 3
    16de:	91 05       	cpc	r25, r1
    16e0:	09 f4       	brne	.+2      	; 0x16e4 <DIO_u8SetPinValue+0x7e>
    16e2:	a9 c0       	rjmp	.+338    	; 0x1836 <DIO_u8SetPinValue+0x1d0>
    16e4:	e1 c0       	rjmp	.+450    	; 0x18a8 <DIO_u8SetPinValue+0x242>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PinValue)
    16e6:	8c 81       	ldd	r24, Y+4	; 0x04
    16e8:	28 2f       	mov	r18, r24
    16ea:	30 e0       	ldi	r19, 0x00	; 0
    16ec:	3c 87       	std	Y+12, r19	; 0x0c
    16ee:	2b 87       	std	Y+11, r18	; 0x0b
    16f0:	8b 85       	ldd	r24, Y+11	; 0x0b
    16f2:	9c 85       	ldd	r25, Y+12	; 0x0c
    16f4:	00 97       	sbiw	r24, 0x00	; 0
    16f6:	31 f0       	breq	.+12     	; 0x1704 <DIO_u8SetPinValue+0x9e>
    16f8:	2b 85       	ldd	r18, Y+11	; 0x0b
    16fa:	3c 85       	ldd	r19, Y+12	; 0x0c
    16fc:	21 30       	cpi	r18, 0x01	; 1
    16fe:	31 05       	cpc	r19, r1
    1700:	b1 f0       	breq	.+44     	; 0x172e <DIO_u8SetPinValue+0xc8>
    1702:	d2 c0       	rjmp	.+420    	; 0x18a8 <DIO_u8SetPinValue+0x242>
				{
				case DIO_u8_LOW:
					CLR_BIT(PORTA_u8_REG,Copy_u8PinId);
    1704:	ab e3       	ldi	r26, 0x3B	; 59
    1706:	b0 e0       	ldi	r27, 0x00	; 0
    1708:	eb e3       	ldi	r30, 0x3B	; 59
    170a:	f0 e0       	ldi	r31, 0x00	; 0
    170c:	80 81       	ld	r24, Z
    170e:	48 2f       	mov	r20, r24
    1710:	8b 81       	ldd	r24, Y+3	; 0x03
    1712:	28 2f       	mov	r18, r24
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	81 e0       	ldi	r24, 0x01	; 1
    1718:	90 e0       	ldi	r25, 0x00	; 0
    171a:	02 2e       	mov	r0, r18
    171c:	02 c0       	rjmp	.+4      	; 0x1722 <DIO_u8SetPinValue+0xbc>
    171e:	88 0f       	add	r24, r24
    1720:	99 1f       	adc	r25, r25
    1722:	0a 94       	dec	r0
    1724:	e2 f7       	brpl	.-8      	; 0x171e <DIO_u8SetPinValue+0xb8>
    1726:	80 95       	com	r24
    1728:	84 23       	and	r24, r20
    172a:	8c 93       	st	X, r24
    172c:	bd c0       	rjmp	.+378    	; 0x18a8 <DIO_u8SetPinValue+0x242>
					break;
				case DIO_u8_HIGH:
					SET_BIT(PORTA_u8_REG,Copy_u8PinId);
    172e:	ab e3       	ldi	r26, 0x3B	; 59
    1730:	b0 e0       	ldi	r27, 0x00	; 0
    1732:	eb e3       	ldi	r30, 0x3B	; 59
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	48 2f       	mov	r20, r24
    173a:	8b 81       	ldd	r24, Y+3	; 0x03
    173c:	28 2f       	mov	r18, r24
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	81 e0       	ldi	r24, 0x01	; 1
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	02 2e       	mov	r0, r18
    1746:	02 c0       	rjmp	.+4      	; 0x174c <DIO_u8SetPinValue+0xe6>
    1748:	88 0f       	add	r24, r24
    174a:	99 1f       	adc	r25, r25
    174c:	0a 94       	dec	r0
    174e:	e2 f7       	brpl	.-8      	; 0x1748 <DIO_u8SetPinValue+0xe2>
    1750:	84 2b       	or	r24, r20
    1752:	8c 93       	st	X, r24
    1754:	a9 c0       	rjmp	.+338    	; 0x18a8 <DIO_u8SetPinValue+0x242>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PinValue)
    1756:	8c 81       	ldd	r24, Y+4	; 0x04
    1758:	28 2f       	mov	r18, r24
    175a:	30 e0       	ldi	r19, 0x00	; 0
    175c:	3a 87       	std	Y+10, r19	; 0x0a
    175e:	29 87       	std	Y+9, r18	; 0x09
    1760:	89 85       	ldd	r24, Y+9	; 0x09
    1762:	9a 85       	ldd	r25, Y+10	; 0x0a
    1764:	00 97       	sbiw	r24, 0x00	; 0
    1766:	31 f0       	breq	.+12     	; 0x1774 <DIO_u8SetPinValue+0x10e>
    1768:	29 85       	ldd	r18, Y+9	; 0x09
    176a:	3a 85       	ldd	r19, Y+10	; 0x0a
    176c:	21 30       	cpi	r18, 0x01	; 1
    176e:	31 05       	cpc	r19, r1
    1770:	b1 f0       	breq	.+44     	; 0x179e <DIO_u8SetPinValue+0x138>
    1772:	9a c0       	rjmp	.+308    	; 0x18a8 <DIO_u8SetPinValue+0x242>
					{
					case DIO_u8_LOW:
						CLR_BIT(PORTB_u8_REG,Copy_u8PinId);
    1774:	a8 e3       	ldi	r26, 0x38	; 56
    1776:	b0 e0       	ldi	r27, 0x00	; 0
    1778:	e8 e3       	ldi	r30, 0x38	; 56
    177a:	f0 e0       	ldi	r31, 0x00	; 0
    177c:	80 81       	ld	r24, Z
    177e:	48 2f       	mov	r20, r24
    1780:	8b 81       	ldd	r24, Y+3	; 0x03
    1782:	28 2f       	mov	r18, r24
    1784:	30 e0       	ldi	r19, 0x00	; 0
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	02 2e       	mov	r0, r18
    178c:	02 c0       	rjmp	.+4      	; 0x1792 <DIO_u8SetPinValue+0x12c>
    178e:	88 0f       	add	r24, r24
    1790:	99 1f       	adc	r25, r25
    1792:	0a 94       	dec	r0
    1794:	e2 f7       	brpl	.-8      	; 0x178e <DIO_u8SetPinValue+0x128>
    1796:	80 95       	com	r24
    1798:	84 23       	and	r24, r20
    179a:	8c 93       	st	X, r24
    179c:	85 c0       	rjmp	.+266    	; 0x18a8 <DIO_u8SetPinValue+0x242>
						break;
					case DIO_u8_HIGH:
						SET_BIT(PORTB_u8_REG,Copy_u8PinId);
    179e:	a8 e3       	ldi	r26, 0x38	; 56
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e8 e3       	ldi	r30, 0x38	; 56
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	48 2f       	mov	r20, r24
    17aa:	8b 81       	ldd	r24, Y+3	; 0x03
    17ac:	28 2f       	mov	r18, r24
    17ae:	30 e0       	ldi	r19, 0x00	; 0
    17b0:	81 e0       	ldi	r24, 0x01	; 1
    17b2:	90 e0       	ldi	r25, 0x00	; 0
    17b4:	02 2e       	mov	r0, r18
    17b6:	02 c0       	rjmp	.+4      	; 0x17bc <DIO_u8SetPinValue+0x156>
    17b8:	88 0f       	add	r24, r24
    17ba:	99 1f       	adc	r25, r25
    17bc:	0a 94       	dec	r0
    17be:	e2 f7       	brpl	.-8      	; 0x17b8 <DIO_u8SetPinValue+0x152>
    17c0:	84 2b       	or	r24, r20
    17c2:	8c 93       	st	X, r24
    17c4:	71 c0       	rjmp	.+226    	; 0x18a8 <DIO_u8SetPinValue+0x242>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PinValue)
    17c6:	8c 81       	ldd	r24, Y+4	; 0x04
    17c8:	28 2f       	mov	r18, r24
    17ca:	30 e0       	ldi	r19, 0x00	; 0
    17cc:	38 87       	std	Y+8, r19	; 0x08
    17ce:	2f 83       	std	Y+7, r18	; 0x07
    17d0:	8f 81       	ldd	r24, Y+7	; 0x07
    17d2:	98 85       	ldd	r25, Y+8	; 0x08
    17d4:	00 97       	sbiw	r24, 0x00	; 0
    17d6:	31 f0       	breq	.+12     	; 0x17e4 <DIO_u8SetPinValue+0x17e>
    17d8:	2f 81       	ldd	r18, Y+7	; 0x07
    17da:	38 85       	ldd	r19, Y+8	; 0x08
    17dc:	21 30       	cpi	r18, 0x01	; 1
    17de:	31 05       	cpc	r19, r1
    17e0:	b1 f0       	breq	.+44     	; 0x180e <DIO_u8SetPinValue+0x1a8>
    17e2:	62 c0       	rjmp	.+196    	; 0x18a8 <DIO_u8SetPinValue+0x242>
						{
						case DIO_u8_LOW:
							CLR_BIT(PORTC_u8_REG,Copy_u8PinId);
    17e4:	a5 e3       	ldi	r26, 0x35	; 53
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e5 e3       	ldi	r30, 0x35	; 53
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	48 2f       	mov	r20, r24
    17f0:	8b 81       	ldd	r24, Y+3	; 0x03
    17f2:	28 2f       	mov	r18, r24
    17f4:	30 e0       	ldi	r19, 0x00	; 0
    17f6:	81 e0       	ldi	r24, 0x01	; 1
    17f8:	90 e0       	ldi	r25, 0x00	; 0
    17fa:	02 2e       	mov	r0, r18
    17fc:	02 c0       	rjmp	.+4      	; 0x1802 <DIO_u8SetPinValue+0x19c>
    17fe:	88 0f       	add	r24, r24
    1800:	99 1f       	adc	r25, r25
    1802:	0a 94       	dec	r0
    1804:	e2 f7       	brpl	.-8      	; 0x17fe <DIO_u8SetPinValue+0x198>
    1806:	80 95       	com	r24
    1808:	84 23       	and	r24, r20
    180a:	8c 93       	st	X, r24
    180c:	4d c0       	rjmp	.+154    	; 0x18a8 <DIO_u8SetPinValue+0x242>
							break;
						case DIO_u8_HIGH:
							SET_BIT(PORTC_u8_REG,Copy_u8PinId);
    180e:	a5 e3       	ldi	r26, 0x35	; 53
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	e5 e3       	ldi	r30, 0x35	; 53
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	48 2f       	mov	r20, r24
    181a:	8b 81       	ldd	r24, Y+3	; 0x03
    181c:	28 2f       	mov	r18, r24
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	02 2e       	mov	r0, r18
    1826:	02 c0       	rjmp	.+4      	; 0x182c <DIO_u8SetPinValue+0x1c6>
    1828:	88 0f       	add	r24, r24
    182a:	99 1f       	adc	r25, r25
    182c:	0a 94       	dec	r0
    182e:	e2 f7       	brpl	.-8      	; 0x1828 <DIO_u8SetPinValue+0x1c2>
    1830:	84 2b       	or	r24, r20
    1832:	8c 93       	st	X, r24
    1834:	39 c0       	rjmp	.+114    	; 0x18a8 <DIO_u8SetPinValue+0x242>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PinValue)
    1836:	8c 81       	ldd	r24, Y+4	; 0x04
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	3e 83       	std	Y+6, r19	; 0x06
    183e:	2d 83       	std	Y+5, r18	; 0x05
    1840:	8d 81       	ldd	r24, Y+5	; 0x05
    1842:	9e 81       	ldd	r25, Y+6	; 0x06
    1844:	00 97       	sbiw	r24, 0x00	; 0
    1846:	31 f0       	breq	.+12     	; 0x1854 <DIO_u8SetPinValue+0x1ee>
    1848:	2d 81       	ldd	r18, Y+5	; 0x05
    184a:	3e 81       	ldd	r19, Y+6	; 0x06
    184c:	21 30       	cpi	r18, 0x01	; 1
    184e:	31 05       	cpc	r19, r1
    1850:	b1 f0       	breq	.+44     	; 0x187e <DIO_u8SetPinValue+0x218>
    1852:	2a c0       	rjmp	.+84     	; 0x18a8 <DIO_u8SetPinValue+0x242>
							{
							case DIO_u8_LOW:
								CLR_BIT(PORTD_u8_REG,Copy_u8PinId);
    1854:	a2 e3       	ldi	r26, 0x32	; 50
    1856:	b0 e0       	ldi	r27, 0x00	; 0
    1858:	e2 e3       	ldi	r30, 0x32	; 50
    185a:	f0 e0       	ldi	r31, 0x00	; 0
    185c:	80 81       	ld	r24, Z
    185e:	48 2f       	mov	r20, r24
    1860:	8b 81       	ldd	r24, Y+3	; 0x03
    1862:	28 2f       	mov	r18, r24
    1864:	30 e0       	ldi	r19, 0x00	; 0
    1866:	81 e0       	ldi	r24, 0x01	; 1
    1868:	90 e0       	ldi	r25, 0x00	; 0
    186a:	02 2e       	mov	r0, r18
    186c:	02 c0       	rjmp	.+4      	; 0x1872 <DIO_u8SetPinValue+0x20c>
    186e:	88 0f       	add	r24, r24
    1870:	99 1f       	adc	r25, r25
    1872:	0a 94       	dec	r0
    1874:	e2 f7       	brpl	.-8      	; 0x186e <DIO_u8SetPinValue+0x208>
    1876:	80 95       	com	r24
    1878:	84 23       	and	r24, r20
    187a:	8c 93       	st	X, r24
    187c:	15 c0       	rjmp	.+42     	; 0x18a8 <DIO_u8SetPinValue+0x242>
								break;
							case DIO_u8_HIGH:
								SET_BIT(PORTD_u8_REG,Copy_u8PinId);
    187e:	a2 e3       	ldi	r26, 0x32	; 50
    1880:	b0 e0       	ldi	r27, 0x00	; 0
    1882:	e2 e3       	ldi	r30, 0x32	; 50
    1884:	f0 e0       	ldi	r31, 0x00	; 0
    1886:	80 81       	ld	r24, Z
    1888:	48 2f       	mov	r20, r24
    188a:	8b 81       	ldd	r24, Y+3	; 0x03
    188c:	28 2f       	mov	r18, r24
    188e:	30 e0       	ldi	r19, 0x00	; 0
    1890:	81 e0       	ldi	r24, 0x01	; 1
    1892:	90 e0       	ldi	r25, 0x00	; 0
    1894:	02 2e       	mov	r0, r18
    1896:	02 c0       	rjmp	.+4      	; 0x189c <DIO_u8SetPinValue+0x236>
    1898:	88 0f       	add	r24, r24
    189a:	99 1f       	adc	r25, r25
    189c:	0a 94       	dec	r0
    189e:	e2 f7       	brpl	.-8      	; 0x1898 <DIO_u8SetPinValue+0x232>
    18a0:	84 2b       	or	r24, r20
    18a2:	8c 93       	st	X, r24
    18a4:	01 c0       	rjmp	.+2      	; 0x18a8 <DIO_u8SetPinValue+0x242>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    18a6:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    18a8:	89 81       	ldd	r24, Y+1	; 0x01

	}
    18aa:	2e 96       	adiw	r28, 0x0e	; 14
    18ac:	0f b6       	in	r0, 0x3f	; 63
    18ae:	f8 94       	cli
    18b0:	de bf       	out	0x3e, r29	; 62
    18b2:	0f be       	out	0x3f, r0	; 63
    18b4:	cd bf       	out	0x3d, r28	; 61
    18b6:	cf 91       	pop	r28
    18b8:	df 91       	pop	r29
    18ba:	08 95       	ret

000018bc <DIO_u8GetPinValue>:

	u8 DIO_u8GetPinValue		(u8 Copy_u8PortId , u8 Copy_u8PinId , u8 *Copy_pu8ReturnedPinValue)
	{
    18bc:	df 93       	push	r29
    18be:	cf 93       	push	r28
    18c0:	cd b7       	in	r28, 0x3d	; 61
    18c2:	de b7       	in	r29, 0x3e	; 62
    18c4:	27 97       	sbiw	r28, 0x07	; 7
    18c6:	0f b6       	in	r0, 0x3f	; 63
    18c8:	f8 94       	cli
    18ca:	de bf       	out	0x3e, r29	; 62
    18cc:	0f be       	out	0x3f, r0	; 63
    18ce:	cd bf       	out	0x3d, r28	; 61
    18d0:	8a 83       	std	Y+2, r24	; 0x02
    18d2:	6b 83       	std	Y+3, r22	; 0x03
    18d4:	5d 83       	std	Y+5, r21	; 0x05
    18d6:	4c 83       	std	Y+4, r20	; 0x04
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    18d8:	81 e0       	ldi	r24, 0x01	; 1
    18da:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && (Copy_u8PinId<= DIO_u8_PIN7) && (Copy_pu8ReturnedPinValue != NULL))
    18dc:	8a 81       	ldd	r24, Y+2	; 0x02
    18de:	84 30       	cpi	r24, 0x04	; 4
    18e0:	08 f0       	brcs	.+2      	; 0x18e4 <DIO_u8GetPinValue+0x28>
    18e2:	9b c0       	rjmp	.+310    	; 0x1a1a <DIO_u8GetPinValue+0x15e>
    18e4:	8b 81       	ldd	r24, Y+3	; 0x03
    18e6:	88 30       	cpi	r24, 0x08	; 8
    18e8:	08 f0       	brcs	.+2      	; 0x18ec <DIO_u8GetPinValue+0x30>
    18ea:	97 c0       	rjmp	.+302    	; 0x1a1a <DIO_u8GetPinValue+0x15e>
    18ec:	8c 81       	ldd	r24, Y+4	; 0x04
    18ee:	9d 81       	ldd	r25, Y+5	; 0x05
    18f0:	00 97       	sbiw	r24, 0x00	; 0
    18f2:	09 f4       	brne	.+2      	; 0x18f6 <DIO_u8GetPinValue+0x3a>
    18f4:	92 c0       	rjmp	.+292    	; 0x1a1a <DIO_u8GetPinValue+0x15e>
		{
			switch(Copy_u8PortId)
    18f6:	8a 81       	ldd	r24, Y+2	; 0x02
    18f8:	28 2f       	mov	r18, r24
    18fa:	30 e0       	ldi	r19, 0x00	; 0
    18fc:	3f 83       	std	Y+7, r19	; 0x07
    18fe:	2e 83       	std	Y+6, r18	; 0x06
    1900:	4e 81       	ldd	r20, Y+6	; 0x06
    1902:	5f 81       	ldd	r21, Y+7	; 0x07
    1904:	41 30       	cpi	r20, 0x01	; 1
    1906:	51 05       	cpc	r21, r1
    1908:	a1 f1       	breq	.+104    	; 0x1972 <DIO_u8GetPinValue+0xb6>
    190a:	8e 81       	ldd	r24, Y+6	; 0x06
    190c:	9f 81       	ldd	r25, Y+7	; 0x07
    190e:	82 30       	cpi	r24, 0x02	; 2
    1910:	91 05       	cpc	r25, r1
    1912:	34 f4       	brge	.+12     	; 0x1920 <DIO_u8GetPinValue+0x64>
    1914:	2e 81       	ldd	r18, Y+6	; 0x06
    1916:	3f 81       	ldd	r19, Y+7	; 0x07
    1918:	21 15       	cp	r18, r1
    191a:	31 05       	cpc	r19, r1
    191c:	71 f0       	breq	.+28     	; 0x193a <DIO_u8GetPinValue+0x7e>
    191e:	7e c0       	rjmp	.+252    	; 0x1a1c <DIO_u8GetPinValue+0x160>
    1920:	4e 81       	ldd	r20, Y+6	; 0x06
    1922:	5f 81       	ldd	r21, Y+7	; 0x07
    1924:	42 30       	cpi	r20, 0x02	; 2
    1926:	51 05       	cpc	r21, r1
    1928:	09 f4       	brne	.+2      	; 0x192c <DIO_u8GetPinValue+0x70>
    192a:	3f c0       	rjmp	.+126    	; 0x19aa <DIO_u8GetPinValue+0xee>
    192c:	8e 81       	ldd	r24, Y+6	; 0x06
    192e:	9f 81       	ldd	r25, Y+7	; 0x07
    1930:	83 30       	cpi	r24, 0x03	; 3
    1932:	91 05       	cpc	r25, r1
    1934:	09 f4       	brne	.+2      	; 0x1938 <DIO_u8GetPinValue+0x7c>
    1936:	55 c0       	rjmp	.+170    	; 0x19e2 <DIO_u8GetPinValue+0x126>
    1938:	71 c0       	rjmp	.+226    	; 0x1a1c <DIO_u8GetPinValue+0x160>
			{
			case DIO_u8_PORTA:
				if(GET_BIT(PINA_u8_REG,Copy_u8PinId) == 0)
    193a:	e9 e3       	ldi	r30, 0x39	; 57
    193c:	f0 e0       	ldi	r31, 0x00	; 0
    193e:	80 81       	ld	r24, Z
    1940:	28 2f       	mov	r18, r24
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	8b 81       	ldd	r24, Y+3	; 0x03
    1946:	88 2f       	mov	r24, r24
    1948:	90 e0       	ldi	r25, 0x00	; 0
    194a:	a9 01       	movw	r20, r18
    194c:	02 c0       	rjmp	.+4      	; 0x1952 <DIO_u8GetPinValue+0x96>
    194e:	55 95       	asr	r21
    1950:	47 95       	ror	r20
    1952:	8a 95       	dec	r24
    1954:	e2 f7       	brpl	.-8      	; 0x194e <DIO_u8GetPinValue+0x92>
    1956:	ca 01       	movw	r24, r20
    1958:	81 70       	andi	r24, 0x01	; 1
    195a:	90 70       	andi	r25, 0x00	; 0
    195c:	00 97       	sbiw	r24, 0x00	; 0
    195e:	21 f4       	brne	.+8      	; 0x1968 <DIO_u8GetPinValue+0xac>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1960:	ec 81       	ldd	r30, Y+4	; 0x04
    1962:	fd 81       	ldd	r31, Y+5	; 0x05
    1964:	10 82       	st	Z, r1
    1966:	5a c0       	rjmp	.+180    	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1968:	ec 81       	ldd	r30, Y+4	; 0x04
    196a:	fd 81       	ldd	r31, Y+5	; 0x05
    196c:	81 e0       	ldi	r24, 0x01	; 1
    196e:	80 83       	st	Z, r24
    1970:	55 c0       	rjmp	.+170    	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTB:
				if(GET_BIT(PINB_u8_REG,Copy_u8PinId) == 0)
    1972:	e6 e3       	ldi	r30, 0x36	; 54
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	80 81       	ld	r24, Z
    1978:	28 2f       	mov	r18, r24
    197a:	30 e0       	ldi	r19, 0x00	; 0
    197c:	8b 81       	ldd	r24, Y+3	; 0x03
    197e:	88 2f       	mov	r24, r24
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a9 01       	movw	r20, r18
    1984:	02 c0       	rjmp	.+4      	; 0x198a <DIO_u8GetPinValue+0xce>
    1986:	55 95       	asr	r21
    1988:	47 95       	ror	r20
    198a:	8a 95       	dec	r24
    198c:	e2 f7       	brpl	.-8      	; 0x1986 <DIO_u8GetPinValue+0xca>
    198e:	ca 01       	movw	r24, r20
    1990:	81 70       	andi	r24, 0x01	; 1
    1992:	90 70       	andi	r25, 0x00	; 0
    1994:	00 97       	sbiw	r24, 0x00	; 0
    1996:	21 f4       	brne	.+8      	; 0x19a0 <DIO_u8GetPinValue+0xe4>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1998:	ec 81       	ldd	r30, Y+4	; 0x04
    199a:	fd 81       	ldd	r31, Y+5	; 0x05
    199c:	10 82       	st	Z, r1
    199e:	3e c0       	rjmp	.+124    	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    19a0:	ec 81       	ldd	r30, Y+4	; 0x04
    19a2:	fd 81       	ldd	r31, Y+5	; 0x05
    19a4:	81 e0       	ldi	r24, 0x01	; 1
    19a6:	80 83       	st	Z, r24
    19a8:	39 c0       	rjmp	.+114    	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTC:
				if(GET_BIT(PINC_u8_REG,Copy_u8PinId) == 0)
    19aa:	e3 e3       	ldi	r30, 0x33	; 51
    19ac:	f0 e0       	ldi	r31, 0x00	; 0
    19ae:	80 81       	ld	r24, Z
    19b0:	28 2f       	mov	r18, r24
    19b2:	30 e0       	ldi	r19, 0x00	; 0
    19b4:	8b 81       	ldd	r24, Y+3	; 0x03
    19b6:	88 2f       	mov	r24, r24
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	a9 01       	movw	r20, r18
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <DIO_u8GetPinValue+0x106>
    19be:	55 95       	asr	r21
    19c0:	47 95       	ror	r20
    19c2:	8a 95       	dec	r24
    19c4:	e2 f7       	brpl	.-8      	; 0x19be <DIO_u8GetPinValue+0x102>
    19c6:	ca 01       	movw	r24, r20
    19c8:	81 70       	andi	r24, 0x01	; 1
    19ca:	90 70       	andi	r25, 0x00	; 0
    19cc:	00 97       	sbiw	r24, 0x00	; 0
    19ce:	21 f4       	brne	.+8      	; 0x19d8 <DIO_u8GetPinValue+0x11c>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    19d0:	ec 81       	ldd	r30, Y+4	; 0x04
    19d2:	fd 81       	ldd	r31, Y+5	; 0x05
    19d4:	10 82       	st	Z, r1
    19d6:	22 c0       	rjmp	.+68     	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    19d8:	ec 81       	ldd	r30, Y+4	; 0x04
    19da:	fd 81       	ldd	r31, Y+5	; 0x05
    19dc:	81 e0       	ldi	r24, 0x01	; 1
    19de:	80 83       	st	Z, r24
    19e0:	1d c0       	rjmp	.+58     	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				break;
			case DIO_u8_PORTD:
				if(GET_BIT(PIND_u8_REG,Copy_u8PinId) == 0)
    19e2:	e0 e3       	ldi	r30, 0x30	; 48
    19e4:	f0 e0       	ldi	r31, 0x00	; 0
    19e6:	80 81       	ld	r24, Z
    19e8:	28 2f       	mov	r18, r24
    19ea:	30 e0       	ldi	r19, 0x00	; 0
    19ec:	8b 81       	ldd	r24, Y+3	; 0x03
    19ee:	88 2f       	mov	r24, r24
    19f0:	90 e0       	ldi	r25, 0x00	; 0
    19f2:	a9 01       	movw	r20, r18
    19f4:	02 c0       	rjmp	.+4      	; 0x19fa <DIO_u8GetPinValue+0x13e>
    19f6:	55 95       	asr	r21
    19f8:	47 95       	ror	r20
    19fa:	8a 95       	dec	r24
    19fc:	e2 f7       	brpl	.-8      	; 0x19f6 <DIO_u8GetPinValue+0x13a>
    19fe:	ca 01       	movw	r24, r20
    1a00:	81 70       	andi	r24, 0x01	; 1
    1a02:	90 70       	andi	r25, 0x00	; 0
    1a04:	00 97       	sbiw	r24, 0x00	; 0
    1a06:	21 f4       	brne	.+8      	; 0x1a10 <DIO_u8GetPinValue+0x154>
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_LOW;
    1a08:	ec 81       	ldd	r30, Y+4	; 0x04
    1a0a:	fd 81       	ldd	r31, Y+5	; 0x05
    1a0c:	10 82       	st	Z, r1
    1a0e:	06 c0       	rjmp	.+12     	; 0x1a1c <DIO_u8GetPinValue+0x160>
				}
				else 
				{
					*Copy_pu8ReturnedPinValue = DIO_u8_HIGH;
    1a10:	ec 81       	ldd	r30, Y+4	; 0x04
    1a12:	fd 81       	ldd	r31, Y+5	; 0x05
    1a14:	81 e0       	ldi	r24, 0x01	; 1
    1a16:	80 83       	st	Z, r24
    1a18:	01 c0       	rjmp	.+2      	; 0x1a1c <DIO_u8GetPinValue+0x160>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1a1a:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    1a1c:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1a1e:	27 96       	adiw	r28, 0x07	; 7
    1a20:	0f b6       	in	r0, 0x3f	; 63
    1a22:	f8 94       	cli
    1a24:	de bf       	out	0x3e, r29	; 62
    1a26:	0f be       	out	0x3f, r0	; 63
    1a28:	cd bf       	out	0x3d, r28	; 61
    1a2a:	cf 91       	pop	r28
    1a2c:	df 91       	pop	r29
    1a2e:	08 95       	ret

00001a30 <DIO_u8SetPortDirection>:

	u8 DIO_u8SetPortDirection	(u8 Copy_u8PortId , u8 Copy_u8PortDirection)
	{
    1a30:	df 93       	push	r29
    1a32:	cf 93       	push	r28
    1a34:	cd b7       	in	r28, 0x3d	; 61
    1a36:	de b7       	in	r29, 0x3e	; 62
    1a38:	2d 97       	sbiw	r28, 0x0d	; 13
    1a3a:	0f b6       	in	r0, 0x3f	; 63
    1a3c:	f8 94       	cli
    1a3e:	de bf       	out	0x3e, r29	; 62
    1a40:	0f be       	out	0x3f, r0	; 63
    1a42:	cd bf       	out	0x3d, r28	; 61
    1a44:	8a 83       	std	Y+2, r24	; 0x02
    1a46:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1a48:	81 e0       	ldi	r24, 0x01	; 1
    1a4a:	89 83       	std	Y+1, r24	; 0x01
		if((Copy_u8PortId <= DIO_u8_PORTD) && ((Copy_u8PortDirection == DIO_u8_INPUT) || (Copy_u8PortDirection == DIO_u8_OUTPUT)))
    1a4c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a4e:	84 30       	cpi	r24, 0x04	; 4
    1a50:	08 f0       	brcs	.+2      	; 0x1a54 <DIO_u8SetPortDirection+0x24>
    1a52:	87 c0       	rjmp	.+270    	; 0x1b62 <DIO_u8SetPortDirection+0x132>
    1a54:	8b 81       	ldd	r24, Y+3	; 0x03
    1a56:	88 23       	and	r24, r24
    1a58:	21 f0       	breq	.+8      	; 0x1a62 <DIO_u8SetPortDirection+0x32>
    1a5a:	8b 81       	ldd	r24, Y+3	; 0x03
    1a5c:	81 30       	cpi	r24, 0x01	; 1
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <DIO_u8SetPortDirection+0x32>
    1a60:	80 c0       	rjmp	.+256    	; 0x1b62 <DIO_u8SetPortDirection+0x132>
		{
			switch(Copy_u8PortId)
    1a62:	8a 81       	ldd	r24, Y+2	; 0x02
    1a64:	28 2f       	mov	r18, r24
    1a66:	30 e0       	ldi	r19, 0x00	; 0
    1a68:	3d 87       	std	Y+13, r19	; 0x0d
    1a6a:	2c 87       	std	Y+12, r18	; 0x0c
    1a6c:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a6e:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a70:	81 30       	cpi	r24, 0x01	; 1
    1a72:	91 05       	cpc	r25, r1
    1a74:	71 f1       	breq	.+92     	; 0x1ad2 <DIO_u8SetPortDirection+0xa2>
    1a76:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a78:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a7a:	22 30       	cpi	r18, 0x02	; 2
    1a7c:	31 05       	cpc	r19, r1
    1a7e:	2c f4       	brge	.+10     	; 0x1a8a <DIO_u8SetPortDirection+0x5a>
    1a80:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a82:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a84:	00 97       	sbiw	r24, 0x00	; 0
    1a86:	69 f0       	breq	.+26     	; 0x1aa2 <DIO_u8SetPortDirection+0x72>
    1a88:	6d c0       	rjmp	.+218    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
    1a8a:	2c 85       	ldd	r18, Y+12	; 0x0c
    1a8c:	3d 85       	ldd	r19, Y+13	; 0x0d
    1a8e:	22 30       	cpi	r18, 0x02	; 2
    1a90:	31 05       	cpc	r19, r1
    1a92:	b9 f1       	breq	.+110    	; 0x1b02 <DIO_u8SetPortDirection+0xd2>
    1a94:	8c 85       	ldd	r24, Y+12	; 0x0c
    1a96:	9d 85       	ldd	r25, Y+13	; 0x0d
    1a98:	83 30       	cpi	r24, 0x03	; 3
    1a9a:	91 05       	cpc	r25, r1
    1a9c:	09 f4       	brne	.+2      	; 0x1aa0 <DIO_u8SetPortDirection+0x70>
    1a9e:	49 c0       	rjmp	.+146    	; 0x1b32 <DIO_u8SetPortDirection+0x102>
    1aa0:	61 c0       	rjmp	.+194    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
			{
			case DIO_u8_PORTA:
				switch(Copy_u8PortDirection)
    1aa2:	8b 81       	ldd	r24, Y+3	; 0x03
    1aa4:	28 2f       	mov	r18, r24
    1aa6:	30 e0       	ldi	r19, 0x00	; 0
    1aa8:	3b 87       	std	Y+11, r19	; 0x0b
    1aaa:	2a 87       	std	Y+10, r18	; 0x0a
    1aac:	8a 85       	ldd	r24, Y+10	; 0x0a
    1aae:	9b 85       	ldd	r25, Y+11	; 0x0b
    1ab0:	00 97       	sbiw	r24, 0x00	; 0
    1ab2:	31 f0       	breq	.+12     	; 0x1ac0 <DIO_u8SetPortDirection+0x90>
    1ab4:	2a 85       	ldd	r18, Y+10	; 0x0a
    1ab6:	3b 85       	ldd	r19, Y+11	; 0x0b
    1ab8:	21 30       	cpi	r18, 0x01	; 1
    1aba:	31 05       	cpc	r19, r1
    1abc:	29 f0       	breq	.+10     	; 0x1ac8 <DIO_u8SetPortDirection+0x98>
    1abe:	52 c0       	rjmp	.+164    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
				{
				case DIO_u8_INPUT:
					DDRA_u8_REG = 0x00;
    1ac0:	ea e3       	ldi	r30, 0x3A	; 58
    1ac2:	f0 e0       	ldi	r31, 0x00	; 0
    1ac4:	10 82       	st	Z, r1
    1ac6:	4e c0       	rjmp	.+156    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
					break;
				case DIO_u8_OUTPUT:
					DDRA_u8_REG = 0xFF;
    1ac8:	ea e3       	ldi	r30, 0x3A	; 58
    1aca:	f0 e0       	ldi	r31, 0x00	; 0
    1acc:	8f ef       	ldi	r24, 0xFF	; 255
    1ace:	80 83       	st	Z, r24
    1ad0:	49 c0       	rjmp	.+146    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
					break;
				}
				break;
				case DIO_u8_PORTB:
					switch(Copy_u8PortDirection)
    1ad2:	8b 81       	ldd	r24, Y+3	; 0x03
    1ad4:	28 2f       	mov	r18, r24
    1ad6:	30 e0       	ldi	r19, 0x00	; 0
    1ad8:	39 87       	std	Y+9, r19	; 0x09
    1ada:	28 87       	std	Y+8, r18	; 0x08
    1adc:	88 85       	ldd	r24, Y+8	; 0x08
    1ade:	99 85       	ldd	r25, Y+9	; 0x09
    1ae0:	00 97       	sbiw	r24, 0x00	; 0
    1ae2:	31 f0       	breq	.+12     	; 0x1af0 <DIO_u8SetPortDirection+0xc0>
    1ae4:	28 85       	ldd	r18, Y+8	; 0x08
    1ae6:	39 85       	ldd	r19, Y+9	; 0x09
    1ae8:	21 30       	cpi	r18, 0x01	; 1
    1aea:	31 05       	cpc	r19, r1
    1aec:	29 f0       	breq	.+10     	; 0x1af8 <DIO_u8SetPortDirection+0xc8>
    1aee:	3a c0       	rjmp	.+116    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
					{
					case DIO_u8_INPUT:
						DDRB_u8_REG = 0x00;
    1af0:	e7 e3       	ldi	r30, 0x37	; 55
    1af2:	f0 e0       	ldi	r31, 0x00	; 0
    1af4:	10 82       	st	Z, r1
    1af6:	36 c0       	rjmp	.+108    	; 0x1b64 <DIO_u8SetPortDirection+0x134>
						break;
					case DIO_u8_OUTPUT:
						DDRB_u8_REG = 0xFF;
    1af8:	e7 e3       	ldi	r30, 0x37	; 55
    1afa:	f0 e0       	ldi	r31, 0x00	; 0
    1afc:	8f ef       	ldi	r24, 0xFF	; 255
    1afe:	80 83       	st	Z, r24
    1b00:	31 c0       	rjmp	.+98     	; 0x1b64 <DIO_u8SetPortDirection+0x134>
						break;
					}
					break;
					case DIO_u8_PORTC:
						switch(Copy_u8PortDirection)
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	28 2f       	mov	r18, r24
    1b06:	30 e0       	ldi	r19, 0x00	; 0
    1b08:	3f 83       	std	Y+7, r19	; 0x07
    1b0a:	2e 83       	std	Y+6, r18	; 0x06
    1b0c:	8e 81       	ldd	r24, Y+6	; 0x06
    1b0e:	9f 81       	ldd	r25, Y+7	; 0x07
    1b10:	00 97       	sbiw	r24, 0x00	; 0
    1b12:	31 f0       	breq	.+12     	; 0x1b20 <DIO_u8SetPortDirection+0xf0>
    1b14:	2e 81       	ldd	r18, Y+6	; 0x06
    1b16:	3f 81       	ldd	r19, Y+7	; 0x07
    1b18:	21 30       	cpi	r18, 0x01	; 1
    1b1a:	31 05       	cpc	r19, r1
    1b1c:	29 f0       	breq	.+10     	; 0x1b28 <DIO_u8SetPortDirection+0xf8>
    1b1e:	22 c0       	rjmp	.+68     	; 0x1b64 <DIO_u8SetPortDirection+0x134>
						{
						case DIO_u8_INPUT:
							DDRC_u8_REG = 0x00;
    1b20:	e4 e3       	ldi	r30, 0x34	; 52
    1b22:	f0 e0       	ldi	r31, 0x00	; 0
    1b24:	10 82       	st	Z, r1
    1b26:	1e c0       	rjmp	.+60     	; 0x1b64 <DIO_u8SetPortDirection+0x134>
							break;
						case DIO_u8_OUTPUT:
							DDRC_u8_REG = 0xFF;
    1b28:	e4 e3       	ldi	r30, 0x34	; 52
    1b2a:	f0 e0       	ldi	r31, 0x00	; 0
    1b2c:	8f ef       	ldi	r24, 0xFF	; 255
    1b2e:	80 83       	st	Z, r24
    1b30:	19 c0       	rjmp	.+50     	; 0x1b64 <DIO_u8SetPortDirection+0x134>
							break;
						}
						break;
						case DIO_u8_PORTD:
							switch(Copy_u8PortDirection)
    1b32:	8b 81       	ldd	r24, Y+3	; 0x03
    1b34:	28 2f       	mov	r18, r24
    1b36:	30 e0       	ldi	r19, 0x00	; 0
    1b38:	3d 83       	std	Y+5, r19	; 0x05
    1b3a:	2c 83       	std	Y+4, r18	; 0x04
    1b3c:	8c 81       	ldd	r24, Y+4	; 0x04
    1b3e:	9d 81       	ldd	r25, Y+5	; 0x05
    1b40:	00 97       	sbiw	r24, 0x00	; 0
    1b42:	31 f0       	breq	.+12     	; 0x1b50 <DIO_u8SetPortDirection+0x120>
    1b44:	2c 81       	ldd	r18, Y+4	; 0x04
    1b46:	3d 81       	ldd	r19, Y+5	; 0x05
    1b48:	21 30       	cpi	r18, 0x01	; 1
    1b4a:	31 05       	cpc	r19, r1
    1b4c:	29 f0       	breq	.+10     	; 0x1b58 <DIO_u8SetPortDirection+0x128>
    1b4e:	0a c0       	rjmp	.+20     	; 0x1b64 <DIO_u8SetPortDirection+0x134>
							{
							case DIO_u8_INPUT:
								DDRD_u8_REG = 0x00;
    1b50:	e1 e3       	ldi	r30, 0x31	; 49
    1b52:	f0 e0       	ldi	r31, 0x00	; 0
    1b54:	10 82       	st	Z, r1
    1b56:	06 c0       	rjmp	.+12     	; 0x1b64 <DIO_u8SetPortDirection+0x134>
								break;
							case DIO_u8_OUTPUT:
								DDRD_u8_REG = 0xFF;
    1b58:	e1 e3       	ldi	r30, 0x31	; 49
    1b5a:	f0 e0       	ldi	r31, 0x00	; 0
    1b5c:	8f ef       	ldi	r24, 0xFF	; 255
    1b5e:	80 83       	st	Z, r24
    1b60:	01 c0       	rjmp	.+2      	; 0x1b64 <DIO_u8SetPortDirection+0x134>

			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1b62:	19 82       	std	Y+1, r1	; 0x01
		}
		return Local_u8ErrorStatus;
    1b64:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1b66:	2d 96       	adiw	r28, 0x0d	; 13
    1b68:	0f b6       	in	r0, 0x3f	; 63
    1b6a:	f8 94       	cli
    1b6c:	de bf       	out	0x3e, r29	; 62
    1b6e:	0f be       	out	0x3f, r0	; 63
    1b70:	cd bf       	out	0x3d, r28	; 61
    1b72:	cf 91       	pop	r28
    1b74:	df 91       	pop	r29
    1b76:	08 95       	ret

00001b78 <DIO_u8SetPortValue>:

	u8 DIO_u8SetPortValue		(u8 Copy_u8PortId , u8 Copy_u8PortValue     ) 
	{
    1b78:	df 93       	push	r29
    1b7a:	cf 93       	push	r28
    1b7c:	00 d0       	rcall	.+0      	; 0x1b7e <DIO_u8SetPortValue+0x6>
    1b7e:	00 d0       	rcall	.+0      	; 0x1b80 <DIO_u8SetPortValue+0x8>
    1b80:	0f 92       	push	r0
    1b82:	cd b7       	in	r28, 0x3d	; 61
    1b84:	de b7       	in	r29, 0x3e	; 62
    1b86:	8a 83       	std	Y+2, r24	; 0x02
    1b88:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1b8a:	81 e0       	ldi	r24, 0x01	; 1
    1b8c:	89 83       	std	Y+1, r24	; 0x01

		switch(Copy_u8PortId)
    1b8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b90:	28 2f       	mov	r18, r24
    1b92:	30 e0       	ldi	r19, 0x00	; 0
    1b94:	3d 83       	std	Y+5, r19	; 0x05
    1b96:	2c 83       	std	Y+4, r18	; 0x04
    1b98:	8c 81       	ldd	r24, Y+4	; 0x04
    1b9a:	9d 81       	ldd	r25, Y+5	; 0x05
    1b9c:	81 30       	cpi	r24, 0x01	; 1
    1b9e:	91 05       	cpc	r25, r1
    1ba0:	d1 f0       	breq	.+52     	; 0x1bd6 <DIO_u8SetPortValue+0x5e>
    1ba2:	2c 81       	ldd	r18, Y+4	; 0x04
    1ba4:	3d 81       	ldd	r19, Y+5	; 0x05
    1ba6:	22 30       	cpi	r18, 0x02	; 2
    1ba8:	31 05       	cpc	r19, r1
    1baa:	2c f4       	brge	.+10     	; 0x1bb6 <DIO_u8SetPortValue+0x3e>
    1bac:	8c 81       	ldd	r24, Y+4	; 0x04
    1bae:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb0:	00 97       	sbiw	r24, 0x00	; 0
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <DIO_u8SetPortValue+0x54>
    1bb4:	1f c0       	rjmp	.+62     	; 0x1bf4 <DIO_u8SetPortValue+0x7c>
    1bb6:	2c 81       	ldd	r18, Y+4	; 0x04
    1bb8:	3d 81       	ldd	r19, Y+5	; 0x05
    1bba:	22 30       	cpi	r18, 0x02	; 2
    1bbc:	31 05       	cpc	r19, r1
    1bbe:	81 f0       	breq	.+32     	; 0x1be0 <DIO_u8SetPortValue+0x68>
    1bc0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bc2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bc4:	83 30       	cpi	r24, 0x03	; 3
    1bc6:	91 05       	cpc	r25, r1
    1bc8:	81 f0       	breq	.+32     	; 0x1bea <DIO_u8SetPortValue+0x72>
    1bca:	14 c0       	rjmp	.+40     	; 0x1bf4 <DIO_u8SetPortValue+0x7c>
		{
		case DIO_u8_PORTA:
			PORTA_u8_REG = Copy_u8PortValue;
    1bcc:	eb e3       	ldi	r30, 0x3B	; 59
    1bce:	f0 e0       	ldi	r31, 0x00	; 0
    1bd0:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd2:	80 83       	st	Z, r24
    1bd4:	10 c0       	rjmp	.+32     	; 0x1bf6 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTB:
			PORTB_u8_REG = Copy_u8PortValue;
    1bd6:	e8 e3       	ldi	r30, 0x38	; 56
    1bd8:	f0 e0       	ldi	r31, 0x00	; 0
    1bda:	8b 81       	ldd	r24, Y+3	; 0x03
    1bdc:	80 83       	st	Z, r24
    1bde:	0b c0       	rjmp	.+22     	; 0x1bf6 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTC:
			PORTC_u8_REG = Copy_u8PortValue;
    1be0:	e5 e3       	ldi	r30, 0x35	; 53
    1be2:	f0 e0       	ldi	r31, 0x00	; 0
    1be4:	8b 81       	ldd	r24, Y+3	; 0x03
    1be6:	80 83       	st	Z, r24
    1be8:	06 c0       	rjmp	.+12     	; 0x1bf6 <DIO_u8SetPortValue+0x7e>
			break;
		case DIO_u8_PORTD:
			PORTD_u8_REG = Copy_u8PortValue;
    1bea:	e2 e3       	ldi	r30, 0x32	; 50
    1bec:	f0 e0       	ldi	r31, 0x00	; 0
    1bee:	8b 81       	ldd	r24, Y+3	; 0x03
    1bf0:	80 83       	st	Z, r24
    1bf2:	01 c0       	rjmp	.+2      	; 0x1bf6 <DIO_u8SetPortValue+0x7e>
			break;

		default:
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1bf4:	19 82       	std	Y+1, r1	; 0x01
			break;
		}
		return Local_u8ErrorStatus;
    1bf6:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1bf8:	0f 90       	pop	r0
    1bfa:	0f 90       	pop	r0
    1bfc:	0f 90       	pop	r0
    1bfe:	0f 90       	pop	r0
    1c00:	0f 90       	pop	r0
    1c02:	cf 91       	pop	r28
    1c04:	df 91       	pop	r29
    1c06:	08 95       	ret

00001c08 <DIO_u8GetPortValue>:

	u8 DIO_u8GetPortValue		(u8 Copy_u8PortId , u8 *Copy_pu8ReturnedPortValue)
	{
    1c08:	df 93       	push	r29
    1c0a:	cf 93       	push	r28
    1c0c:	00 d0       	rcall	.+0      	; 0x1c0e <DIO_u8GetPortValue+0x6>
    1c0e:	00 d0       	rcall	.+0      	; 0x1c10 <DIO_u8GetPortValue+0x8>
    1c10:	00 d0       	rcall	.+0      	; 0x1c12 <DIO_u8GetPortValue+0xa>
    1c12:	cd b7       	in	r28, 0x3d	; 61
    1c14:	de b7       	in	r29, 0x3e	; 62
    1c16:	8a 83       	std	Y+2, r24	; 0x02
    1c18:	7c 83       	std	Y+4, r23	; 0x04
    1c1a:	6b 83       	std	Y+3, r22	; 0x03
		u8 Local_u8ErrorStatus = STD_TYPES_OK;
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	89 83       	std	Y+1, r24	; 0x01

		if(Copy_pu8ReturnedPortValue != NULL)
    1c20:	8b 81       	ldd	r24, Y+3	; 0x03
    1c22:	9c 81       	ldd	r25, Y+4	; 0x04
    1c24:	00 97       	sbiw	r24, 0x00	; 0
    1c26:	e9 f1       	breq	.+122    	; 0x1ca2 <DIO_u8GetPortValue+0x9a>
		{
			switch(Copy_u8PortId)
    1c28:	8a 81       	ldd	r24, Y+2	; 0x02
    1c2a:	28 2f       	mov	r18, r24
    1c2c:	30 e0       	ldi	r19, 0x00	; 0
    1c2e:	3e 83       	std	Y+6, r19	; 0x06
    1c30:	2d 83       	std	Y+5, r18	; 0x05
    1c32:	8d 81       	ldd	r24, Y+5	; 0x05
    1c34:	9e 81       	ldd	r25, Y+6	; 0x06
    1c36:	81 30       	cpi	r24, 0x01	; 1
    1c38:	91 05       	cpc	r25, r1
    1c3a:	e1 f0       	breq	.+56     	; 0x1c74 <DIO_u8GetPortValue+0x6c>
    1c3c:	2d 81       	ldd	r18, Y+5	; 0x05
    1c3e:	3e 81       	ldd	r19, Y+6	; 0x06
    1c40:	22 30       	cpi	r18, 0x02	; 2
    1c42:	31 05       	cpc	r19, r1
    1c44:	2c f4       	brge	.+10     	; 0x1c50 <DIO_u8GetPortValue+0x48>
    1c46:	8d 81       	ldd	r24, Y+5	; 0x05
    1c48:	9e 81       	ldd	r25, Y+6	; 0x06
    1c4a:	00 97       	sbiw	r24, 0x00	; 0
    1c4c:	61 f0       	breq	.+24     	; 0x1c66 <DIO_u8GetPortValue+0x5e>
    1c4e:	27 c0       	rjmp	.+78     	; 0x1c9e <DIO_u8GetPortValue+0x96>
    1c50:	2d 81       	ldd	r18, Y+5	; 0x05
    1c52:	3e 81       	ldd	r19, Y+6	; 0x06
    1c54:	22 30       	cpi	r18, 0x02	; 2
    1c56:	31 05       	cpc	r19, r1
    1c58:	a1 f0       	breq	.+40     	; 0x1c82 <DIO_u8GetPortValue+0x7a>
    1c5a:	8d 81       	ldd	r24, Y+5	; 0x05
    1c5c:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5e:	83 30       	cpi	r24, 0x03	; 3
    1c60:	91 05       	cpc	r25, r1
    1c62:	b1 f0       	breq	.+44     	; 0x1c90 <DIO_u8GetPortValue+0x88>
    1c64:	1c c0       	rjmp	.+56     	; 0x1c9e <DIO_u8GetPortValue+0x96>
			{
			case DIO_u8_PORTA:
				*Copy_pu8ReturnedPortValue = PINA_u8_REG;
    1c66:	e9 e3       	ldi	r30, 0x39	; 57
    1c68:	f0 e0       	ldi	r31, 0x00	; 0
    1c6a:	80 81       	ld	r24, Z
    1c6c:	eb 81       	ldd	r30, Y+3	; 0x03
    1c6e:	fc 81       	ldd	r31, Y+4	; 0x04
    1c70:	80 83       	st	Z, r24
    1c72:	18 c0       	rjmp	.+48     	; 0x1ca4 <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTB:
				*Copy_pu8ReturnedPortValue = PINB_u8_REG;
    1c74:	e6 e3       	ldi	r30, 0x36	; 54
    1c76:	f0 e0       	ldi	r31, 0x00	; 0
    1c78:	80 81       	ld	r24, Z
    1c7a:	eb 81       	ldd	r30, Y+3	; 0x03
    1c7c:	fc 81       	ldd	r31, Y+4	; 0x04
    1c7e:	80 83       	st	Z, r24
    1c80:	11 c0       	rjmp	.+34     	; 0x1ca4 <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTC:
				*Copy_pu8ReturnedPortValue = PINC_u8_REG;
    1c82:	e3 e3       	ldi	r30, 0x33	; 51
    1c84:	f0 e0       	ldi	r31, 0x00	; 0
    1c86:	80 81       	ld	r24, Z
    1c88:	eb 81       	ldd	r30, Y+3	; 0x03
    1c8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1c8c:	80 83       	st	Z, r24
    1c8e:	0a c0       	rjmp	.+20     	; 0x1ca4 <DIO_u8GetPortValue+0x9c>
				break;
			case DIO_u8_PORTD:
				*Copy_pu8ReturnedPortValue = PIND_u8_REG;
    1c90:	e0 e3       	ldi	r30, 0x30	; 48
    1c92:	f0 e0       	ldi	r31, 0x00	; 0
    1c94:	80 81       	ld	r24, Z
    1c96:	eb 81       	ldd	r30, Y+3	; 0x03
    1c98:	fc 81       	ldd	r31, Y+4	; 0x04
    1c9a:	80 83       	st	Z, r24
    1c9c:	03 c0       	rjmp	.+6      	; 0x1ca4 <DIO_u8GetPortValue+0x9c>
				break;

			default:
				Local_u8ErrorStatus = STD_TYPES_NOK;
    1c9e:	19 82       	std	Y+1, r1	; 0x01
    1ca0:	01 c0       	rjmp	.+2      	; 0x1ca4 <DIO_u8GetPortValue+0x9c>
				break;
			}
		}
		else
		{
			Local_u8ErrorStatus = STD_TYPES_NOK;
    1ca2:	19 82       	std	Y+1, r1	; 0x01
		}

		return Local_u8ErrorStatus ;
    1ca4:	89 81       	ldd	r24, Y+1	; 0x01
	}
    1ca6:	26 96       	adiw	r28, 0x06	; 6
    1ca8:	0f b6       	in	r0, 0x3f	; 63
    1caa:	f8 94       	cli
    1cac:	de bf       	out	0x3e, r29	; 62
    1cae:	0f be       	out	0x3f, r0	; 63
    1cb0:	cd bf       	out	0x3d, r28	; 61
    1cb2:	cf 91       	pop	r28
    1cb4:	df 91       	pop	r29
    1cb6:	08 95       	ret

00001cb8 <LCD_voidInit>:
#include "LCD_interface.h"
#include "LCD_config.h"
#include "LCD_private.h"

void LCD_voidInit(void)
{
    1cb8:	0f 93       	push	r16
    1cba:	1f 93       	push	r17
    1cbc:	df 93       	push	r29
    1cbe:	cf 93       	push	r28
    1cc0:	cd b7       	in	r28, 0x3d	; 61
    1cc2:	de b7       	in	r29, 0x3e	; 62
    1cc4:	cc 54       	subi	r28, 0x4C	; 76
    1cc6:	d0 40       	sbci	r29, 0x00	; 0
    1cc8:	0f b6       	in	r0, 0x3f	; 63
    1cca:	f8 94       	cli
    1ccc:	de bf       	out	0x3e, r29	; 62
    1cce:	0f be       	out	0x3f, r0	; 63
    1cd0:	cd bf       	out	0x3d, r28	; 61
    1cd2:	fe 01       	movw	r30, r28
    1cd4:	e7 5b       	subi	r30, 0xB7	; 183
    1cd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	90 e0       	ldi	r25, 0x00	; 0
    1cdc:	ac e0       	ldi	r26, 0x0C	; 12
    1cde:	b2 e4       	ldi	r27, 0x42	; 66
    1ce0:	80 83       	st	Z, r24
    1ce2:	91 83       	std	Z+1, r25	; 0x01
    1ce4:	a2 83       	std	Z+2, r26	; 0x02
    1ce6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce8:	8e 01       	movw	r16, r28
    1cea:	0b 5b       	subi	r16, 0xBB	; 187
    1cec:	1f 4f       	sbci	r17, 0xFF	; 255
    1cee:	fe 01       	movw	r30, r28
    1cf0:	e7 5b       	subi	r30, 0xB7	; 183
    1cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf4:	60 81       	ld	r22, Z
    1cf6:	71 81       	ldd	r23, Z+1	; 0x01
    1cf8:	82 81       	ldd	r24, Z+2	; 0x02
    1cfa:	93 81       	ldd	r25, Z+3	; 0x03
    1cfc:	20 e0       	ldi	r18, 0x00	; 0
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	4a ef       	ldi	r20, 0xFA	; 250
    1d02:	54 e4       	ldi	r21, 0x44	; 68
    1d04:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d08:	dc 01       	movw	r26, r24
    1d0a:	cb 01       	movw	r24, r22
    1d0c:	f8 01       	movw	r30, r16
    1d0e:	80 83       	st	Z, r24
    1d10:	91 83       	std	Z+1, r25	; 0x01
    1d12:	a2 83       	std	Z+2, r26	; 0x02
    1d14:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d16:	fe 01       	movw	r30, r28
    1d18:	eb 5b       	subi	r30, 0xBB	; 187
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	40 e8       	ldi	r20, 0x80	; 128
    1d2a:	5f e3       	ldi	r21, 0x3F	; 63
    1d2c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1d30:	88 23       	and	r24, r24
    1d32:	44 f4       	brge	.+16     	; 0x1d44 <LCD_voidInit+0x8c>
		__ticks = 1;
    1d34:	fe 01       	movw	r30, r28
    1d36:	ed 5b       	subi	r30, 0xBD	; 189
    1d38:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3a:	81 e0       	ldi	r24, 0x01	; 1
    1d3c:	90 e0       	ldi	r25, 0x00	; 0
    1d3e:	91 83       	std	Z+1, r25	; 0x01
    1d40:	80 83       	st	Z, r24
    1d42:	64 c0       	rjmp	.+200    	; 0x1e0c <LCD_voidInit+0x154>
	else if (__tmp > 65535)
    1d44:	fe 01       	movw	r30, r28
    1d46:	eb 5b       	subi	r30, 0xBB	; 187
    1d48:	ff 4f       	sbci	r31, 0xFF	; 255
    1d4a:	60 81       	ld	r22, Z
    1d4c:	71 81       	ldd	r23, Z+1	; 0x01
    1d4e:	82 81       	ldd	r24, Z+2	; 0x02
    1d50:	93 81       	ldd	r25, Z+3	; 0x03
    1d52:	20 e0       	ldi	r18, 0x00	; 0
    1d54:	3f ef       	ldi	r19, 0xFF	; 255
    1d56:	4f e7       	ldi	r20, 0x7F	; 127
    1d58:	57 e4       	ldi	r21, 0x47	; 71
    1d5a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1d5e:	18 16       	cp	r1, r24
    1d60:	0c f0       	brlt	.+2      	; 0x1d64 <LCD_voidInit+0xac>
    1d62:	43 c0       	rjmp	.+134    	; 0x1dea <LCD_voidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d64:	fe 01       	movw	r30, r28
    1d66:	e7 5b       	subi	r30, 0xB7	; 183
    1d68:	ff 4f       	sbci	r31, 0xFF	; 255
    1d6a:	60 81       	ld	r22, Z
    1d6c:	71 81       	ldd	r23, Z+1	; 0x01
    1d6e:	82 81       	ldd	r24, Z+2	; 0x02
    1d70:	93 81       	ldd	r25, Z+3	; 0x03
    1d72:	20 e0       	ldi	r18, 0x00	; 0
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	40 e2       	ldi	r20, 0x20	; 32
    1d78:	51 e4       	ldi	r21, 0x41	; 65
    1d7a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1d7e:	dc 01       	movw	r26, r24
    1d80:	cb 01       	movw	r24, r22
    1d82:	8e 01       	movw	r16, r28
    1d84:	0d 5b       	subi	r16, 0xBD	; 189
    1d86:	1f 4f       	sbci	r17, 0xFF	; 255
    1d88:	bc 01       	movw	r22, r24
    1d8a:	cd 01       	movw	r24, r26
    1d8c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1d90:	dc 01       	movw	r26, r24
    1d92:	cb 01       	movw	r24, r22
    1d94:	f8 01       	movw	r30, r16
    1d96:	91 83       	std	Z+1, r25	; 0x01
    1d98:	80 83       	st	Z, r24
    1d9a:	1f c0       	rjmp	.+62     	; 0x1dda <LCD_voidInit+0x122>
    1d9c:	fe 01       	movw	r30, r28
    1d9e:	ef 5b       	subi	r30, 0xBF	; 191
    1da0:	ff 4f       	sbci	r31, 0xFF	; 255
    1da2:	88 ec       	ldi	r24, 0xC8	; 200
    1da4:	90 e0       	ldi	r25, 0x00	; 0
    1da6:	91 83       	std	Z+1, r25	; 0x01
    1da8:	80 83       	st	Z, r24
    1daa:	fe 01       	movw	r30, r28
    1dac:	ef 5b       	subi	r30, 0xBF	; 191
    1dae:	ff 4f       	sbci	r31, 0xFF	; 255
    1db0:	80 81       	ld	r24, Z
    1db2:	91 81       	ldd	r25, Z+1	; 0x01
    1db4:	01 97       	sbiw	r24, 0x01	; 1
    1db6:	f1 f7       	brne	.-4      	; 0x1db4 <LCD_voidInit+0xfc>
    1db8:	fe 01       	movw	r30, r28
    1dba:	ef 5b       	subi	r30, 0xBF	; 191
    1dbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbe:	91 83       	std	Z+1, r25	; 0x01
    1dc0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc2:	de 01       	movw	r26, r28
    1dc4:	ad 5b       	subi	r26, 0xBD	; 189
    1dc6:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc8:	fe 01       	movw	r30, r28
    1dca:	ed 5b       	subi	r30, 0xBD	; 189
    1dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dce:	80 81       	ld	r24, Z
    1dd0:	91 81       	ldd	r25, Z+1	; 0x01
    1dd2:	01 97       	sbiw	r24, 0x01	; 1
    1dd4:	11 96       	adiw	r26, 0x01	; 1
    1dd6:	9c 93       	st	X, r25
    1dd8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dda:	fe 01       	movw	r30, r28
    1ddc:	ed 5b       	subi	r30, 0xBD	; 189
    1dde:	ff 4f       	sbci	r31, 0xFF	; 255
    1de0:	80 81       	ld	r24, Z
    1de2:	91 81       	ldd	r25, Z+1	; 0x01
    1de4:	00 97       	sbiw	r24, 0x00	; 0
    1de6:	d1 f6       	brne	.-76     	; 0x1d9c <LCD_voidInit+0xe4>
    1de8:	24 c0       	rjmp	.+72     	; 0x1e32 <LCD_voidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1dea:	8e 01       	movw	r16, r28
    1dec:	0d 5b       	subi	r16, 0xBD	; 189
    1dee:	1f 4f       	sbci	r17, 0xFF	; 255
    1df0:	fe 01       	movw	r30, r28
    1df2:	eb 5b       	subi	r30, 0xBB	; 187
    1df4:	ff 4f       	sbci	r31, 0xFF	; 255
    1df6:	60 81       	ld	r22, Z
    1df8:	71 81       	ldd	r23, Z+1	; 0x01
    1dfa:	82 81       	ldd	r24, Z+2	; 0x02
    1dfc:	93 81       	ldd	r25, Z+3	; 0x03
    1dfe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1e02:	dc 01       	movw	r26, r24
    1e04:	cb 01       	movw	r24, r22
    1e06:	f8 01       	movw	r30, r16
    1e08:	91 83       	std	Z+1, r25	; 0x01
    1e0a:	80 83       	st	Z, r24
    1e0c:	fe 01       	movw	r30, r28
    1e0e:	ed 5b       	subi	r30, 0xBD	; 189
    1e10:	ff 4f       	sbci	r31, 0xFF	; 255
    1e12:	80 81       	ld	r24, Z
    1e14:	91 81       	ldd	r25, Z+1	; 0x01
    1e16:	fe 01       	movw	r30, r28
    1e18:	ff 96       	adiw	r30, 0x3f	; 63
    1e1a:	91 83       	std	Z+1, r25	; 0x01
    1e1c:	80 83       	st	Z, r24
    1e1e:	fe 01       	movw	r30, r28
    1e20:	ff 96       	adiw	r30, 0x3f	; 63
    1e22:	80 81       	ld	r24, Z
    1e24:	91 81       	ldd	r25, Z+1	; 0x01
    1e26:	01 97       	sbiw	r24, 0x01	; 1
    1e28:	f1 f7       	brne	.-4      	; 0x1e26 <LCD_voidInit+0x16e>
    1e2a:	fe 01       	movw	r30, r28
    1e2c:	ff 96       	adiw	r30, 0x3f	; 63
    1e2e:	91 83       	std	Z+1, r25	; 0x01
    1e30:	80 83       	st	Z, r24
	_delay_ms(35);
	LCD_voidSendCmd(0b00111000);//functionset
    1e32:	88 e3       	ldi	r24, 0x38	; 56
    1e34:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
    1e38:	80 e0       	ldi	r24, 0x00	; 0
    1e3a:	90 e0       	ldi	r25, 0x00	; 0
    1e3c:	a0 e2       	ldi	r26, 0x20	; 32
    1e3e:	b2 e4       	ldi	r27, 0x42	; 66
    1e40:	8b af       	std	Y+59, r24	; 0x3b
    1e42:	9c af       	std	Y+60, r25	; 0x3c
    1e44:	ad af       	std	Y+61, r26	; 0x3d
    1e46:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e48:	6b ad       	ldd	r22, Y+59	; 0x3b
    1e4a:	7c ad       	ldd	r23, Y+60	; 0x3c
    1e4c:	8d ad       	ldd	r24, Y+61	; 0x3d
    1e4e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1e50:	2b ea       	ldi	r18, 0xAB	; 171
    1e52:	3a ea       	ldi	r19, 0xAA	; 170
    1e54:	4a e2       	ldi	r20, 0x2A	; 42
    1e56:	50 e4       	ldi	r21, 0x40	; 64
    1e58:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1e5c:	dc 01       	movw	r26, r24
    1e5e:	cb 01       	movw	r24, r22
    1e60:	8f ab       	std	Y+55, r24	; 0x37
    1e62:	98 af       	std	Y+56, r25	; 0x38
    1e64:	a9 af       	std	Y+57, r26	; 0x39
    1e66:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    1e68:	6f a9       	ldd	r22, Y+55	; 0x37
    1e6a:	78 ad       	ldd	r23, Y+56	; 0x38
    1e6c:	89 ad       	ldd	r24, Y+57	; 0x39
    1e6e:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e70:	20 e0       	ldi	r18, 0x00	; 0
    1e72:	30 e0       	ldi	r19, 0x00	; 0
    1e74:	40 e8       	ldi	r20, 0x80	; 128
    1e76:	5f e3       	ldi	r21, 0x3F	; 63
    1e78:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1e7c:	88 23       	and	r24, r24
    1e7e:	1c f4       	brge	.+6      	; 0x1e86 <LCD_voidInit+0x1ce>
		__ticks = 1;
    1e80:	81 e0       	ldi	r24, 0x01	; 1
    1e82:	8e ab       	std	Y+54, r24	; 0x36
    1e84:	91 c0       	rjmp	.+290    	; 0x1fa8 <LCD_voidInit+0x2f0>
	else if (__tmp > 255)
    1e86:	6f a9       	ldd	r22, Y+55	; 0x37
    1e88:	78 ad       	ldd	r23, Y+56	; 0x38
    1e8a:	89 ad       	ldd	r24, Y+57	; 0x39
    1e8c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4f e7       	ldi	r20, 0x7F	; 127
    1e94:	53 e4       	ldi	r21, 0x43	; 67
    1e96:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1e9a:	18 16       	cp	r1, r24
    1e9c:	0c f0       	brlt	.+2      	; 0x1ea0 <LCD_voidInit+0x1e8>
    1e9e:	7b c0       	rjmp	.+246    	; 0x1f96 <LCD_voidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    1ea0:	6b ad       	ldd	r22, Y+59	; 0x3b
    1ea2:	7c ad       	ldd	r23, Y+60	; 0x3c
    1ea4:	8d ad       	ldd	r24, Y+61	; 0x3d
    1ea6:	9e ad       	ldd	r25, Y+62	; 0x3e
    1ea8:	20 e0       	ldi	r18, 0x00	; 0
    1eaa:	30 e0       	ldi	r19, 0x00	; 0
    1eac:	4a e7       	ldi	r20, 0x7A	; 122
    1eae:	54 e4       	ldi	r21, 0x44	; 68
    1eb0:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	cb 01       	movw	r24, r22
    1eb8:	8a ab       	std	Y+50, r24	; 0x32
    1eba:	9b ab       	std	Y+51, r25	; 0x33
    1ebc:	ac ab       	std	Y+52, r26	; 0x34
    1ebe:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ec0:	6a a9       	ldd	r22, Y+50	; 0x32
    1ec2:	7b a9       	ldd	r23, Y+51	; 0x33
    1ec4:	8c a9       	ldd	r24, Y+52	; 0x34
    1ec6:	9d a9       	ldd	r25, Y+53	; 0x35
    1ec8:	20 e0       	ldi	r18, 0x00	; 0
    1eca:	30 e0       	ldi	r19, 0x00	; 0
    1ecc:	4a ef       	ldi	r20, 0xFA	; 250
    1ece:	54 e4       	ldi	r21, 0x44	; 68
    1ed0:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1ed4:	dc 01       	movw	r26, r24
    1ed6:	cb 01       	movw	r24, r22
    1ed8:	8e a7       	std	Y+46, r24	; 0x2e
    1eda:	9f a7       	std	Y+47, r25	; 0x2f
    1edc:	a8 ab       	std	Y+48, r26	; 0x30
    1ede:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    1ee0:	6e a5       	ldd	r22, Y+46	; 0x2e
    1ee2:	7f a5       	ldd	r23, Y+47	; 0x2f
    1ee4:	88 a9       	ldd	r24, Y+48	; 0x30
    1ee6:	99 a9       	ldd	r25, Y+49	; 0x31
    1ee8:	20 e0       	ldi	r18, 0x00	; 0
    1eea:	30 e0       	ldi	r19, 0x00	; 0
    1eec:	40 e8       	ldi	r20, 0x80	; 128
    1eee:	5f e3       	ldi	r21, 0x3F	; 63
    1ef0:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ef4:	88 23       	and	r24, r24
    1ef6:	2c f4       	brge	.+10     	; 0x1f02 <LCD_voidInit+0x24a>
		__ticks = 1;
    1ef8:	81 e0       	ldi	r24, 0x01	; 1
    1efa:	90 e0       	ldi	r25, 0x00	; 0
    1efc:	9d a7       	std	Y+45, r25	; 0x2d
    1efe:	8c a7       	std	Y+44, r24	; 0x2c
    1f00:	3f c0       	rjmp	.+126    	; 0x1f80 <LCD_voidInit+0x2c8>
	else if (__tmp > 65535)
    1f02:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f04:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f06:	88 a9       	ldd	r24, Y+48	; 0x30
    1f08:	99 a9       	ldd	r25, Y+49	; 0x31
    1f0a:	20 e0       	ldi	r18, 0x00	; 0
    1f0c:	3f ef       	ldi	r19, 0xFF	; 255
    1f0e:	4f e7       	ldi	r20, 0x7F	; 127
    1f10:	57 e4       	ldi	r21, 0x47	; 71
    1f12:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    1f16:	18 16       	cp	r1, r24
    1f18:	4c f5       	brge	.+82     	; 0x1f6c <LCD_voidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f1a:	6a a9       	ldd	r22, Y+50	; 0x32
    1f1c:	7b a9       	ldd	r23, Y+51	; 0x33
    1f1e:	8c a9       	ldd	r24, Y+52	; 0x34
    1f20:	9d a9       	ldd	r25, Y+53	; 0x35
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	bc 01       	movw	r22, r24
    1f34:	cd 01       	movw	r24, r26
    1f36:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f3a:	dc 01       	movw	r26, r24
    1f3c:	cb 01       	movw	r24, r22
    1f3e:	9d a7       	std	Y+45, r25	; 0x2d
    1f40:	8c a7       	std	Y+44, r24	; 0x2c
    1f42:	0f c0       	rjmp	.+30     	; 0x1f62 <LCD_voidInit+0x2aa>
    1f44:	88 ec       	ldi	r24, 0xC8	; 200
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	9b a7       	std	Y+43, r25	; 0x2b
    1f4a:	8a a7       	std	Y+42, r24	; 0x2a
    1f4c:	8a a5       	ldd	r24, Y+42	; 0x2a
    1f4e:	9b a5       	ldd	r25, Y+43	; 0x2b
    1f50:	01 97       	sbiw	r24, 0x01	; 1
    1f52:	f1 f7       	brne	.-4      	; 0x1f50 <LCD_voidInit+0x298>
    1f54:	9b a7       	std	Y+43, r25	; 0x2b
    1f56:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f58:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f5a:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f5c:	01 97       	sbiw	r24, 0x01	; 1
    1f5e:	9d a7       	std	Y+45, r25	; 0x2d
    1f60:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f62:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f64:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f66:	00 97       	sbiw	r24, 0x00	; 0
    1f68:	69 f7       	brne	.-38     	; 0x1f44 <LCD_voidInit+0x28c>
    1f6a:	24 c0       	rjmp	.+72     	; 0x1fb4 <LCD_voidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f6c:	6e a5       	ldd	r22, Y+46	; 0x2e
    1f6e:	7f a5       	ldd	r23, Y+47	; 0x2f
    1f70:	88 a9       	ldd	r24, Y+48	; 0x30
    1f72:	99 a9       	ldd	r25, Y+49	; 0x31
    1f74:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1f78:	dc 01       	movw	r26, r24
    1f7a:	cb 01       	movw	r24, r22
    1f7c:	9d a7       	std	Y+45, r25	; 0x2d
    1f7e:	8c a7       	std	Y+44, r24	; 0x2c
    1f80:	8c a5       	ldd	r24, Y+44	; 0x2c
    1f82:	9d a5       	ldd	r25, Y+45	; 0x2d
    1f84:	99 a7       	std	Y+41, r25	; 0x29
    1f86:	88 a7       	std	Y+40, r24	; 0x28
    1f88:	88 a5       	ldd	r24, Y+40	; 0x28
    1f8a:	99 a5       	ldd	r25, Y+41	; 0x29
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	f1 f7       	brne	.-4      	; 0x1f8c <LCD_voidInit+0x2d4>
    1f90:	99 a7       	std	Y+41, r25	; 0x29
    1f92:	88 a7       	std	Y+40, r24	; 0x28
    1f94:	0f c0       	rjmp	.+30     	; 0x1fb4 <LCD_voidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1f96:	6f a9       	ldd	r22, Y+55	; 0x37
    1f98:	78 ad       	ldd	r23, Y+56	; 0x38
    1f9a:	89 ad       	ldd	r24, Y+57	; 0x39
    1f9c:	9a ad       	ldd	r25, Y+58	; 0x3a
    1f9e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    1fa2:	dc 01       	movw	r26, r24
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	8e ab       	std	Y+54, r24	; 0x36
    1fa8:	8e a9       	ldd	r24, Y+54	; 0x36
    1faa:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fac:	8f a1       	ldd	r24, Y+39	; 0x27
    1fae:	8a 95       	dec	r24
    1fb0:	f1 f7       	brne	.-4      	; 0x1fae <LCD_voidInit+0x2f6>
    1fb2:	8f a3       	std	Y+39, r24	; 0x27
	_delay_us(40);
	LCD_voidSendCmd(0b00001100);//display
    1fb4:	8c e0       	ldi	r24, 0x0C	; 12
    1fb6:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
    1fba:	80 e0       	ldi	r24, 0x00	; 0
    1fbc:	90 e0       	ldi	r25, 0x00	; 0
    1fbe:	a0 e2       	ldi	r26, 0x20	; 32
    1fc0:	b2 e4       	ldi	r27, 0x42	; 66
    1fc2:	8b a3       	std	Y+35, r24	; 0x23
    1fc4:	9c a3       	std	Y+36, r25	; 0x24
    1fc6:	ad a3       	std	Y+37, r26	; 0x25
    1fc8:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1fca:	6b a1       	ldd	r22, Y+35	; 0x23
    1fcc:	7c a1       	ldd	r23, Y+36	; 0x24
    1fce:	8d a1       	ldd	r24, Y+37	; 0x25
    1fd0:	9e a1       	ldd	r25, Y+38	; 0x26
    1fd2:	2b ea       	ldi	r18, 0xAB	; 171
    1fd4:	3a ea       	ldi	r19, 0xAA	; 170
    1fd6:	4a e2       	ldi	r20, 0x2A	; 42
    1fd8:	50 e4       	ldi	r21, 0x40	; 64
    1fda:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    1fde:	dc 01       	movw	r26, r24
    1fe0:	cb 01       	movw	r24, r22
    1fe2:	8f 8f       	std	Y+31, r24	; 0x1f
    1fe4:	98 a3       	std	Y+32, r25	; 0x20
    1fe6:	a9 a3       	std	Y+33, r26	; 0x21
    1fe8:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    1fea:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1fec:	78 a1       	ldd	r23, Y+32	; 0x20
    1fee:	89 a1       	ldd	r24, Y+33	; 0x21
    1ff0:	9a a1       	ldd	r25, Y+34	; 0x22
    1ff2:	20 e0       	ldi	r18, 0x00	; 0
    1ff4:	30 e0       	ldi	r19, 0x00	; 0
    1ff6:	40 e8       	ldi	r20, 0x80	; 128
    1ff8:	5f e3       	ldi	r21, 0x3F	; 63
    1ffa:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    1ffe:	88 23       	and	r24, r24
    2000:	1c f4       	brge	.+6      	; 0x2008 <LCD_voidInit+0x350>
		__ticks = 1;
    2002:	81 e0       	ldi	r24, 0x01	; 1
    2004:	8e 8f       	std	Y+30, r24	; 0x1e
    2006:	91 c0       	rjmp	.+290    	; 0x212a <LCD_voidInit+0x472>
	else if (__tmp > 255)
    2008:	6f 8d       	ldd	r22, Y+31	; 0x1f
    200a:	78 a1       	ldd	r23, Y+32	; 0x20
    200c:	89 a1       	ldd	r24, Y+33	; 0x21
    200e:	9a a1       	ldd	r25, Y+34	; 0x22
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4f e7       	ldi	r20, 0x7F	; 127
    2016:	53 e4       	ldi	r21, 0x43	; 67
    2018:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    201c:	18 16       	cp	r1, r24
    201e:	0c f0       	brlt	.+2      	; 0x2022 <LCD_voidInit+0x36a>
    2020:	7b c0       	rjmp	.+246    	; 0x2118 <LCD_voidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2022:	6b a1       	ldd	r22, Y+35	; 0x23
    2024:	7c a1       	ldd	r23, Y+36	; 0x24
    2026:	8d a1       	ldd	r24, Y+37	; 0x25
    2028:	9e a1       	ldd	r25, Y+38	; 0x26
    202a:	20 e0       	ldi	r18, 0x00	; 0
    202c:	30 e0       	ldi	r19, 0x00	; 0
    202e:	4a e7       	ldi	r20, 0x7A	; 122
    2030:	54 e4       	ldi	r21, 0x44	; 68
    2032:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2036:	dc 01       	movw	r26, r24
    2038:	cb 01       	movw	r24, r22
    203a:	8a 8f       	std	Y+26, r24	; 0x1a
    203c:	9b 8f       	std	Y+27, r25	; 0x1b
    203e:	ac 8f       	std	Y+28, r26	; 0x1c
    2040:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2042:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2044:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2046:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2048:	9d 8d       	ldd	r25, Y+29	; 0x1d
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	4a ef       	ldi	r20, 0xFA	; 250
    2050:	54 e4       	ldi	r21, 0x44	; 68
    2052:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	8e 8b       	std	Y+22, r24	; 0x16
    205c:	9f 8b       	std	Y+23, r25	; 0x17
    205e:	a8 8f       	std	Y+24, r26	; 0x18
    2060:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2062:	6e 89       	ldd	r22, Y+22	; 0x16
    2064:	7f 89       	ldd	r23, Y+23	; 0x17
    2066:	88 8d       	ldd	r24, Y+24	; 0x18
    2068:	99 8d       	ldd	r25, Y+25	; 0x19
    206a:	20 e0       	ldi	r18, 0x00	; 0
    206c:	30 e0       	ldi	r19, 0x00	; 0
    206e:	40 e8       	ldi	r20, 0x80	; 128
    2070:	5f e3       	ldi	r21, 0x3F	; 63
    2072:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2076:	88 23       	and	r24, r24
    2078:	2c f4       	brge	.+10     	; 0x2084 <LCD_voidInit+0x3cc>
		__ticks = 1;
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	90 e0       	ldi	r25, 0x00	; 0
    207e:	9d 8b       	std	Y+21, r25	; 0x15
    2080:	8c 8b       	std	Y+20, r24	; 0x14
    2082:	3f c0       	rjmp	.+126    	; 0x2102 <LCD_voidInit+0x44a>
	else if (__tmp > 65535)
    2084:	6e 89       	ldd	r22, Y+22	; 0x16
    2086:	7f 89       	ldd	r23, Y+23	; 0x17
    2088:	88 8d       	ldd	r24, Y+24	; 0x18
    208a:	99 8d       	ldd	r25, Y+25	; 0x19
    208c:	20 e0       	ldi	r18, 0x00	; 0
    208e:	3f ef       	ldi	r19, 0xFF	; 255
    2090:	4f e7       	ldi	r20, 0x7F	; 127
    2092:	57 e4       	ldi	r21, 0x47	; 71
    2094:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2098:	18 16       	cp	r1, r24
    209a:	4c f5       	brge	.+82     	; 0x20ee <LCD_voidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    209c:	6a 8d       	ldd	r22, Y+26	; 0x1a
    209e:	7b 8d       	ldd	r23, Y+27	; 0x1b
    20a0:	8c 8d       	ldd	r24, Y+28	; 0x1c
    20a2:	9d 8d       	ldd	r25, Y+29	; 0x1d
    20a4:	20 e0       	ldi	r18, 0x00	; 0
    20a6:	30 e0       	ldi	r19, 0x00	; 0
    20a8:	40 e2       	ldi	r20, 0x20	; 32
    20aa:	51 e4       	ldi	r21, 0x41	; 65
    20ac:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    20b0:	dc 01       	movw	r26, r24
    20b2:	cb 01       	movw	r24, r22
    20b4:	bc 01       	movw	r22, r24
    20b6:	cd 01       	movw	r24, r26
    20b8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20bc:	dc 01       	movw	r26, r24
    20be:	cb 01       	movw	r24, r22
    20c0:	9d 8b       	std	Y+21, r25	; 0x15
    20c2:	8c 8b       	std	Y+20, r24	; 0x14
    20c4:	0f c0       	rjmp	.+30     	; 0x20e4 <LCD_voidInit+0x42c>
    20c6:	88 ec       	ldi	r24, 0xC8	; 200
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	9b 8b       	std	Y+19, r25	; 0x13
    20cc:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20ce:	8a 89       	ldd	r24, Y+18	; 0x12
    20d0:	9b 89       	ldd	r25, Y+19	; 0x13
    20d2:	01 97       	sbiw	r24, 0x01	; 1
    20d4:	f1 f7       	brne	.-4      	; 0x20d2 <LCD_voidInit+0x41a>
    20d6:	9b 8b       	std	Y+19, r25	; 0x13
    20d8:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20da:	8c 89       	ldd	r24, Y+20	; 0x14
    20dc:	9d 89       	ldd	r25, Y+21	; 0x15
    20de:	01 97       	sbiw	r24, 0x01	; 1
    20e0:	9d 8b       	std	Y+21, r25	; 0x15
    20e2:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20e4:	8c 89       	ldd	r24, Y+20	; 0x14
    20e6:	9d 89       	ldd	r25, Y+21	; 0x15
    20e8:	00 97       	sbiw	r24, 0x00	; 0
    20ea:	69 f7       	brne	.-38     	; 0x20c6 <LCD_voidInit+0x40e>
    20ec:	24 c0       	rjmp	.+72     	; 0x2136 <LCD_voidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20ee:	6e 89       	ldd	r22, Y+22	; 0x16
    20f0:	7f 89       	ldd	r23, Y+23	; 0x17
    20f2:	88 8d       	ldd	r24, Y+24	; 0x18
    20f4:	99 8d       	ldd	r25, Y+25	; 0x19
    20f6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    20fa:	dc 01       	movw	r26, r24
    20fc:	cb 01       	movw	r24, r22
    20fe:	9d 8b       	std	Y+21, r25	; 0x15
    2100:	8c 8b       	std	Y+20, r24	; 0x14
    2102:	8c 89       	ldd	r24, Y+20	; 0x14
    2104:	9d 89       	ldd	r25, Y+21	; 0x15
    2106:	99 8b       	std	Y+17, r25	; 0x11
    2108:	88 8b       	std	Y+16, r24	; 0x10
    210a:	88 89       	ldd	r24, Y+16	; 0x10
    210c:	99 89       	ldd	r25, Y+17	; 0x11
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	f1 f7       	brne	.-4      	; 0x210e <LCD_voidInit+0x456>
    2112:	99 8b       	std	Y+17, r25	; 0x11
    2114:	88 8b       	std	Y+16, r24	; 0x10
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <LCD_voidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2118:	6f 8d       	ldd	r22, Y+31	; 0x1f
    211a:	78 a1       	ldd	r23, Y+32	; 0x20
    211c:	89 a1       	ldd	r24, Y+33	; 0x21
    211e:	9a a1       	ldd	r25, Y+34	; 0x22
    2120:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2124:	dc 01       	movw	r26, r24
    2126:	cb 01       	movw	r24, r22
    2128:	8e 8f       	std	Y+30, r24	; 0x1e
    212a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    212c:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    212e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2130:	8a 95       	dec	r24
    2132:	f1 f7       	brne	.-4      	; 0x2130 <LCD_voidInit+0x478>
    2134:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_us(40);
	LCD_voidSendCmd(0b00000001);//clr
    2136:	81 e0       	ldi	r24, 0x01	; 1
    2138:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	a0 e0       	ldi	r26, 0x00	; 0
    2142:	b0 e4       	ldi	r27, 0x40	; 64
    2144:	8b 87       	std	Y+11, r24	; 0x0b
    2146:	9c 87       	std	Y+12, r25	; 0x0c
    2148:	ad 87       	std	Y+13, r26	; 0x0d
    214a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    214c:	6b 85       	ldd	r22, Y+11	; 0x0b
    214e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2150:	8d 85       	ldd	r24, Y+13	; 0x0d
    2152:	9e 85       	ldd	r25, Y+14	; 0x0e
    2154:	20 e0       	ldi	r18, 0x00	; 0
    2156:	30 e0       	ldi	r19, 0x00	; 0
    2158:	4a ef       	ldi	r20, 0xFA	; 250
    215a:	54 e4       	ldi	r21, 0x44	; 68
    215c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2160:	dc 01       	movw	r26, r24
    2162:	cb 01       	movw	r24, r22
    2164:	8f 83       	std	Y+7, r24	; 0x07
    2166:	98 87       	std	Y+8, r25	; 0x08
    2168:	a9 87       	std	Y+9, r26	; 0x09
    216a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    216c:	6f 81       	ldd	r22, Y+7	; 0x07
    216e:	78 85       	ldd	r23, Y+8	; 0x08
    2170:	89 85       	ldd	r24, Y+9	; 0x09
    2172:	9a 85       	ldd	r25, Y+10	; 0x0a
    2174:	20 e0       	ldi	r18, 0x00	; 0
    2176:	30 e0       	ldi	r19, 0x00	; 0
    2178:	40 e8       	ldi	r20, 0x80	; 128
    217a:	5f e3       	ldi	r21, 0x3F	; 63
    217c:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2180:	88 23       	and	r24, r24
    2182:	2c f4       	brge	.+10     	; 0x218e <LCD_voidInit+0x4d6>
		__ticks = 1;
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	90 e0       	ldi	r25, 0x00	; 0
    2188:	9e 83       	std	Y+6, r25	; 0x06
    218a:	8d 83       	std	Y+5, r24	; 0x05
    218c:	3f c0       	rjmp	.+126    	; 0x220c <LCD_voidInit+0x554>
	else if (__tmp > 65535)
    218e:	6f 81       	ldd	r22, Y+7	; 0x07
    2190:	78 85       	ldd	r23, Y+8	; 0x08
    2192:	89 85       	ldd	r24, Y+9	; 0x09
    2194:	9a 85       	ldd	r25, Y+10	; 0x0a
    2196:	20 e0       	ldi	r18, 0x00	; 0
    2198:	3f ef       	ldi	r19, 0xFF	; 255
    219a:	4f e7       	ldi	r20, 0x7F	; 127
    219c:	57 e4       	ldi	r21, 0x47	; 71
    219e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    21a2:	18 16       	cp	r1, r24
    21a4:	4c f5       	brge	.+82     	; 0x21f8 <LCD_voidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    21a6:	6b 85       	ldd	r22, Y+11	; 0x0b
    21a8:	7c 85       	ldd	r23, Y+12	; 0x0c
    21aa:	8d 85       	ldd	r24, Y+13	; 0x0d
    21ac:	9e 85       	ldd	r25, Y+14	; 0x0e
    21ae:	20 e0       	ldi	r18, 0x00	; 0
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	40 e2       	ldi	r20, 0x20	; 32
    21b4:	51 e4       	ldi	r21, 0x41	; 65
    21b6:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    21ba:	dc 01       	movw	r26, r24
    21bc:	cb 01       	movw	r24, r22
    21be:	bc 01       	movw	r22, r24
    21c0:	cd 01       	movw	r24, r26
    21c2:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    21c6:	dc 01       	movw	r26, r24
    21c8:	cb 01       	movw	r24, r22
    21ca:	9e 83       	std	Y+6, r25	; 0x06
    21cc:	8d 83       	std	Y+5, r24	; 0x05
    21ce:	0f c0       	rjmp	.+30     	; 0x21ee <LCD_voidInit+0x536>
    21d0:	88 ec       	ldi	r24, 0xC8	; 200
    21d2:	90 e0       	ldi	r25, 0x00	; 0
    21d4:	9c 83       	std	Y+4, r25	; 0x04
    21d6:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    21d8:	8b 81       	ldd	r24, Y+3	; 0x03
    21da:	9c 81       	ldd	r25, Y+4	; 0x04
    21dc:	01 97       	sbiw	r24, 0x01	; 1
    21de:	f1 f7       	brne	.-4      	; 0x21dc <LCD_voidInit+0x524>
    21e0:	9c 83       	std	Y+4, r25	; 0x04
    21e2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21e4:	8d 81       	ldd	r24, Y+5	; 0x05
    21e6:	9e 81       	ldd	r25, Y+6	; 0x06
    21e8:	01 97       	sbiw	r24, 0x01	; 1
    21ea:	9e 83       	std	Y+6, r25	; 0x06
    21ec:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21ee:	8d 81       	ldd	r24, Y+5	; 0x05
    21f0:	9e 81       	ldd	r25, Y+6	; 0x06
    21f2:	00 97       	sbiw	r24, 0x00	; 0
    21f4:	69 f7       	brne	.-38     	; 0x21d0 <LCD_voidInit+0x518>
    21f6:	14 c0       	rjmp	.+40     	; 0x2220 <LCD_voidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21f8:	6f 81       	ldd	r22, Y+7	; 0x07
    21fa:	78 85       	ldd	r23, Y+8	; 0x08
    21fc:	89 85       	ldd	r24, Y+9	; 0x09
    21fe:	9a 85       	ldd	r25, Y+10	; 0x0a
    2200:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2204:	dc 01       	movw	r26, r24
    2206:	cb 01       	movw	r24, r22
    2208:	9e 83       	std	Y+6, r25	; 0x06
    220a:	8d 83       	std	Y+5, r24	; 0x05
    220c:	8d 81       	ldd	r24, Y+5	; 0x05
    220e:	9e 81       	ldd	r25, Y+6	; 0x06
    2210:	9a 83       	std	Y+2, r25	; 0x02
    2212:	89 83       	std	Y+1, r24	; 0x01
    2214:	89 81       	ldd	r24, Y+1	; 0x01
    2216:	9a 81       	ldd	r25, Y+2	; 0x02
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <LCD_voidInit+0x560>
    221c:	9a 83       	std	Y+2, r25	; 0x02
    221e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	LCD_voidSendCmd(0b00001110);//entry mode set
    2220:	8e e0       	ldi	r24, 0x0E	; 14
    2222:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>

}
    2226:	c4 5b       	subi	r28, 0xB4	; 180
    2228:	df 4f       	sbci	r29, 0xFF	; 255
    222a:	0f b6       	in	r0, 0x3f	; 63
    222c:	f8 94       	cli
    222e:	de bf       	out	0x3e, r29	; 62
    2230:	0f be       	out	0x3f, r0	; 63
    2232:	cd bf       	out	0x3d, r28	; 61
    2234:	cf 91       	pop	r28
    2236:	df 91       	pop	r29
    2238:	1f 91       	pop	r17
    223a:	0f 91       	pop	r16
    223c:	08 95       	ret

0000223e <LCD_voidSendCmd>:
void LCD_voidSendCmd(u8 Copy_u8Cmd)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	cd b7       	in	r28, 0x3d	; 61
    2244:	de b7       	in	r29, 0x3e	; 62
    2246:	e1 97       	sbiw	r28, 0x31	; 49
    2248:	0f b6       	in	r0, 0x3f	; 63
    224a:	f8 94       	cli
    224c:	de bf       	out	0x3e, r29	; 62
    224e:	0f be       	out	0x3f, r0	; 63
    2250:	cd bf       	out	0x3d, r28	; 61
    2252:	89 ab       	std	Y+49, r24	; 0x31
	//rs=0
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_LOW);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	60 e0       	ldi	r22, 0x00	; 0
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    225e:	82 e0       	ldi	r24, 0x02	; 2
    2260:	61 e0       	ldi	r22, 0x01	; 1
    2262:	40 e0       	ldi	r20, 0x00	; 0
    2264:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Cmd);
    2268:	83 e0       	ldi	r24, 0x03	; 3
    226a:	69 a9       	ldd	r22, Y+49	; 0x31
    226c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    2270:	82 e0       	ldi	r24, 0x02	; 2
    2272:	62 e0       	ldi	r22, 0x02	; 2
    2274:	41 e0       	ldi	r20, 0x01	; 1
    2276:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
    227a:	80 e0       	ldi	r24, 0x00	; 0
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	a0 e8       	ldi	r26, 0x80	; 128
    2280:	bf e3       	ldi	r27, 0x3F	; 63
    2282:	8d a7       	std	Y+45, r24	; 0x2d
    2284:	9e a7       	std	Y+46, r25	; 0x2e
    2286:	af a7       	std	Y+47, r26	; 0x2f
    2288:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    228a:	6d a5       	ldd	r22, Y+45	; 0x2d
    228c:	7e a5       	ldd	r23, Y+46	; 0x2e
    228e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2290:	98 a9       	ldd	r25, Y+48	; 0x30
    2292:	2b ea       	ldi	r18, 0xAB	; 171
    2294:	3a ea       	ldi	r19, 0xAA	; 170
    2296:	4a e2       	ldi	r20, 0x2A	; 42
    2298:	50 e4       	ldi	r21, 0x40	; 64
    229a:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    229e:	dc 01       	movw	r26, r24
    22a0:	cb 01       	movw	r24, r22
    22a2:	89 a7       	std	Y+41, r24	; 0x29
    22a4:	9a a7       	std	Y+42, r25	; 0x2a
    22a6:	ab a7       	std	Y+43, r26	; 0x2b
    22a8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    22aa:	69 a5       	ldd	r22, Y+41	; 0x29
    22ac:	7a a5       	ldd	r23, Y+42	; 0x2a
    22ae:	8b a5       	ldd	r24, Y+43	; 0x2b
    22b0:	9c a5       	ldd	r25, Y+44	; 0x2c
    22b2:	20 e0       	ldi	r18, 0x00	; 0
    22b4:	30 e0       	ldi	r19, 0x00	; 0
    22b6:	40 e8       	ldi	r20, 0x80	; 128
    22b8:	5f e3       	ldi	r21, 0x3F	; 63
    22ba:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    22be:	88 23       	and	r24, r24
    22c0:	1c f4       	brge	.+6      	; 0x22c8 <LCD_voidSendCmd+0x8a>
		__ticks = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	88 a7       	std	Y+40, r24	; 0x28
    22c6:	91 c0       	rjmp	.+290    	; 0x23ea <LCD_voidSendCmd+0x1ac>
	else if (__tmp > 255)
    22c8:	69 a5       	ldd	r22, Y+41	; 0x29
    22ca:	7a a5       	ldd	r23, Y+42	; 0x2a
    22cc:	8b a5       	ldd	r24, Y+43	; 0x2b
    22ce:	9c a5       	ldd	r25, Y+44	; 0x2c
    22d0:	20 e0       	ldi	r18, 0x00	; 0
    22d2:	30 e0       	ldi	r19, 0x00	; 0
    22d4:	4f e7       	ldi	r20, 0x7F	; 127
    22d6:	53 e4       	ldi	r21, 0x43	; 67
    22d8:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    22dc:	18 16       	cp	r1, r24
    22de:	0c f0       	brlt	.+2      	; 0x22e2 <LCD_voidSendCmd+0xa4>
    22e0:	7b c0       	rjmp	.+246    	; 0x23d8 <LCD_voidSendCmd+0x19a>
	{
		_delay_ms(__us / 1000.0);
    22e2:	6d a5       	ldd	r22, Y+45	; 0x2d
    22e4:	7e a5       	ldd	r23, Y+46	; 0x2e
    22e6:	8f a5       	ldd	r24, Y+47	; 0x2f
    22e8:	98 a9       	ldd	r25, Y+48	; 0x30
    22ea:	20 e0       	ldi	r18, 0x00	; 0
    22ec:	30 e0       	ldi	r19, 0x00	; 0
    22ee:	4a e7       	ldi	r20, 0x7A	; 122
    22f0:	54 e4       	ldi	r21, 0x44	; 68
    22f2:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    22f6:	dc 01       	movw	r26, r24
    22f8:	cb 01       	movw	r24, r22
    22fa:	8c a3       	std	Y+36, r24	; 0x24
    22fc:	9d a3       	std	Y+37, r25	; 0x25
    22fe:	ae a3       	std	Y+38, r26	; 0x26
    2300:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	6c a1       	ldd	r22, Y+36	; 0x24
    2304:	7d a1       	ldd	r23, Y+37	; 0x25
    2306:	8e a1       	ldd	r24, Y+38	; 0x26
    2308:	9f a1       	ldd	r25, Y+39	; 0x27
    230a:	20 e0       	ldi	r18, 0x00	; 0
    230c:	30 e0       	ldi	r19, 0x00	; 0
    230e:	4a ef       	ldi	r20, 0xFA	; 250
    2310:	54 e4       	ldi	r21, 0x44	; 68
    2312:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2316:	dc 01       	movw	r26, r24
    2318:	cb 01       	movw	r24, r22
    231a:	88 a3       	std	Y+32, r24	; 0x20
    231c:	99 a3       	std	Y+33, r25	; 0x21
    231e:	aa a3       	std	Y+34, r26	; 0x22
    2320:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2322:	68 a1       	ldd	r22, Y+32	; 0x20
    2324:	79 a1       	ldd	r23, Y+33	; 0x21
    2326:	8a a1       	ldd	r24, Y+34	; 0x22
    2328:	9b a1       	ldd	r25, Y+35	; 0x23
    232a:	20 e0       	ldi	r18, 0x00	; 0
    232c:	30 e0       	ldi	r19, 0x00	; 0
    232e:	40 e8       	ldi	r20, 0x80	; 128
    2330:	5f e3       	ldi	r21, 0x3F	; 63
    2332:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2336:	88 23       	and	r24, r24
    2338:	2c f4       	brge	.+10     	; 0x2344 <LCD_voidSendCmd+0x106>
		__ticks = 1;
    233a:	81 e0       	ldi	r24, 0x01	; 1
    233c:	90 e0       	ldi	r25, 0x00	; 0
    233e:	9f 8f       	std	Y+31, r25	; 0x1f
    2340:	8e 8f       	std	Y+30, r24	; 0x1e
    2342:	3f c0       	rjmp	.+126    	; 0x23c2 <LCD_voidSendCmd+0x184>
	else if (__tmp > 65535)
    2344:	68 a1       	ldd	r22, Y+32	; 0x20
    2346:	79 a1       	ldd	r23, Y+33	; 0x21
    2348:	8a a1       	ldd	r24, Y+34	; 0x22
    234a:	9b a1       	ldd	r25, Y+35	; 0x23
    234c:	20 e0       	ldi	r18, 0x00	; 0
    234e:	3f ef       	ldi	r19, 0xFF	; 255
    2350:	4f e7       	ldi	r20, 0x7F	; 127
    2352:	57 e4       	ldi	r21, 0x47	; 71
    2354:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2358:	18 16       	cp	r1, r24
    235a:	4c f5       	brge	.+82     	; 0x23ae <LCD_voidSendCmd+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235c:	6c a1       	ldd	r22, Y+36	; 0x24
    235e:	7d a1       	ldd	r23, Y+37	; 0x25
    2360:	8e a1       	ldd	r24, Y+38	; 0x26
    2362:	9f a1       	ldd	r25, Y+39	; 0x27
    2364:	20 e0       	ldi	r18, 0x00	; 0
    2366:	30 e0       	ldi	r19, 0x00	; 0
    2368:	40 e2       	ldi	r20, 0x20	; 32
    236a:	51 e4       	ldi	r21, 0x41	; 65
    236c:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2370:	dc 01       	movw	r26, r24
    2372:	cb 01       	movw	r24, r22
    2374:	bc 01       	movw	r22, r24
    2376:	cd 01       	movw	r24, r26
    2378:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    237c:	dc 01       	movw	r26, r24
    237e:	cb 01       	movw	r24, r22
    2380:	9f 8f       	std	Y+31, r25	; 0x1f
    2382:	8e 8f       	std	Y+30, r24	; 0x1e
    2384:	0f c0       	rjmp	.+30     	; 0x23a4 <LCD_voidSendCmd+0x166>
    2386:	88 ec       	ldi	r24, 0xC8	; 200
    2388:	90 e0       	ldi	r25, 0x00	; 0
    238a:	9d 8f       	std	Y+29, r25	; 0x1d
    238c:	8c 8f       	std	Y+28, r24	; 0x1c
    238e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2390:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2392:	01 97       	sbiw	r24, 0x01	; 1
    2394:	f1 f7       	brne	.-4      	; 0x2392 <LCD_voidSendCmd+0x154>
    2396:	9d 8f       	std	Y+29, r25	; 0x1d
    2398:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    239a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    239c:	9f 8d       	ldd	r25, Y+31	; 0x1f
    239e:	01 97       	sbiw	r24, 0x01	; 1
    23a0:	9f 8f       	std	Y+31, r25	; 0x1f
    23a2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23a6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23a8:	00 97       	sbiw	r24, 0x00	; 0
    23aa:	69 f7       	brne	.-38     	; 0x2386 <LCD_voidSendCmd+0x148>
    23ac:	24 c0       	rjmp	.+72     	; 0x23f6 <LCD_voidSendCmd+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ae:	68 a1       	ldd	r22, Y+32	; 0x20
    23b0:	79 a1       	ldd	r23, Y+33	; 0x21
    23b2:	8a a1       	ldd	r24, Y+34	; 0x22
    23b4:	9b a1       	ldd	r25, Y+35	; 0x23
    23b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23ba:	dc 01       	movw	r26, r24
    23bc:	cb 01       	movw	r24, r22
    23be:	9f 8f       	std	Y+31, r25	; 0x1f
    23c0:	8e 8f       	std	Y+30, r24	; 0x1e
    23c2:	8e 8d       	ldd	r24, Y+30	; 0x1e
    23c4:	9f 8d       	ldd	r25, Y+31	; 0x1f
    23c6:	9b 8f       	std	Y+27, r25	; 0x1b
    23c8:	8a 8f       	std	Y+26, r24	; 0x1a
    23ca:	8a 8d       	ldd	r24, Y+26	; 0x1a
    23cc:	9b 8d       	ldd	r25, Y+27	; 0x1b
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <LCD_voidSendCmd+0x190>
    23d2:	9b 8f       	std	Y+27, r25	; 0x1b
    23d4:	8a 8f       	std	Y+26, r24	; 0x1a
    23d6:	0f c0       	rjmp	.+30     	; 0x23f6 <LCD_voidSendCmd+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    23d8:	69 a5       	ldd	r22, Y+41	; 0x29
    23da:	7a a5       	ldd	r23, Y+42	; 0x2a
    23dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    23de:	9c a5       	ldd	r25, Y+44	; 0x2c
    23e0:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    23e4:	dc 01       	movw	r26, r24
    23e6:	cb 01       	movw	r24, r22
    23e8:	88 a7       	std	Y+40, r24	; 0x28
    23ea:	88 a5       	ldd	r24, Y+40	; 0x28
    23ec:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    23ee:	89 8d       	ldd	r24, Y+25	; 0x19
    23f0:	8a 95       	dec	r24
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <LCD_voidSendCmd+0x1b2>
    23f4:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    23f6:	82 e0       	ldi	r24, 0x02	; 2
    23f8:	62 e0       	ldi	r22, 0x02	; 2
    23fa:	40 e0       	ldi	r20, 0x00	; 0
    23fc:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
    2400:	80 e0       	ldi	r24, 0x00	; 0
    2402:	90 e0       	ldi	r25, 0x00	; 0
    2404:	a0 e8       	ldi	r26, 0x80	; 128
    2406:	bf e3       	ldi	r27, 0x3F	; 63
    2408:	8d 8b       	std	Y+21, r24	; 0x15
    240a:	9e 8b       	std	Y+22, r25	; 0x16
    240c:	af 8b       	std	Y+23, r26	; 0x17
    240e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2410:	6d 89       	ldd	r22, Y+21	; 0x15
    2412:	7e 89       	ldd	r23, Y+22	; 0x16
    2414:	8f 89       	ldd	r24, Y+23	; 0x17
    2416:	98 8d       	ldd	r25, Y+24	; 0x18
    2418:	2b ea       	ldi	r18, 0xAB	; 171
    241a:	3a ea       	ldi	r19, 0xAA	; 170
    241c:	4a e2       	ldi	r20, 0x2A	; 42
    241e:	50 e4       	ldi	r21, 0x40	; 64
    2420:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	89 8b       	std	Y+17, r24	; 0x11
    242a:	9a 8b       	std	Y+18, r25	; 0x12
    242c:	ab 8b       	std	Y+19, r26	; 0x13
    242e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2430:	69 89       	ldd	r22, Y+17	; 0x11
    2432:	7a 89       	ldd	r23, Y+18	; 0x12
    2434:	8b 89       	ldd	r24, Y+19	; 0x13
    2436:	9c 89       	ldd	r25, Y+20	; 0x14
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	40 e8       	ldi	r20, 0x80	; 128
    243e:	5f e3       	ldi	r21, 0x3F	; 63
    2440:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2444:	88 23       	and	r24, r24
    2446:	1c f4       	brge	.+6      	; 0x244e <LCD_voidSendCmd+0x210>
		__ticks = 1;
    2448:	81 e0       	ldi	r24, 0x01	; 1
    244a:	88 8b       	std	Y+16, r24	; 0x10
    244c:	91 c0       	rjmp	.+290    	; 0x2570 <LCD_voidSendCmd+0x332>
	else if (__tmp > 255)
    244e:	69 89       	ldd	r22, Y+17	; 0x11
    2450:	7a 89       	ldd	r23, Y+18	; 0x12
    2452:	8b 89       	ldd	r24, Y+19	; 0x13
    2454:	9c 89       	ldd	r25, Y+20	; 0x14
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	30 e0       	ldi	r19, 0x00	; 0
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	53 e4       	ldi	r21, 0x43	; 67
    245e:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	0c f0       	brlt	.+2      	; 0x2468 <LCD_voidSendCmd+0x22a>
    2466:	7b c0       	rjmp	.+246    	; 0x255e <LCD_voidSendCmd+0x320>
	{
		_delay_ms(__us / 1000.0);
    2468:	6d 89       	ldd	r22, Y+21	; 0x15
    246a:	7e 89       	ldd	r23, Y+22	; 0x16
    246c:	8f 89       	ldd	r24, Y+23	; 0x17
    246e:	98 8d       	ldd	r25, Y+24	; 0x18
    2470:	20 e0       	ldi	r18, 0x00	; 0
    2472:	30 e0       	ldi	r19, 0x00	; 0
    2474:	4a e7       	ldi	r20, 0x7A	; 122
    2476:	54 e4       	ldi	r21, 0x44	; 68
    2478:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    247c:	dc 01       	movw	r26, r24
    247e:	cb 01       	movw	r24, r22
    2480:	8c 87       	std	Y+12, r24	; 0x0c
    2482:	9d 87       	std	Y+13, r25	; 0x0d
    2484:	ae 87       	std	Y+14, r26	; 0x0e
    2486:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2488:	6c 85       	ldd	r22, Y+12	; 0x0c
    248a:	7d 85       	ldd	r23, Y+13	; 0x0d
    248c:	8e 85       	ldd	r24, Y+14	; 0x0e
    248e:	9f 85       	ldd	r25, Y+15	; 0x0f
    2490:	20 e0       	ldi	r18, 0x00	; 0
    2492:	30 e0       	ldi	r19, 0x00	; 0
    2494:	4a ef       	ldi	r20, 0xFA	; 250
    2496:	54 e4       	ldi	r21, 0x44	; 68
    2498:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    249c:	dc 01       	movw	r26, r24
    249e:	cb 01       	movw	r24, r22
    24a0:	88 87       	std	Y+8, r24	; 0x08
    24a2:	99 87       	std	Y+9, r25	; 0x09
    24a4:	aa 87       	std	Y+10, r26	; 0x0a
    24a6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    24a8:	68 85       	ldd	r22, Y+8	; 0x08
    24aa:	79 85       	ldd	r23, Y+9	; 0x09
    24ac:	8a 85       	ldd	r24, Y+10	; 0x0a
    24ae:	9b 85       	ldd	r25, Y+11	; 0x0b
    24b0:	20 e0       	ldi	r18, 0x00	; 0
    24b2:	30 e0       	ldi	r19, 0x00	; 0
    24b4:	40 e8       	ldi	r20, 0x80	; 128
    24b6:	5f e3       	ldi	r21, 0x3F	; 63
    24b8:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    24bc:	88 23       	and	r24, r24
    24be:	2c f4       	brge	.+10     	; 0x24ca <LCD_voidSendCmd+0x28c>
		__ticks = 1;
    24c0:	81 e0       	ldi	r24, 0x01	; 1
    24c2:	90 e0       	ldi	r25, 0x00	; 0
    24c4:	9f 83       	std	Y+7, r25	; 0x07
    24c6:	8e 83       	std	Y+6, r24	; 0x06
    24c8:	3f c0       	rjmp	.+126    	; 0x2548 <LCD_voidSendCmd+0x30a>
	else if (__tmp > 65535)
    24ca:	68 85       	ldd	r22, Y+8	; 0x08
    24cc:	79 85       	ldd	r23, Y+9	; 0x09
    24ce:	8a 85       	ldd	r24, Y+10	; 0x0a
    24d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    24d2:	20 e0       	ldi	r18, 0x00	; 0
    24d4:	3f ef       	ldi	r19, 0xFF	; 255
    24d6:	4f e7       	ldi	r20, 0x7F	; 127
    24d8:	57 e4       	ldi	r21, 0x47	; 71
    24da:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    24de:	18 16       	cp	r1, r24
    24e0:	4c f5       	brge	.+82     	; 0x2534 <LCD_voidSendCmd+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24e2:	6c 85       	ldd	r22, Y+12	; 0x0c
    24e4:	7d 85       	ldd	r23, Y+13	; 0x0d
    24e6:	8e 85       	ldd	r24, Y+14	; 0x0e
    24e8:	9f 85       	ldd	r25, Y+15	; 0x0f
    24ea:	20 e0       	ldi	r18, 0x00	; 0
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	40 e2       	ldi	r20, 0x20	; 32
    24f0:	51 e4       	ldi	r21, 0x41	; 65
    24f2:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    24f6:	dc 01       	movw	r26, r24
    24f8:	cb 01       	movw	r24, r22
    24fa:	bc 01       	movw	r22, r24
    24fc:	cd 01       	movw	r24, r26
    24fe:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2502:	dc 01       	movw	r26, r24
    2504:	cb 01       	movw	r24, r22
    2506:	9f 83       	std	Y+7, r25	; 0x07
    2508:	8e 83       	std	Y+6, r24	; 0x06
    250a:	0f c0       	rjmp	.+30     	; 0x252a <LCD_voidSendCmd+0x2ec>
    250c:	88 ec       	ldi	r24, 0xC8	; 200
    250e:	90 e0       	ldi	r25, 0x00	; 0
    2510:	9d 83       	std	Y+5, r25	; 0x05
    2512:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2514:	8c 81       	ldd	r24, Y+4	; 0x04
    2516:	9d 81       	ldd	r25, Y+5	; 0x05
    2518:	01 97       	sbiw	r24, 0x01	; 1
    251a:	f1 f7       	brne	.-4      	; 0x2518 <LCD_voidSendCmd+0x2da>
    251c:	9d 83       	std	Y+5, r25	; 0x05
    251e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2520:	8e 81       	ldd	r24, Y+6	; 0x06
    2522:	9f 81       	ldd	r25, Y+7	; 0x07
    2524:	01 97       	sbiw	r24, 0x01	; 1
    2526:	9f 83       	std	Y+7, r25	; 0x07
    2528:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    252a:	8e 81       	ldd	r24, Y+6	; 0x06
    252c:	9f 81       	ldd	r25, Y+7	; 0x07
    252e:	00 97       	sbiw	r24, 0x00	; 0
    2530:	69 f7       	brne	.-38     	; 0x250c <LCD_voidSendCmd+0x2ce>
    2532:	24 c0       	rjmp	.+72     	; 0x257c <LCD_voidSendCmd+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2534:	68 85       	ldd	r22, Y+8	; 0x08
    2536:	79 85       	ldd	r23, Y+9	; 0x09
    2538:	8a 85       	ldd	r24, Y+10	; 0x0a
    253a:	9b 85       	ldd	r25, Y+11	; 0x0b
    253c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2540:	dc 01       	movw	r26, r24
    2542:	cb 01       	movw	r24, r22
    2544:	9f 83       	std	Y+7, r25	; 0x07
    2546:	8e 83       	std	Y+6, r24	; 0x06
    2548:	8e 81       	ldd	r24, Y+6	; 0x06
    254a:	9f 81       	ldd	r25, Y+7	; 0x07
    254c:	9b 83       	std	Y+3, r25	; 0x03
    254e:	8a 83       	std	Y+2, r24	; 0x02
    2550:	8a 81       	ldd	r24, Y+2	; 0x02
    2552:	9b 81       	ldd	r25, Y+3	; 0x03
    2554:	01 97       	sbiw	r24, 0x01	; 1
    2556:	f1 f7       	brne	.-4      	; 0x2554 <LCD_voidSendCmd+0x316>
    2558:	9b 83       	std	Y+3, r25	; 0x03
    255a:	8a 83       	std	Y+2, r24	; 0x02
    255c:	0f c0       	rjmp	.+30     	; 0x257c <LCD_voidSendCmd+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    255e:	69 89       	ldd	r22, Y+17	; 0x11
    2560:	7a 89       	ldd	r23, Y+18	; 0x12
    2562:	8b 89       	ldd	r24, Y+19	; 0x13
    2564:	9c 89       	ldd	r25, Y+20	; 0x14
    2566:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	88 8b       	std	Y+16, r24	; 0x10
    2570:	88 89       	ldd	r24, Y+16	; 0x10
    2572:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2574:	89 81       	ldd	r24, Y+1	; 0x01
    2576:	8a 95       	dec	r24
    2578:	f1 f7       	brne	.-4      	; 0x2576 <LCD_voidSendCmd+0x338>
    257a:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    257c:	e1 96       	adiw	r28, 0x31	; 49
    257e:	0f b6       	in	r0, 0x3f	; 63
    2580:	f8 94       	cli
    2582:	de bf       	out	0x3e, r29	; 62
    2584:	0f be       	out	0x3f, r0	; 63
    2586:	cd bf       	out	0x3d, r28	; 61
    2588:	cf 91       	pop	r28
    258a:	df 91       	pop	r29
    258c:	08 95       	ret

0000258e <LCD_voidSendChar>:
void LCD_voidSendChar(u8 Copy_u8Char)
{
    258e:	df 93       	push	r29
    2590:	cf 93       	push	r28
    2592:	cd b7       	in	r28, 0x3d	; 61
    2594:	de b7       	in	r29, 0x3e	; 62
    2596:	e1 97       	sbiw	r28, 0x31	; 49
    2598:	0f b6       	in	r0, 0x3f	; 63
    259a:	f8 94       	cli
    259c:	de bf       	out	0x3e, r29	; 62
    259e:	0f be       	out	0x3f, r0	; 63
    25a0:	cd bf       	out	0x3d, r28	; 61
    25a2:	89 ab       	std	Y+49, r24	; 0x31
	//rs=1
	DIO_u8SetPinValue(CONTROL_PORT,RS_PIN,DIO_u8_HIGH);
    25a4:	82 e0       	ldi	r24, 0x02	; 2
    25a6:	60 e0       	ldi	r22, 0x00	; 0
    25a8:	41 e0       	ldi	r20, 0x01	; 1
    25aa:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	//rw=0
	DIO_u8SetPinValue(CONTROL_PORT,RW_PIN,DIO_u8_LOW);
    25ae:	82 e0       	ldi	r24, 0x02	; 2
    25b0:	61 e0       	ldi	r22, 0x01	; 1
    25b2:	40 e0       	ldi	r20, 0x00	; 0
    25b4:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
	//send cmd byte to the data pins of LCD
	DIO_u8SetPortValue(DATA_PORT,Copy_u8Char);
    25b8:	83 e0       	ldi	r24, 0x03	; 3
    25ba:	69 a9       	ldd	r22, Y+49	; 0x31
    25bc:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <DIO_u8SetPortValue>
	//enable pulse e=1,e=0
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_HIGH);
    25c0:	82 e0       	ldi	r24, 0x02	; 2
    25c2:	62 e0       	ldi	r22, 0x02	; 2
    25c4:	41 e0       	ldi	r20, 0x01	; 1
    25c6:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	90 e0       	ldi	r25, 0x00	; 0
    25ce:	a0 e8       	ldi	r26, 0x80	; 128
    25d0:	bf e3       	ldi	r27, 0x3F	; 63
    25d2:	8d a7       	std	Y+45, r24	; 0x2d
    25d4:	9e a7       	std	Y+46, r25	; 0x2e
    25d6:	af a7       	std	Y+47, r26	; 0x2f
    25d8:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25da:	6d a5       	ldd	r22, Y+45	; 0x2d
    25dc:	7e a5       	ldd	r23, Y+46	; 0x2e
    25de:	8f a5       	ldd	r24, Y+47	; 0x2f
    25e0:	98 a9       	ldd	r25, Y+48	; 0x30
    25e2:	2b ea       	ldi	r18, 0xAB	; 171
    25e4:	3a ea       	ldi	r19, 0xAA	; 170
    25e6:	4a e2       	ldi	r20, 0x2A	; 42
    25e8:	50 e4       	ldi	r21, 0x40	; 64
    25ea:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    25ee:	dc 01       	movw	r26, r24
    25f0:	cb 01       	movw	r24, r22
    25f2:	89 a7       	std	Y+41, r24	; 0x29
    25f4:	9a a7       	std	Y+42, r25	; 0x2a
    25f6:	ab a7       	std	Y+43, r26	; 0x2b
    25f8:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    25fa:	69 a5       	ldd	r22, Y+41	; 0x29
    25fc:	7a a5       	ldd	r23, Y+42	; 0x2a
    25fe:	8b a5       	ldd	r24, Y+43	; 0x2b
    2600:	9c a5       	ldd	r25, Y+44	; 0x2c
    2602:	20 e0       	ldi	r18, 0x00	; 0
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	40 e8       	ldi	r20, 0x80	; 128
    2608:	5f e3       	ldi	r21, 0x3F	; 63
    260a:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    260e:	88 23       	and	r24, r24
    2610:	1c f4       	brge	.+6      	; 0x2618 <LCD_voidSendChar+0x8a>
		__ticks = 1;
    2612:	81 e0       	ldi	r24, 0x01	; 1
    2614:	88 a7       	std	Y+40, r24	; 0x28
    2616:	91 c0       	rjmp	.+290    	; 0x273a <LCD_voidSendChar+0x1ac>
	else if (__tmp > 255)
    2618:	69 a5       	ldd	r22, Y+41	; 0x29
    261a:	7a a5       	ldd	r23, Y+42	; 0x2a
    261c:	8b a5       	ldd	r24, Y+43	; 0x2b
    261e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2620:	20 e0       	ldi	r18, 0x00	; 0
    2622:	30 e0       	ldi	r19, 0x00	; 0
    2624:	4f e7       	ldi	r20, 0x7F	; 127
    2626:	53 e4       	ldi	r21, 0x43	; 67
    2628:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    262c:	18 16       	cp	r1, r24
    262e:	0c f0       	brlt	.+2      	; 0x2632 <LCD_voidSendChar+0xa4>
    2630:	7b c0       	rjmp	.+246    	; 0x2728 <LCD_voidSendChar+0x19a>
	{
		_delay_ms(__us / 1000.0);
    2632:	6d a5       	ldd	r22, Y+45	; 0x2d
    2634:	7e a5       	ldd	r23, Y+46	; 0x2e
    2636:	8f a5       	ldd	r24, Y+47	; 0x2f
    2638:	98 a9       	ldd	r25, Y+48	; 0x30
    263a:	20 e0       	ldi	r18, 0x00	; 0
    263c:	30 e0       	ldi	r19, 0x00	; 0
    263e:	4a e7       	ldi	r20, 0x7A	; 122
    2640:	54 e4       	ldi	r21, 0x44	; 68
    2642:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    2646:	dc 01       	movw	r26, r24
    2648:	cb 01       	movw	r24, r22
    264a:	8c a3       	std	Y+36, r24	; 0x24
    264c:	9d a3       	std	Y+37, r25	; 0x25
    264e:	ae a3       	std	Y+38, r26	; 0x26
    2650:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2652:	6c a1       	ldd	r22, Y+36	; 0x24
    2654:	7d a1       	ldd	r23, Y+37	; 0x25
    2656:	8e a1       	ldd	r24, Y+38	; 0x26
    2658:	9f a1       	ldd	r25, Y+39	; 0x27
    265a:	20 e0       	ldi	r18, 0x00	; 0
    265c:	30 e0       	ldi	r19, 0x00	; 0
    265e:	4a ef       	ldi	r20, 0xFA	; 250
    2660:	54 e4       	ldi	r21, 0x44	; 68
    2662:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2666:	dc 01       	movw	r26, r24
    2668:	cb 01       	movw	r24, r22
    266a:	88 a3       	std	Y+32, r24	; 0x20
    266c:	99 a3       	std	Y+33, r25	; 0x21
    266e:	aa a3       	std	Y+34, r26	; 0x22
    2670:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    2672:	68 a1       	ldd	r22, Y+32	; 0x20
    2674:	79 a1       	ldd	r23, Y+33	; 0x21
    2676:	8a a1       	ldd	r24, Y+34	; 0x22
    2678:	9b a1       	ldd	r25, Y+35	; 0x23
    267a:	20 e0       	ldi	r18, 0x00	; 0
    267c:	30 e0       	ldi	r19, 0x00	; 0
    267e:	40 e8       	ldi	r20, 0x80	; 128
    2680:	5f e3       	ldi	r21, 0x3F	; 63
    2682:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2686:	88 23       	and	r24, r24
    2688:	2c f4       	brge	.+10     	; 0x2694 <LCD_voidSendChar+0x106>
		__ticks = 1;
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	90 e0       	ldi	r25, 0x00	; 0
    268e:	9f 8f       	std	Y+31, r25	; 0x1f
    2690:	8e 8f       	std	Y+30, r24	; 0x1e
    2692:	3f c0       	rjmp	.+126    	; 0x2712 <LCD_voidSendChar+0x184>
	else if (__tmp > 65535)
    2694:	68 a1       	ldd	r22, Y+32	; 0x20
    2696:	79 a1       	ldd	r23, Y+33	; 0x21
    2698:	8a a1       	ldd	r24, Y+34	; 0x22
    269a:	9b a1       	ldd	r25, Y+35	; 0x23
    269c:	20 e0       	ldi	r18, 0x00	; 0
    269e:	3f ef       	ldi	r19, 0xFF	; 255
    26a0:	4f e7       	ldi	r20, 0x7F	; 127
    26a2:	57 e4       	ldi	r21, 0x47	; 71
    26a4:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    26a8:	18 16       	cp	r1, r24
    26aa:	4c f5       	brge	.+82     	; 0x26fe <LCD_voidSendChar+0x170>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26ac:	6c a1       	ldd	r22, Y+36	; 0x24
    26ae:	7d a1       	ldd	r23, Y+37	; 0x25
    26b0:	8e a1       	ldd	r24, Y+38	; 0x26
    26b2:	9f a1       	ldd	r25, Y+39	; 0x27
    26b4:	20 e0       	ldi	r18, 0x00	; 0
    26b6:	30 e0       	ldi	r19, 0x00	; 0
    26b8:	40 e2       	ldi	r20, 0x20	; 32
    26ba:	51 e4       	ldi	r21, 0x41	; 65
    26bc:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	bc 01       	movw	r22, r24
    26c6:	cd 01       	movw	r24, r26
    26c8:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    26cc:	dc 01       	movw	r26, r24
    26ce:	cb 01       	movw	r24, r22
    26d0:	9f 8f       	std	Y+31, r25	; 0x1f
    26d2:	8e 8f       	std	Y+30, r24	; 0x1e
    26d4:	0f c0       	rjmp	.+30     	; 0x26f4 <LCD_voidSendChar+0x166>
    26d6:	88 ec       	ldi	r24, 0xC8	; 200
    26d8:	90 e0       	ldi	r25, 0x00	; 0
    26da:	9d 8f       	std	Y+29, r25	; 0x1d
    26dc:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26de:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26e0:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26e2:	01 97       	sbiw	r24, 0x01	; 1
    26e4:	f1 f7       	brne	.-4      	; 0x26e2 <LCD_voidSendChar+0x154>
    26e6:	9d 8f       	std	Y+29, r25	; 0x1d
    26e8:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26ea:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26ec:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26ee:	01 97       	sbiw	r24, 0x01	; 1
    26f0:	9f 8f       	std	Y+31, r25	; 0x1f
    26f2:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26f4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    26f6:	9f 8d       	ldd	r25, Y+31	; 0x1f
    26f8:	00 97       	sbiw	r24, 0x00	; 0
    26fa:	69 f7       	brne	.-38     	; 0x26d6 <LCD_voidSendChar+0x148>
    26fc:	24 c0       	rjmp	.+72     	; 0x2746 <LCD_voidSendChar+0x1b8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26fe:	68 a1       	ldd	r22, Y+32	; 0x20
    2700:	79 a1       	ldd	r23, Y+33	; 0x21
    2702:	8a a1       	ldd	r24, Y+34	; 0x22
    2704:	9b a1       	ldd	r25, Y+35	; 0x23
    2706:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    270a:	dc 01       	movw	r26, r24
    270c:	cb 01       	movw	r24, r22
    270e:	9f 8f       	std	Y+31, r25	; 0x1f
    2710:	8e 8f       	std	Y+30, r24	; 0x1e
    2712:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2714:	9f 8d       	ldd	r25, Y+31	; 0x1f
    2716:	9b 8f       	std	Y+27, r25	; 0x1b
    2718:	8a 8f       	std	Y+26, r24	; 0x1a
    271a:	8a 8d       	ldd	r24, Y+26	; 0x1a
    271c:	9b 8d       	ldd	r25, Y+27	; 0x1b
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <LCD_voidSendChar+0x190>
    2722:	9b 8f       	std	Y+27, r25	; 0x1b
    2724:	8a 8f       	std	Y+26, r24	; 0x1a
    2726:	0f c0       	rjmp	.+30     	; 0x2746 <LCD_voidSendChar+0x1b8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2728:	69 a5       	ldd	r22, Y+41	; 0x29
    272a:	7a a5       	ldd	r23, Y+42	; 0x2a
    272c:	8b a5       	ldd	r24, Y+43	; 0x2b
    272e:	9c a5       	ldd	r25, Y+44	; 0x2c
    2730:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2734:	dc 01       	movw	r26, r24
    2736:	cb 01       	movw	r24, r22
    2738:	88 a7       	std	Y+40, r24	; 0x28
    273a:	88 a5       	ldd	r24, Y+40	; 0x28
    273c:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    273e:	89 8d       	ldd	r24, Y+25	; 0x19
    2740:	8a 95       	dec	r24
    2742:	f1 f7       	brne	.-4      	; 0x2740 <LCD_voidSendChar+0x1b2>
    2744:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(1);
	DIO_u8SetPinValue(CONTROL_PORT,E_PIN,DIO_u8_LOW);
    2746:	82 e0       	ldi	r24, 0x02	; 2
    2748:	62 e0       	ldi	r22, 0x02	; 2
    274a:	40 e0       	ldi	r20, 0x00	; 0
    274c:	0e 94 33 0b 	call	0x1666	; 0x1666 <DIO_u8SetPinValue>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	90 e0       	ldi	r25, 0x00	; 0
    2754:	a0 e8       	ldi	r26, 0x80	; 128
    2756:	bf e3       	ldi	r27, 0x3F	; 63
    2758:	8d 8b       	std	Y+21, r24	; 0x15
    275a:	9e 8b       	std	Y+22, r25	; 0x16
    275c:	af 8b       	std	Y+23, r26	; 0x17
    275e:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2760:	6d 89       	ldd	r22, Y+21	; 0x15
    2762:	7e 89       	ldd	r23, Y+22	; 0x16
    2764:	8f 89       	ldd	r24, Y+23	; 0x17
    2766:	98 8d       	ldd	r25, Y+24	; 0x18
    2768:	2b ea       	ldi	r18, 0xAB	; 171
    276a:	3a ea       	ldi	r19, 0xAA	; 170
    276c:	4a e2       	ldi	r20, 0x2A	; 42
    276e:	50 e4       	ldi	r21, 0x40	; 64
    2770:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2774:	dc 01       	movw	r26, r24
    2776:	cb 01       	movw	r24, r22
    2778:	89 8b       	std	Y+17, r24	; 0x11
    277a:	9a 8b       	std	Y+18, r25	; 0x12
    277c:	ab 8b       	std	Y+19, r26	; 0x13
    277e:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    2780:	69 89       	ldd	r22, Y+17	; 0x11
    2782:	7a 89       	ldd	r23, Y+18	; 0x12
    2784:	8b 89       	ldd	r24, Y+19	; 0x13
    2786:	9c 89       	ldd	r25, Y+20	; 0x14
    2788:	20 e0       	ldi	r18, 0x00	; 0
    278a:	30 e0       	ldi	r19, 0x00	; 0
    278c:	40 e8       	ldi	r20, 0x80	; 128
    278e:	5f e3       	ldi	r21, 0x3F	; 63
    2790:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    2794:	88 23       	and	r24, r24
    2796:	1c f4       	brge	.+6      	; 0x279e <LCD_voidSendChar+0x210>
		__ticks = 1;
    2798:	81 e0       	ldi	r24, 0x01	; 1
    279a:	88 8b       	std	Y+16, r24	; 0x10
    279c:	91 c0       	rjmp	.+290    	; 0x28c0 <LCD_voidSendChar+0x332>
	else if (__tmp > 255)
    279e:	69 89       	ldd	r22, Y+17	; 0x11
    27a0:	7a 89       	ldd	r23, Y+18	; 0x12
    27a2:	8b 89       	ldd	r24, Y+19	; 0x13
    27a4:	9c 89       	ldd	r25, Y+20	; 0x14
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	4f e7       	ldi	r20, 0x7F	; 127
    27ac:	53 e4       	ldi	r21, 0x43	; 67
    27ae:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    27b2:	18 16       	cp	r1, r24
    27b4:	0c f0       	brlt	.+2      	; 0x27b8 <LCD_voidSendChar+0x22a>
    27b6:	7b c0       	rjmp	.+246    	; 0x28ae <LCD_voidSendChar+0x320>
	{
		_delay_ms(__us / 1000.0);
    27b8:	6d 89       	ldd	r22, Y+21	; 0x15
    27ba:	7e 89       	ldd	r23, Y+22	; 0x16
    27bc:	8f 89       	ldd	r24, Y+23	; 0x17
    27be:	98 8d       	ldd	r25, Y+24	; 0x18
    27c0:	20 e0       	ldi	r18, 0x00	; 0
    27c2:	30 e0       	ldi	r19, 0x00	; 0
    27c4:	4a e7       	ldi	r20, 0x7A	; 122
    27c6:	54 e4       	ldi	r21, 0x44	; 68
    27c8:	0e 94 11 03 	call	0x622	; 0x622 <__divsf3>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	8c 87       	std	Y+12, r24	; 0x0c
    27d2:	9d 87       	std	Y+13, r25	; 0x0d
    27d4:	ae 87       	std	Y+14, r26	; 0x0e
    27d6:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27d8:	6c 85       	ldd	r22, Y+12	; 0x0c
    27da:	7d 85       	ldd	r23, Y+13	; 0x0d
    27dc:	8e 85       	ldd	r24, Y+14	; 0x0e
    27de:	9f 85       	ldd	r25, Y+15	; 0x0f
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	4a ef       	ldi	r20, 0xFA	; 250
    27e6:	54 e4       	ldi	r21, 0x44	; 68
    27e8:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	88 87       	std	Y+8, r24	; 0x08
    27f2:	99 87       	std	Y+9, r25	; 0x09
    27f4:	aa 87       	std	Y+10, r26	; 0x0a
    27f6:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    27f8:	68 85       	ldd	r22, Y+8	; 0x08
    27fa:	79 85       	ldd	r23, Y+9	; 0x09
    27fc:	8a 85       	ldd	r24, Y+10	; 0x0a
    27fe:	9b 85       	ldd	r25, Y+11	; 0x0b
    2800:	20 e0       	ldi	r18, 0x00	; 0
    2802:	30 e0       	ldi	r19, 0x00	; 0
    2804:	40 e8       	ldi	r20, 0x80	; 128
    2806:	5f e3       	ldi	r21, 0x3F	; 63
    2808:	0e 94 1d 04 	call	0x83a	; 0x83a <__ltsf2>
    280c:	88 23       	and	r24, r24
    280e:	2c f4       	brge	.+10     	; 0x281a <LCD_voidSendChar+0x28c>
		__ticks = 1;
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	9f 83       	std	Y+7, r25	; 0x07
    2816:	8e 83       	std	Y+6, r24	; 0x06
    2818:	3f c0       	rjmp	.+126    	; 0x2898 <LCD_voidSendChar+0x30a>
	else if (__tmp > 65535)
    281a:	68 85       	ldd	r22, Y+8	; 0x08
    281c:	79 85       	ldd	r23, Y+9	; 0x09
    281e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2820:	9b 85       	ldd	r25, Y+11	; 0x0b
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	3f ef       	ldi	r19, 0xFF	; 255
    2826:	4f e7       	ldi	r20, 0x7F	; 127
    2828:	57 e4       	ldi	r21, 0x47	; 71
    282a:	0e 94 bd 03 	call	0x77a	; 0x77a <__gtsf2>
    282e:	18 16       	cp	r1, r24
    2830:	4c f5       	brge	.+82     	; 0x2884 <LCD_voidSendChar+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2832:	6c 85       	ldd	r22, Y+12	; 0x0c
    2834:	7d 85       	ldd	r23, Y+13	; 0x0d
    2836:	8e 85       	ldd	r24, Y+14	; 0x0e
    2838:	9f 85       	ldd	r25, Y+15	; 0x0f
    283a:	20 e0       	ldi	r18, 0x00	; 0
    283c:	30 e0       	ldi	r19, 0x00	; 0
    283e:	40 e2       	ldi	r20, 0x20	; 32
    2840:	51 e4       	ldi	r21, 0x41	; 65
    2842:	0e 94 17 02 	call	0x42e	; 0x42e <__mulsf3>
    2846:	dc 01       	movw	r26, r24
    2848:	cb 01       	movw	r24, r22
    284a:	bc 01       	movw	r22, r24
    284c:	cd 01       	movw	r24, r26
    284e:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2852:	dc 01       	movw	r26, r24
    2854:	cb 01       	movw	r24, r22
    2856:	9f 83       	std	Y+7, r25	; 0x07
    2858:	8e 83       	std	Y+6, r24	; 0x06
    285a:	0f c0       	rjmp	.+30     	; 0x287a <LCD_voidSendChar+0x2ec>
    285c:	88 ec       	ldi	r24, 0xC8	; 200
    285e:	90 e0       	ldi	r25, 0x00	; 0
    2860:	9d 83       	std	Y+5, r25	; 0x05
    2862:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2864:	8c 81       	ldd	r24, Y+4	; 0x04
    2866:	9d 81       	ldd	r25, Y+5	; 0x05
    2868:	01 97       	sbiw	r24, 0x01	; 1
    286a:	f1 f7       	brne	.-4      	; 0x2868 <LCD_voidSendChar+0x2da>
    286c:	9d 83       	std	Y+5, r25	; 0x05
    286e:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2870:	8e 81       	ldd	r24, Y+6	; 0x06
    2872:	9f 81       	ldd	r25, Y+7	; 0x07
    2874:	01 97       	sbiw	r24, 0x01	; 1
    2876:	9f 83       	std	Y+7, r25	; 0x07
    2878:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287a:	8e 81       	ldd	r24, Y+6	; 0x06
    287c:	9f 81       	ldd	r25, Y+7	; 0x07
    287e:	00 97       	sbiw	r24, 0x00	; 0
    2880:	69 f7       	brne	.-38     	; 0x285c <LCD_voidSendChar+0x2ce>
    2882:	24 c0       	rjmp	.+72     	; 0x28cc <LCD_voidSendChar+0x33e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2884:	68 85       	ldd	r22, Y+8	; 0x08
    2886:	79 85       	ldd	r23, Y+9	; 0x09
    2888:	8a 85       	ldd	r24, Y+10	; 0x0a
    288a:	9b 85       	ldd	r25, Y+11	; 0x0b
    288c:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    2890:	dc 01       	movw	r26, r24
    2892:	cb 01       	movw	r24, r22
    2894:	9f 83       	std	Y+7, r25	; 0x07
    2896:	8e 83       	std	Y+6, r24	; 0x06
    2898:	8e 81       	ldd	r24, Y+6	; 0x06
    289a:	9f 81       	ldd	r25, Y+7	; 0x07
    289c:	9b 83       	std	Y+3, r25	; 0x03
    289e:	8a 83       	std	Y+2, r24	; 0x02
    28a0:	8a 81       	ldd	r24, Y+2	; 0x02
    28a2:	9b 81       	ldd	r25, Y+3	; 0x03
    28a4:	01 97       	sbiw	r24, 0x01	; 1
    28a6:	f1 f7       	brne	.-4      	; 0x28a4 <LCD_voidSendChar+0x316>
    28a8:	9b 83       	std	Y+3, r25	; 0x03
    28aa:	8a 83       	std	Y+2, r24	; 0x02
    28ac:	0f c0       	rjmp	.+30     	; 0x28cc <LCD_voidSendChar+0x33e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28ae:	69 89       	ldd	r22, Y+17	; 0x11
    28b0:	7a 89       	ldd	r23, Y+18	; 0x12
    28b2:	8b 89       	ldd	r24, Y+19	; 0x13
    28b4:	9c 89       	ldd	r25, Y+20	; 0x14
    28b6:	0e 94 41 00 	call	0x82	; 0x82 <__fixunssfsi>
    28ba:	dc 01       	movw	r26, r24
    28bc:	cb 01       	movw	r24, r22
    28be:	88 8b       	std	Y+16, r24	; 0x10
    28c0:	88 89       	ldd	r24, Y+16	; 0x10
    28c2:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28c4:	89 81       	ldd	r24, Y+1	; 0x01
    28c6:	8a 95       	dec	r24
    28c8:	f1 f7       	brne	.-4      	; 0x28c6 <LCD_voidSendChar+0x338>
    28ca:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
    28cc:	e1 96       	adiw	r28, 0x31	; 49
    28ce:	0f b6       	in	r0, 0x3f	; 63
    28d0:	f8 94       	cli
    28d2:	de bf       	out	0x3e, r29	; 62
    28d4:	0f be       	out	0x3f, r0	; 63
    28d6:	cd bf       	out	0x3d, r28	; 61
    28d8:	cf 91       	pop	r28
    28da:	df 91       	pop	r29
    28dc:	08 95       	ret

000028de <LCD_voidSendString>:
void LCD_voidSendString(u8 *Copy_up8Arr)
{
    28de:	df 93       	push	r29
    28e0:	cf 93       	push	r28
    28e2:	00 d0       	rcall	.+0      	; 0x28e4 <LCD_voidSendString+0x6>
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <LCD_voidSendString+0x8>
    28e6:	cd b7       	in	r28, 0x3d	; 61
    28e8:	de b7       	in	r29, 0x3e	; 62
    28ea:	9c 83       	std	Y+4, r25	; 0x04
    28ec:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    28ee:	1a 82       	std	Y+2, r1	; 0x02
    28f0:	19 82       	std	Y+1, r1	; 0x01
    28f2:	0f c0       	rjmp	.+30     	; 0x2912 <LCD_voidSendString+0x34>
	while (Copy_up8Arr[i]!=0)
	{
		LCD_voidSendChar(Copy_up8Arr[i]);
    28f4:	29 81       	ldd	r18, Y+1	; 0x01
    28f6:	3a 81       	ldd	r19, Y+2	; 0x02
    28f8:	8b 81       	ldd	r24, Y+3	; 0x03
    28fa:	9c 81       	ldd	r25, Y+4	; 0x04
    28fc:	fc 01       	movw	r30, r24
    28fe:	e2 0f       	add	r30, r18
    2900:	f3 1f       	adc	r31, r19
    2902:	80 81       	ld	r24, Z
    2904:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_voidSendChar>
		i++;
    2908:	89 81       	ldd	r24, Y+1	; 0x01
    290a:	9a 81       	ldd	r25, Y+2	; 0x02
    290c:	01 96       	adiw	r24, 0x01	; 1
    290e:	9a 83       	std	Y+2, r25	; 0x02
    2910:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(1);
}
void LCD_voidSendString(u8 *Copy_up8Arr)
{
	int i=0;
	while (Copy_up8Arr[i]!=0)
    2912:	29 81       	ldd	r18, Y+1	; 0x01
    2914:	3a 81       	ldd	r19, Y+2	; 0x02
    2916:	8b 81       	ldd	r24, Y+3	; 0x03
    2918:	9c 81       	ldd	r25, Y+4	; 0x04
    291a:	fc 01       	movw	r30, r24
    291c:	e2 0f       	add	r30, r18
    291e:	f3 1f       	adc	r31, r19
    2920:	80 81       	ld	r24, Z
    2922:	88 23       	and	r24, r24
    2924:	39 f7       	brne	.-50     	; 0x28f4 <LCD_voidSendString+0x16>
		i++;

	}


}
    2926:	0f 90       	pop	r0
    2928:	0f 90       	pop	r0
    292a:	0f 90       	pop	r0
    292c:	0f 90       	pop	r0
    292e:	cf 91       	pop	r28
    2930:	df 91       	pop	r29
    2932:	08 95       	ret

00002934 <LCD_voidClear>:
void LCD_voidClear(void)
{
    2934:	df 93       	push	r29
    2936:	cf 93       	push	r28
    2938:	cd b7       	in	r28, 0x3d	; 61
    293a:	de b7       	in	r29, 0x3e	; 62
	LCD_voidSendCmd(0b00000001);
    293c:	81 e0       	ldi	r24, 0x01	; 1
    293e:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
}
    2942:	cf 91       	pop	r28
    2944:	df 91       	pop	r29
    2946:	08 95       	ret

00002948 <LCD_voidGoToRowColumn>:
void LCD_voidGoToRowColumn(u8 Copy_u8Row,u8 Copy_u8Column)
{
    2948:	df 93       	push	r29
    294a:	cf 93       	push	r28
    294c:	00 d0       	rcall	.+0      	; 0x294e <LCD_voidGoToRowColumn+0x6>
    294e:	00 d0       	rcall	.+0      	; 0x2950 <LCD_voidGoToRowColumn+0x8>
    2950:	cd b7       	in	r28, 0x3d	; 61
    2952:	de b7       	in	r29, 0x3e	; 62
    2954:	89 83       	std	Y+1, r24	; 0x01
    2956:	6a 83       	std	Y+2, r22	; 0x02
	if((Copy_u8Row <= ROW2) && (Copy_u8Column < 39))
    2958:	89 81       	ldd	r24, Y+1	; 0x01
    295a:	82 30       	cpi	r24, 0x02	; 2
    295c:	d8 f4       	brcc	.+54     	; 0x2994 <LCD_voidGoToRowColumn+0x4c>
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	87 32       	cpi	r24, 0x27	; 39
    2962:	c0 f4       	brcc	.+48     	; 0x2994 <LCD_voidGoToRowColumn+0x4c>
	{
		switch(Copy_u8Row)
    2964:	89 81       	ldd	r24, Y+1	; 0x01
    2966:	28 2f       	mov	r18, r24
    2968:	30 e0       	ldi	r19, 0x00	; 0
    296a:	3c 83       	std	Y+4, r19	; 0x04
    296c:	2b 83       	std	Y+3, r18	; 0x03
    296e:	8b 81       	ldd	r24, Y+3	; 0x03
    2970:	9c 81       	ldd	r25, Y+4	; 0x04
    2972:	00 97       	sbiw	r24, 0x00	; 0
    2974:	31 f0       	breq	.+12     	; 0x2982 <LCD_voidGoToRowColumn+0x3a>
    2976:	2b 81       	ldd	r18, Y+3	; 0x03
    2978:	3c 81       	ldd	r19, Y+4	; 0x04
    297a:	21 30       	cpi	r18, 0x01	; 1
    297c:	31 05       	cpc	r19, r1
    297e:	31 f0       	breq	.+12     	; 0x298c <LCD_voidGoToRowColumn+0x44>
    2980:	09 c0       	rjmp	.+18     	; 0x2994 <LCD_voidGoToRowColumn+0x4c>
		{
		case ROW1:{LCD_voidSendCmd(0x80+Copy_u8Column);break;}
    2982:	8a 81       	ldd	r24, Y+2	; 0x02
    2984:	80 58       	subi	r24, 0x80	; 128
    2986:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
    298a:	04 c0       	rjmp	.+8      	; 0x2994 <LCD_voidGoToRowColumn+0x4c>
		case ROW2:{LCD_voidSendCmd(0xC0+Copy_u8Column);break;}
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	80 54       	subi	r24, 0x40	; 64
    2990:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
		}
	}
}
    2994:	0f 90       	pop	r0
    2996:	0f 90       	pop	r0
    2998:	0f 90       	pop	r0
    299a:	0f 90       	pop	r0
    299c:	cf 91       	pop	r28
    299e:	df 91       	pop	r29
    29a0:	08 95       	ret

000029a2 <LCD_voidSendSpecialChar>:
{
	  Array[i]=num%10;
	  Array[i+1]=int(num/10);
}*/
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
    29a2:	df 93       	push	r29
    29a4:	cf 93       	push	r28
    29a6:	cd b7       	in	r28, 0x3d	; 61
    29a8:	de b7       	in	r29, 0x3e	; 62
    29aa:	28 97       	sbiw	r28, 0x08	; 8
    29ac:	0f b6       	in	r0, 0x3f	; 63
    29ae:	f8 94       	cli
    29b0:	de bf       	out	0x3e, r29	; 62
    29b2:	0f be       	out	0x3f, r0	; 63
    29b4:	cd bf       	out	0x3d, r28	; 61
    29b6:	8c 83       	std	Y+4, r24	; 0x04
    29b8:	7e 83       	std	Y+6, r23	; 0x06
    29ba:	6d 83       	std	Y+5, r22	; 0x05
    29bc:	4f 83       	std	Y+7, r20	; 0x07
    29be:	28 87       	std	Y+8, r18	; 0x08
	u8 Local;
	Local=Copy_u8Index*8;
    29c0:	8c 81       	ldd	r24, Y+4	; 0x04
    29c2:	88 2f       	mov	r24, r24
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	88 0f       	add	r24, r24
    29c8:	99 1f       	adc	r25, r25
    29ca:	88 0f       	add	r24, r24
    29cc:	99 1f       	adc	r25, r25
    29ce:	88 0f       	add	r24, r24
    29d0:	99 1f       	adc	r25, r25
    29d2:	8b 83       	std	Y+3, r24	; 0x03
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
    29d4:	8b 81       	ldd	r24, Y+3	; 0x03
    29d6:	80 5c       	subi	r24, 0xC0	; 192
    29d8:	0e 94 1f 11 	call	0x223e	; 0x223e <LCD_voidSendCmd>
	for(int i=0;i<=8;i++)
    29dc:	1a 82       	std	Y+2, r1	; 0x02
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	0f c0       	rjmp	.+30     	; 0x2a00 <LCD_voidSendSpecialChar+0x5e>
	{
     LCD_voidSendChar(Copy_pu8SpecialChar[i]);
    29e2:	29 81       	ldd	r18, Y+1	; 0x01
    29e4:	3a 81       	ldd	r19, Y+2	; 0x02
    29e6:	8d 81       	ldd	r24, Y+5	; 0x05
    29e8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ea:	fc 01       	movw	r30, r24
    29ec:	e2 0f       	add	r30, r18
    29ee:	f3 1f       	adc	r31, r19
    29f0:	80 81       	ld	r24, Z
    29f2:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_voidSendChar>
void LCD_voidSendSpecialChar(u8 Copy_u8Index,u8* Copy_pu8SpecialChar,u8 Copy_u8Row,u8 Copy_u8Column)
{
	u8 Local;
	Local=Copy_u8Index*8;
	LCD_voidSendCmd(0b01000000+Local);//access CGRAM character 0
	for(int i=0;i<=8;i++)
    29f6:	89 81       	ldd	r24, Y+1	; 0x01
    29f8:	9a 81       	ldd	r25, Y+2	; 0x02
    29fa:	01 96       	adiw	r24, 0x01	; 1
    29fc:	9a 83       	std	Y+2, r25	; 0x02
    29fe:	89 83       	std	Y+1, r24	; 0x01
    2a00:	89 81       	ldd	r24, Y+1	; 0x01
    2a02:	9a 81       	ldd	r25, Y+2	; 0x02
    2a04:	89 30       	cpi	r24, 0x09	; 9
    2a06:	91 05       	cpc	r25, r1
    2a08:	64 f3       	brlt	.-40     	; 0x29e2 <LCD_voidSendSpecialChar+0x40>
	{
     LCD_voidSendChar(Copy_pu8SpecialChar[i]);
	}

	LCD_voidGoToRowColumn(Copy_u8Row,Copy_u8Column);//access DDRAM
    2a0a:	8f 81       	ldd	r24, Y+7	; 0x07
    2a0c:	68 85       	ldd	r22, Y+8	; 0x08
    2a0e:	0e 94 a4 14 	call	0x2948	; 0x2948 <LCD_voidGoToRowColumn>
	LCD_voidSendChar(Copy_u8Index);
    2a12:	8c 81       	ldd	r24, Y+4	; 0x04
    2a14:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_voidSendChar>

}
    2a18:	28 96       	adiw	r28, 0x08	; 8
    2a1a:	0f b6       	in	r0, 0x3f	; 63
    2a1c:	f8 94       	cli
    2a1e:	de bf       	out	0x3e, r29	; 62
    2a20:	0f be       	out	0x3f, r0	; 63
    2a22:	cd bf       	out	0x3d, r28	; 61
    2a24:	cf 91       	pop	r28
    2a26:	df 91       	pop	r29
    2a28:	08 95       	ret

00002a2a <LCD_voidSendNum>:
void LCD_voidSendNum(u32 Copy_u32Num)
{
    2a2a:	df 93       	push	r29
    2a2c:	cf 93       	push	r28
    2a2e:	cd b7       	in	r28, 0x3d	; 61
    2a30:	de b7       	in	r29, 0x3e	; 62
    2a32:	2e 97       	sbiw	r28, 0x0e	; 14
    2a34:	0f b6       	in	r0, 0x3f	; 63
    2a36:	f8 94       	cli
    2a38:	de bf       	out	0x3e, r29	; 62
    2a3a:	0f be       	out	0x3f, r0	; 63
    2a3c:	cd bf       	out	0x3d, r28	; 61
    2a3e:	9e 87       	std	Y+14, r25	; 0x0e
    2a40:	8d 87       	std	Y+13, r24	; 0x0d
	u8 l=0;u8 Arr[10];
    2a42:	1a 82       	std	Y+2, r1	; 0x02
    2a44:	1d c0       	rjmp	.+58     	; 0x2a80 <LCD_voidSendNum+0x56>
	while(Copy_u32Num!=0)
	{
		Arr[l]=Copy_u32Num%10;
    2a46:	8a 81       	ldd	r24, Y+2	; 0x02
    2a48:	e8 2f       	mov	r30, r24
    2a4a:	f0 e0       	ldi	r31, 0x00	; 0
    2a4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a50:	2a e0       	ldi	r18, 0x0A	; 10
    2a52:	30 e0       	ldi	r19, 0x00	; 0
    2a54:	b9 01       	movw	r22, r18
    2a56:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__udivmodhi4>
    2a5a:	28 2f       	mov	r18, r24
    2a5c:	ce 01       	movw	r24, r28
    2a5e:	03 96       	adiw	r24, 0x03	; 3
    2a60:	e8 0f       	add	r30, r24
    2a62:	f9 1f       	adc	r31, r25
    2a64:	20 83       	st	Z, r18
	    Copy_u32Num=(Copy_u32Num/10);
    2a66:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a68:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a6a:	2a e0       	ldi	r18, 0x0A	; 10
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	b9 01       	movw	r22, r18
    2a70:	0e 94 84 15 	call	0x2b08	; 0x2b08 <__udivmodhi4>
    2a74:	cb 01       	movw	r24, r22
    2a76:	9e 87       	std	Y+14, r25	; 0x0e
    2a78:	8d 87       	std	Y+13, r24	; 0x0d
	    l++;
    2a7a:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7c:	8f 5f       	subi	r24, 0xFF	; 255
    2a7e:	8a 83       	std	Y+2, r24	; 0x02

}
void LCD_voidSendNum(u32 Copy_u32Num)
{
	u8 l=0;u8 Arr[10];
	while(Copy_u32Num!=0)
    2a80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a82:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a84:	00 97       	sbiw	r24, 0x00	; 0
    2a86:	f9 f6       	brne	.-66     	; 0x2a46 <LCD_voidSendNum+0x1c>
	{
		Arr[l]=Copy_u32Num%10;
	    Copy_u32Num=(Copy_u32Num/10);
	    l++;
	}
	for(s8 i=l-1;i>=0;i--)
    2a88:	8a 81       	ldd	r24, Y+2	; 0x02
    2a8a:	81 50       	subi	r24, 0x01	; 1
    2a8c:	89 83       	std	Y+1, r24	; 0x01
    2a8e:	11 c0       	rjmp	.+34     	; 0x2ab2 <LCD_voidSendNum+0x88>
	{
		LCD_voidSendChar(Arr[i]+48);
    2a90:	89 81       	ldd	r24, Y+1	; 0x01
    2a92:	28 2f       	mov	r18, r24
    2a94:	33 27       	eor	r19, r19
    2a96:	27 fd       	sbrc	r18, 7
    2a98:	30 95       	com	r19
    2a9a:	ce 01       	movw	r24, r28
    2a9c:	03 96       	adiw	r24, 0x03	; 3
    2a9e:	fc 01       	movw	r30, r24
    2aa0:	e2 0f       	add	r30, r18
    2aa2:	f3 1f       	adc	r31, r19
    2aa4:	80 81       	ld	r24, Z
    2aa6:	80 5d       	subi	r24, 0xD0	; 208
    2aa8:	0e 94 c7 12 	call	0x258e	; 0x258e <LCD_voidSendChar>
	{
		Arr[l]=Copy_u32Num%10;
	    Copy_u32Num=(Copy_u32Num/10);
	    l++;
	}
	for(s8 i=l-1;i>=0;i--)
    2aac:	89 81       	ldd	r24, Y+1	; 0x01
    2aae:	81 50       	subi	r24, 0x01	; 1
    2ab0:	89 83       	std	Y+1, r24	; 0x01
    2ab2:	89 81       	ldd	r24, Y+1	; 0x01
    2ab4:	88 23       	and	r24, r24
    2ab6:	64 f7       	brge	.-40     	; 0x2a90 <LCD_voidSendNum+0x66>
	{
		LCD_voidSendChar(Arr[i]+48);
    }
}
    2ab8:	2e 96       	adiw	r28, 0x0e	; 14
    2aba:	0f b6       	in	r0, 0x3f	; 63
    2abc:	f8 94       	cli
    2abe:	de bf       	out	0x3e, r29	; 62
    2ac0:	0f be       	out	0x3f, r0	; 63
    2ac2:	cd bf       	out	0x3d, r28	; 61
    2ac4:	cf 91       	pop	r28
    2ac6:	df 91       	pop	r29
    2ac8:	08 95       	ret

00002aca <__mulsi3>:
    2aca:	62 9f       	mul	r22, r18
    2acc:	d0 01       	movw	r26, r0
    2ace:	73 9f       	mul	r23, r19
    2ad0:	f0 01       	movw	r30, r0
    2ad2:	82 9f       	mul	r24, r18
    2ad4:	e0 0d       	add	r30, r0
    2ad6:	f1 1d       	adc	r31, r1
    2ad8:	64 9f       	mul	r22, r20
    2ada:	e0 0d       	add	r30, r0
    2adc:	f1 1d       	adc	r31, r1
    2ade:	92 9f       	mul	r25, r18
    2ae0:	f0 0d       	add	r31, r0
    2ae2:	83 9f       	mul	r24, r19
    2ae4:	f0 0d       	add	r31, r0
    2ae6:	74 9f       	mul	r23, r20
    2ae8:	f0 0d       	add	r31, r0
    2aea:	65 9f       	mul	r22, r21
    2aec:	f0 0d       	add	r31, r0
    2aee:	99 27       	eor	r25, r25
    2af0:	72 9f       	mul	r23, r18
    2af2:	b0 0d       	add	r27, r0
    2af4:	e1 1d       	adc	r30, r1
    2af6:	f9 1f       	adc	r31, r25
    2af8:	63 9f       	mul	r22, r19
    2afa:	b0 0d       	add	r27, r0
    2afc:	e1 1d       	adc	r30, r1
    2afe:	f9 1f       	adc	r31, r25
    2b00:	bd 01       	movw	r22, r26
    2b02:	cf 01       	movw	r24, r30
    2b04:	11 24       	eor	r1, r1
    2b06:	08 95       	ret

00002b08 <__udivmodhi4>:
    2b08:	aa 1b       	sub	r26, r26
    2b0a:	bb 1b       	sub	r27, r27
    2b0c:	51 e1       	ldi	r21, 0x11	; 17
    2b0e:	07 c0       	rjmp	.+14     	; 0x2b1e <__udivmodhi4_ep>

00002b10 <__udivmodhi4_loop>:
    2b10:	aa 1f       	adc	r26, r26
    2b12:	bb 1f       	adc	r27, r27
    2b14:	a6 17       	cp	r26, r22
    2b16:	b7 07       	cpc	r27, r23
    2b18:	10 f0       	brcs	.+4      	; 0x2b1e <__udivmodhi4_ep>
    2b1a:	a6 1b       	sub	r26, r22
    2b1c:	b7 0b       	sbc	r27, r23

00002b1e <__udivmodhi4_ep>:
    2b1e:	88 1f       	adc	r24, r24
    2b20:	99 1f       	adc	r25, r25
    2b22:	5a 95       	dec	r21
    2b24:	a9 f7       	brne	.-22     	; 0x2b10 <__udivmodhi4_loop>
    2b26:	80 95       	com	r24
    2b28:	90 95       	com	r25
    2b2a:	bc 01       	movw	r22, r24
    2b2c:	cd 01       	movw	r24, r26
    2b2e:	08 95       	ret

00002b30 <__prologue_saves__>:
    2b30:	2f 92       	push	r2
    2b32:	3f 92       	push	r3
    2b34:	4f 92       	push	r4
    2b36:	5f 92       	push	r5
    2b38:	6f 92       	push	r6
    2b3a:	7f 92       	push	r7
    2b3c:	8f 92       	push	r8
    2b3e:	9f 92       	push	r9
    2b40:	af 92       	push	r10
    2b42:	bf 92       	push	r11
    2b44:	cf 92       	push	r12
    2b46:	df 92       	push	r13
    2b48:	ef 92       	push	r14
    2b4a:	ff 92       	push	r15
    2b4c:	0f 93       	push	r16
    2b4e:	1f 93       	push	r17
    2b50:	cf 93       	push	r28
    2b52:	df 93       	push	r29
    2b54:	cd b7       	in	r28, 0x3d	; 61
    2b56:	de b7       	in	r29, 0x3e	; 62
    2b58:	ca 1b       	sub	r28, r26
    2b5a:	db 0b       	sbc	r29, r27
    2b5c:	0f b6       	in	r0, 0x3f	; 63
    2b5e:	f8 94       	cli
    2b60:	de bf       	out	0x3e, r29	; 62
    2b62:	0f be       	out	0x3f, r0	; 63
    2b64:	cd bf       	out	0x3d, r28	; 61
    2b66:	09 94       	ijmp

00002b68 <__epilogue_restores__>:
    2b68:	2a 88       	ldd	r2, Y+18	; 0x12
    2b6a:	39 88       	ldd	r3, Y+17	; 0x11
    2b6c:	48 88       	ldd	r4, Y+16	; 0x10
    2b6e:	5f 84       	ldd	r5, Y+15	; 0x0f
    2b70:	6e 84       	ldd	r6, Y+14	; 0x0e
    2b72:	7d 84       	ldd	r7, Y+13	; 0x0d
    2b74:	8c 84       	ldd	r8, Y+12	; 0x0c
    2b76:	9b 84       	ldd	r9, Y+11	; 0x0b
    2b78:	aa 84       	ldd	r10, Y+10	; 0x0a
    2b7a:	b9 84       	ldd	r11, Y+9	; 0x09
    2b7c:	c8 84       	ldd	r12, Y+8	; 0x08
    2b7e:	df 80       	ldd	r13, Y+7	; 0x07
    2b80:	ee 80       	ldd	r14, Y+6	; 0x06
    2b82:	fd 80       	ldd	r15, Y+5	; 0x05
    2b84:	0c 81       	ldd	r16, Y+4	; 0x04
    2b86:	1b 81       	ldd	r17, Y+3	; 0x03
    2b88:	aa 81       	ldd	r26, Y+2	; 0x02
    2b8a:	b9 81       	ldd	r27, Y+1	; 0x01
    2b8c:	ce 0f       	add	r28, r30
    2b8e:	d1 1d       	adc	r29, r1
    2b90:	0f b6       	in	r0, 0x3f	; 63
    2b92:	f8 94       	cli
    2b94:	de bf       	out	0x3e, r29	; 62
    2b96:	0f be       	out	0x3f, r0	; 63
    2b98:	cd bf       	out	0x3d, r28	; 61
    2b9a:	ed 01       	movw	r28, r26
    2b9c:	08 95       	ret

00002b9e <trunc>:
    2b9e:	2f d0       	rcall	.+94     	; 0x2bfe <__fp_trunc>
    2ba0:	20 f0       	brcs	.+8      	; 0x2baa <trunc+0xc>
    2ba2:	9f 37       	cpi	r25, 0x7F	; 127
    2ba4:	08 f4       	brcc	.+2      	; 0x2ba8 <trunc+0xa>
    2ba6:	43 c0       	rjmp	.+134    	; 0x2c2e <__fp_szero>
    2ba8:	01 c0       	rjmp	.+2      	; 0x2bac <__fp_mintl>
    2baa:	1b c0       	rjmp	.+54     	; 0x2be2 <__fp_mpack>

00002bac <__fp_mintl>:
    2bac:	88 23       	and	r24, r24
    2bae:	71 f4       	brne	.+28     	; 0x2bcc <__fp_mintl+0x20>
    2bb0:	77 23       	and	r23, r23
    2bb2:	21 f0       	breq	.+8      	; 0x2bbc <__fp_mintl+0x10>
    2bb4:	98 50       	subi	r25, 0x08	; 8
    2bb6:	87 2b       	or	r24, r23
    2bb8:	76 2f       	mov	r23, r22
    2bba:	07 c0       	rjmp	.+14     	; 0x2bca <__fp_mintl+0x1e>
    2bbc:	66 23       	and	r22, r22
    2bbe:	11 f4       	brne	.+4      	; 0x2bc4 <__fp_mintl+0x18>
    2bc0:	99 27       	eor	r25, r25
    2bc2:	0d c0       	rjmp	.+26     	; 0x2bde <__fp_mintl+0x32>
    2bc4:	90 51       	subi	r25, 0x10	; 16
    2bc6:	86 2b       	or	r24, r22
    2bc8:	70 e0       	ldi	r23, 0x00	; 0
    2bca:	60 e0       	ldi	r22, 0x00	; 0
    2bcc:	2a f0       	brmi	.+10     	; 0x2bd8 <__fp_mintl+0x2c>
    2bce:	9a 95       	dec	r25
    2bd0:	66 0f       	add	r22, r22
    2bd2:	77 1f       	adc	r23, r23
    2bd4:	88 1f       	adc	r24, r24
    2bd6:	da f7       	brpl	.-10     	; 0x2bce <__fp_mintl+0x22>
    2bd8:	88 0f       	add	r24, r24
    2bda:	96 95       	lsr	r25
    2bdc:	87 95       	ror	r24
    2bde:	97 f9       	bld	r25, 7
    2be0:	08 95       	ret

00002be2 <__fp_mpack>:
    2be2:	9f 3f       	cpi	r25, 0xFF	; 255
    2be4:	31 f0       	breq	.+12     	; 0x2bf2 <__fp_mpack_finite+0xc>

00002be6 <__fp_mpack_finite>:
    2be6:	91 50       	subi	r25, 0x01	; 1
    2be8:	20 f4       	brcc	.+8      	; 0x2bf2 <__fp_mpack_finite+0xc>
    2bea:	87 95       	ror	r24
    2bec:	77 95       	ror	r23
    2bee:	67 95       	ror	r22
    2bf0:	b7 95       	ror	r27
    2bf2:	88 0f       	add	r24, r24
    2bf4:	91 1d       	adc	r25, r1
    2bf6:	96 95       	lsr	r25
    2bf8:	87 95       	ror	r24
    2bfa:	97 f9       	bld	r25, 7
    2bfc:	08 95       	ret

00002bfe <__fp_trunc>:
    2bfe:	25 d0       	rcall	.+74     	; 0x2c4a <__fp_splitA>
    2c00:	a0 f0       	brcs	.+40     	; 0x2c2a <__fp_trunc+0x2c>
    2c02:	be e7       	ldi	r27, 0x7E	; 126
    2c04:	b9 17       	cp	r27, r25
    2c06:	88 f4       	brcc	.+34     	; 0x2c2a <__fp_trunc+0x2c>
    2c08:	bb 27       	eor	r27, r27
    2c0a:	9f 38       	cpi	r25, 0x8F	; 143
    2c0c:	60 f4       	brcc	.+24     	; 0x2c26 <__fp_trunc+0x28>
    2c0e:	16 16       	cp	r1, r22
    2c10:	b1 1d       	adc	r27, r1
    2c12:	67 2f       	mov	r22, r23
    2c14:	78 2f       	mov	r23, r24
    2c16:	88 27       	eor	r24, r24
    2c18:	98 5f       	subi	r25, 0xF8	; 248
    2c1a:	f7 cf       	rjmp	.-18     	; 0x2c0a <__fp_trunc+0xc>
    2c1c:	86 95       	lsr	r24
    2c1e:	77 95       	ror	r23
    2c20:	67 95       	ror	r22
    2c22:	b1 1d       	adc	r27, r1
    2c24:	93 95       	inc	r25
    2c26:	96 39       	cpi	r25, 0x96	; 150
    2c28:	c8 f3       	brcs	.-14     	; 0x2c1c <__fp_trunc+0x1e>
    2c2a:	08 95       	ret

00002c2c <__fp_zero>:
    2c2c:	e8 94       	clt

00002c2e <__fp_szero>:
    2c2e:	bb 27       	eor	r27, r27
    2c30:	66 27       	eor	r22, r22
    2c32:	77 27       	eor	r23, r23
    2c34:	cb 01       	movw	r24, r22
    2c36:	97 f9       	bld	r25, 7
    2c38:	08 95       	ret

00002c3a <__fp_split3>:
    2c3a:	57 fd       	sbrc	r21, 7
    2c3c:	90 58       	subi	r25, 0x80	; 128
    2c3e:	44 0f       	add	r20, r20
    2c40:	55 1f       	adc	r21, r21
    2c42:	59 f0       	breq	.+22     	; 0x2c5a <__fp_splitA+0x10>
    2c44:	5f 3f       	cpi	r21, 0xFF	; 255
    2c46:	71 f0       	breq	.+28     	; 0x2c64 <__fp_splitA+0x1a>
    2c48:	47 95       	ror	r20

00002c4a <__fp_splitA>:
    2c4a:	88 0f       	add	r24, r24
    2c4c:	97 fb       	bst	r25, 7
    2c4e:	99 1f       	adc	r25, r25
    2c50:	61 f0       	breq	.+24     	; 0x2c6a <__fp_splitA+0x20>
    2c52:	9f 3f       	cpi	r25, 0xFF	; 255
    2c54:	79 f0       	breq	.+30     	; 0x2c74 <__fp_splitA+0x2a>
    2c56:	87 95       	ror	r24
    2c58:	08 95       	ret
    2c5a:	12 16       	cp	r1, r18
    2c5c:	13 06       	cpc	r1, r19
    2c5e:	14 06       	cpc	r1, r20
    2c60:	55 1f       	adc	r21, r21
    2c62:	f2 cf       	rjmp	.-28     	; 0x2c48 <__fp_split3+0xe>
    2c64:	46 95       	lsr	r20
    2c66:	f1 df       	rcall	.-30     	; 0x2c4a <__fp_splitA>
    2c68:	08 c0       	rjmp	.+16     	; 0x2c7a <__fp_splitA+0x30>
    2c6a:	16 16       	cp	r1, r22
    2c6c:	17 06       	cpc	r1, r23
    2c6e:	18 06       	cpc	r1, r24
    2c70:	99 1f       	adc	r25, r25
    2c72:	f1 cf       	rjmp	.-30     	; 0x2c56 <__fp_splitA+0xc>
    2c74:	86 95       	lsr	r24
    2c76:	71 05       	cpc	r23, r1
    2c78:	61 05       	cpc	r22, r1
    2c7a:	08 94       	sec
    2c7c:	08 95       	ret

00002c7e <_exit>:
    2c7e:	f8 94       	cli

00002c80 <__stop_program>:
    2c80:	ff cf       	rjmp	.-2      	; 0x2c80 <__stop_program>
